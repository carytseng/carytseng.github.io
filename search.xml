<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础补全</title>
      <link href="/2021/08/05/java/"/>
      <url>/2021/08/05/java/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li><p>boolean,byte,char,short,int,long,float,double,void</p></li><li><p>Boolean,Byte,Character,Integer,Long,Float,Double,Void</p></li></ul><h2 id="Java源文件名与类public修饰符"><a href="#Java源文件名与类public修饰符" class="headerlink" title="Java源文件名与类public修饰符"></a>Java源文件名与类public修饰符</h2><blockquote><p> 一个java源文件作为编译器的一个编译单元，可以有多个类，若有public类，则该类名与源文件名必须相同且只有一个，但源文件中不是必须含有public类，public类知识用来表示编译单元中存在公开接口。编译的时候java编译器判断如果存在public类，就将该类当做编译单元的对外接口，类加载器需要把该类加载。对于一个public类可以被项目中任何一个类引用。若源文件中含有public类，且含有main方法，则main方法必须在public类中定义。因为public类是对外的公开接口。</p></blockquote><h2 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h2><p>&amp;&amp;是短路操作符:若操作符左边的布尔表达式能推算出整个表达式的布尔值，则不计算右边的表达式。</p><p>&amp;是非短路操作符:始终会计算两边的布尔表达式。</p><h2 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a>==与equals</h2><p>==比较两个变量的值是否相等，也就是变量所存储的数值是否相等</p><p>若是基本类型，比较数值大小</p><p>若是对象类型，比较引用变量所指向的对象是否是同一个。</p><p>equals用于比较两个独立的对象是否相同，equals方法可覆盖，定义相同的条件</p><h2 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h2><ol><li><p>用new语句创建对象，这是最常用的创建对象的方式。</p></li><li><p>运用反射手段，调用<a href="http://lib.csdn.net/base/javase">Java</a>.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。</p></li><li><p>调用对象的clone()方法。</p></li><li><p>运用反序列化手段，调用java.io.ObjectInputStream对象的readObject()方法.</p></li></ol><h2 id="equal和hashcode"><a href="#equal和hashcode" class="headerlink" title="equal和hashcode"></a>equal和hashcode</h2><p>​        哈希码位于对象头中，每个对象都有。主要用于查找，如HashSet在存放对象时会使用对象的哈希码来计算存储位置，HashSet是不能存放相同的两个对象的，这个相同由我们自己定义，也即是equals方法。</p><p>为什么要保证equals方法相同的两个对象 hashcode相同？</p><ol><li><p>假设equals定义了两个相同的对象，而未覆写hashcode，则hashset容器根据不同的hashcode将两个对象都放进去。重写了，就会判断同一位置上已有相同的对象。</p></li><li><p>假设有相同hashcode，则会算出相同的存储位置，若不覆写equals方法，默认调用object的equals方法，比较两个引用地址，不同就都放进去，在同一位置上使用链表存储。所以必须覆写equals方法保证对象的合法性。</p></li></ol><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><blockquote><p>java基本数据类型是值传递，修改值不会对原来的值造成影响，对象类型都是引用传递，将对象引用的地址传递给方法参数，方法中修改对象属性即修改指向的内存空间上的对象的属性，java的方法只支持值传递。</p></blockquote><h2 id="方法重载与方法覆写"><a href="#方法重载与方法覆写" class="headerlink" title="方法重载与方法覆写"></a>方法重载与方法覆写</h2><p>方法重载发生在一个类中，多个同名函数同时存在，具有不同的参数个数、类型,调用方法时通过传递给它们的不同参数个数和参数类型决定具体使用哪个方法，这就是多态（编译时绑定），无法以返回类型作为重载标准。</p><p>方法覆写主要是子类对父类方法的重写，相同的名称和参数。子类函数的访问权限不能少于父类的。</p><p>动态绑定：</p><ol><li><p>编译器检查对象声明的类型和方法名，从而获取所有候选方法。</p></li><li><p>当程序运行并且使用动态绑定来调用一个方法时，那么虚拟机必须调用对象的实际类型相匹配的方法版本。</p></li></ol><ul><li><p>一个是编译时绑定，根据代码传入的参数类型或者个数来确定调用的方法</p></li><li><p>一个是运行时绑定，根据传入的对象类型，确定调用子类抑或父类的方法</p></li></ul><h2 id="静态变量与实例变量"><a href="#静态变量与实例变量" class="headerlink" title="静态变量与实例变量"></a>静态变量与实例变量</h2><p>语法定义：静态变量加static关键字，实例变量不需要</p><p>程序运行区别：</p><p>   实例变量与实例对象关联，必须创建实例对象，才能使用对象的实例变量。</p><p>   而静态变量与类关联，随着类的加载而被分配空间，无须创建对象，并且静态变量只分配了一次。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote><p>被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p></blockquote><ol><li><p>static变量</p><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： </p><p>   　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 </p><p>   　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p></li><li><p>静态方法</p><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ </p><p>   　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。 </p></li><li><p>static代码块</p><p>　static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如：</p></li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final用于声明类，方法和变量，表示属性不可变，类不可继承，方法不可覆写。</p><ul><li><p>final 数据：编译期常量，这类常量必须是基本数据类型，使用static、final修饰。 对于对象引用使用final时，使引用恒定不变，但对于对象本身是可以被改变的，即指向恒定不变。定义时需要赋值</p></li><li><p>final方法：继承类不能覆盖基类的方法</p></li><li><p>final类：不能被继承</p></li></ul><h2 id="String-、StringBuilder、StringBuffer"><a href="#String-、StringBuilder、StringBuffer" class="headerlink" title="String 、StringBuilder、StringBuffer"></a>String 、StringBuilder、StringBuffer</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>执行速度方面：StringBuilder&gt;StringBuffer&gt;String </p></li><li><p>String创建的是字符串常量，是不可变的，操作时会不断创建新的对象，原来的对象会被GC回收掉。而StringBuilder和StringBuffer是字符串变量，操作时是对同一个对象进行。</p></li><li><p>StringBuilder：线程非安全</p></li><li><p>StringBuffer：线程安全</p></li><li><p>String若用==比较，则比较的是对象的地址。String方法重写了equals方法，所以比较时，比较的是字符串的内容是否相同。</p></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>创建字符串的方式: </p><ol><li><p>使用new关键字创建字符串,比如String s1 = new String(“abc”); </p></li><li><p>直接指定.比如String s2 = “abc”; </p></li><li><p>使用串联生成新的字符串.比如String s3 = “ab” + “c”; </p></li></ol><blockquote><p>Java运行时会维护一个String Pool(String池),JavaDoc翻译很模糊”字符串缓冲区”.String池用来存放运行时中产生的各种字符串,并且池中的字符串的内容不重复.而一般对象不存在这个缓冲池,并且创建的对象仅仅存在于方法的堆栈区。</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>原理1:当使用任何方式来创建一个字符串对象s时,Java运行时(运行中JVM)会拿着这个X在String池中找是否存在内容相同的字符串对象,如果不存在,则在池中创建一个字符串s,否则,不在池中添加. </p></li><li><p>原理2:Java中,只要使用new关键字来创建对象,则一定会(在堆区或栈区)创建一个新的对象. </p></li><li><p>原理3:使用直接指定或者使用纯字符串串联来创建String对象,则仅仅会检查维护String池中的字符串,池中没有就在池中创建一个,有则罢了!但绝不会在堆栈区再去创建该String对象. </p></li><li><p>原理4:使用包含变量的表达式来创建String对象,则不仅会检查维护String池,而且还会在堆栈区创建一个String对象. </p></li><li><p>javac编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉取中的加号</p></li></ul><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String s1 &#x3D; &quot;a&quot;;</span><br><span class="line"></span><br><span class="line">String s2 &#x3D; s1 + &quot;b&quot;;&#x2F;&#x2F;含有变量，因此会先检查维护String池，并在堆中创建一个新对象</span><br><span class="line"></span><br><span class="line">String s3 &#x3D; &quot;a&quot; + &quot;b&quot;;</span><br><span class="line"></span><br><span class="line">System.out.println(s2 &#x3D;&#x3D; &quot;ab&quot;);&#x2F;&#x2F;false,&quot;ab&quot;的地址在常量池中，而s2指向的是堆中所copy的对象</span><br><span class="line"></span><br><span class="line">System.out.println(s3 &#x3D;&#x3D; &quot;ab&quot;);&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">System.out.println(s3 &#x3D;&#x3D; s2);&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">String s1 &#x3D; &quot;a&quot;;</span><br><span class="line"></span><br><span class="line">String s2 &#x3D; &quot;a&quot; + &quot;b&quot;;&#x2F;&#x2F;直接在常量池中创建一个新的</span><br><span class="line"></span><br><span class="line">String s3 &#x3D; &quot;a&quot; + &quot;b&quot;;&#x2F;&#x2F;使用常量池中存在的</span><br><span class="line"></span><br><span class="line">System.out.println(s2 &#x3D;&#x3D; &quot;ab&quot;);&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">System.out.println(s3 &#x3D;&#x3D; s2);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>线程本地变量，对于一个变量，ThreadLocal为该变量在每个线程中创建一个副本，线程间的变量互不影响。适用场景，多个线程不依赖于共享变量的状态来进行逻辑驱动，适用于在每个线程中，保存一份变量副本，对于该副本的任何修改也仅限于该线程的操作，其他线程无法影响。</p></blockquote><p><strong>设计理念</strong></p><blockquote><p>概括起来说，对于多线程资源共享的问题，同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，做到多线程的数据隔离。</p></blockquote><p><strong>设计原理</strong></p><p>​        每个线程Thread类会维护一个变量ThreadLocalMap，该map是以ThreadLocal作为key，保存的变量值作为value保存在当前线程的ThreadLocalMap中，所以每个线程可以存储多个ThreadLocal的变量值。set的时候，拿到当前线程的ThreadLocalMap，若map为空则初始化，否则set进变量值。get的时候，是获取当前线程的ThreadLocalMap，以该ThreadLocal作为key来获取变量值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void set(T value) &#123;</span><br><span class="line">  Thread t &#x3D; Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map &#x3D; getMap(t);</span><br><span class="line">  if (map !&#x3D; null)</span><br><span class="line">    map.set(this, value);</span><br><span class="line">  else</span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public T get() &#123;</span><br><span class="line">  Thread t &#x3D; Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map &#x3D; getMap(t);</span><br><span class="line">  if (map !&#x3D; null) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e &#x3D; map.getEntry(this);</span><br><span class="line">    if (e !&#x3D; null) </span><br><span class="line">      @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">      T result &#x3D; (T)e.value;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return setInitialValue();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类加载及双亲委派模型"><a href="#类加载及双亲委派模型" class="headerlink" title="类加载及双亲委派模型"></a>类加载及双亲委派模型</h2><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><h4 id="加载："><a href="#加载：" class="headerlink" title="加载："></a>加载：</h4><p>​        查找并加载二进制数据。把类的.class文件中的二进制数据读入内存，把它存放到方法区，然后在堆创建一个Class对象，用来封装类在方法区内的数据结构，提供了访问类在方法区内的数据结构的接口。</p><h4 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h4><ol><li><p>验证：确保被加载类的正确性。</p></li><li><p>准备：为类的静态变量分配内存，并将其初始化为默认值。</p></li><li><p>解析：把类中的符号引用转换为直接引用。</p></li><li><p>初始化：给类的静态变量赋予正确的初始值。</p><ol><li>假如这个类还没有被加载和连接，就先进行加载和连接。</li><li>假如这个类存在父类，并且这个父类还没有初始化，就先初始化。</li><li>假如这个类存在初始化语句，就依次执行。</li></ol></li></ol><h4 id="初始化的时机："><a href="#初始化的时机：" class="headerlink" title="初始化的时机："></a>初始化的时机：</h4><ul><li><p>创建类的实例：new、反射、克隆及序列化。</p></li><li><p>调用类的静态方法。</p></li><li><p>访问某个类或接口的静态变量。</p></li><li><p>调用java api的某些反射方法。</p></li><li><p>初始一个类的子类</p></li></ul><p>类及对象创建的初始化顺序</p><ol><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ol><p>双亲委派模型：Bootstrap ClassLoader、Extension ClassLoader、ApplicationClassLoader。</p><blockquote><p>如果一个类加载器收到类加载的请求，首先不会自己尝试加载，先委派给父类加载器去完成，只有当父加载器无法加载时，子加载器才会尝试加载。这种机制下用户自定义的类加载器不可能加载由父加载器加载的可靠类，从而防止不可靠的恶意代码。</p></blockquote><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><h3 id="Error与Exception"><a href="#Error与Exception" class="headerlink" title="Error与Exception"></a>Error与Exception</h3><ul><li><p>Error是程序无法处理的错误，比如OutOfMemoryError、ThreadDeath等。这些异常发生时， Java虚拟机（JVM）一般会选择线程终止。</p></li><li><p>Exception是程序本身可以处理的异常，这种异常分两大类运行时异常和非运行时异常。  程序中应当尽可能去处理这些异常。</p><ul><li><p>运行时异常：</p><blockquote><p>运行时异常都是RuntimeException类及其子类异常，如NullPointerException、IndexOutOfBoundsException、ArithmeticException、 IllegalArgumentException 等， 这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p></blockquote></li><li><p>非运行时异常    </p><blockquote><p>非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p></blockquote></li></ul></li></ul><h3 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h3><blockquote><p>表示要尝试运行代码，try语句块中代码受异常监控，其中代码发生异常时，会抛出异常对象。</p></blockquote><h3 id="catch语句块"><a href="#catch语句块" class="headerlink" title="catch语句块"></a>catch语句块</h3><blockquote><p>捕获try代码块中发生的异常并在其代码块中做异常处理，catch语句带一个Throwable类型的参数，表示可捕获异常类型。当try中出现异常时，catch会捕获到发生的异常，并和自己的异常类型匹配，  若匹配，则执行catch块中代码，并将catch块参数指向所抛的异常对象。catch语句可以有多个，用来匹配多个中的一个异常，一旦匹配上后，就不再尝试匹配别的catch块了。通过异常对象可以获取异常发生时完整的JVM堆栈信息，以及异常信息和异常发生的原因等。</p></blockquote><h3 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h3><blockquote><p>是紧跟catch语句后的语句块，这个语句块总是会在方法返回前执行，而不管是否try语句块是否发生异常。并且这个语句块总是在方法返回前执行。目的是给程序一个补救的机会。这样做也体现了Java语言的健壮性。</p></blockquote><h3 id="try、catch、finally三个语句块应注意的问题"><a href="#try、catch、finally三个语句块应注意的问题" class="headerlink" title="try、catch、finally三个语句块应注意的问题"></a>try、catch、finally三个语句块应注意的问题</h3><ol><li><p>try、catch、finally三个语句块均不能单独使用，三者可以组成 try…catch…finally、try…catch、</p><p>try…finally三种结构，catch语句可以有一个或多个，finally语句最多一个。</p></li><li><p>try、catch、finally三个代码块中变量的作用域为代码块内部，分别独立而不能相互访问。</p><p>如果要在三个块中都可以访问，则需要将变量定义到这些块的外面。</p></li><li><p>多个catch块时候，只会匹配其中一个异常类并执行catch块代码，而不会再执行别的catch块，</p><p>并且匹配catch语句的顺序是由上到下。</p></li></ol><h3 id="throw、throws关键字"><a href="#throw、throws关键字" class="headerlink" title="throw、throws关键字"></a>throw、throws关键字</h3><blockquote><p>throw关键字是用于方法体内部，用来抛出一个Throwable类型的异常。如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。如果抛出的是Error或RuntimeException，则该方法的调用者可选择处理该异常。有关异常的转译会在下面说明。</p><p>throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣一般在catch块中打印一下堆栈信息做个勉强处理。</p></blockquote><h3 id="try中return，则finally语句是否执行，什么时候执行？"><a href="#try中return，则finally语句是否执行，什么时候执行？" class="headerlink" title="try中return，则finally语句是否执行，什么时候执行？"></a>try中return，则finally语句是否执行，什么时候执行？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class smallT &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        smallT t &#x3D; new smallT();</span><br><span class="line">        int b &#x3D; t.get();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            return 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先返回1，最终返回的是2。</p><p>try中的return 语句调用的函数先于 finally中调用的函数执行，也就是说 return语句先执行，finally语句后执行，所以，返回的结果是 2。Return 并不是让函数马上返回，而是 return语句执行后，将把返回结果放置进函数栈中，此时函数并不是马上返回，它要执行 finally语句后才真正开始返回。</p><h1 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h1><h2 id="流式处理"><a href="#流式处理" class="headerlink" title="流式处理"></a>流式处理</h2><blockquote><p>将待处理的集合当成流经过管道的处理，比如筛选、排序、聚合等，得到最终想要的结果。</p></blockquote><p>forEach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random(); </span><br><span class="line"></span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打印对象</span><br><span class="line"></span><br><span class="line">students.stream().forEach(s-&gt;&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println(s.getName())</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 获取对应的平方数 </span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; squaresList &#x3D; numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings &#x3D; Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取空字符串的数量 </span><br><span class="line"></span><br><span class="line">long count &#x3D; strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure><p>limit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random(); </span><br><span class="line"></span><br><span class="line">random.ints().limit(10).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>order</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按照对象的某个属性排序</span><br><span class="line"></span><br><span class="line">students.stream().sorted(Comparator.comparing(Student::getBirthday)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;倒序</span><br><span class="line"></span><br><span class="line">students.stream().sorted(Comparator.comparing(Student::getBirthday).reversed()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>match</p><ul><li>allMatch：Stream 中全部元素符合则返回 true ;</li><li>anyMatch：Stream 中只要有一个元素符合则返回 true;</li><li>noneMatch：Stream 中没有一个元素符合则返回 true。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">boolean all &#x3D; lists.stream().allMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否都大于3:&quot; + all);</span><br><span class="line"></span><br><span class="line">boolean any &#x3D; lists.stream().anyMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否有一个大于3:&quot; + any);</span><br><span class="line"></span><br><span class="line">boolean none &#x3D; lists.stream().noneMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否没有一个大于3的:&quot; + none);    </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否都大于3:false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否有一个大于3:true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否没有一个大于3的:false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis模糊删除key</title>
      <link href="/2020/12/25/Redis%E6%A8%A1%E7%B3%8A%E5%88%A0%E9%99%A4key/"/>
      <url>/2020/12/25/Redis%E6%A8%A1%E7%B3%8A%E5%88%A0%E9%99%A4key/</url>
      
        <content type="html"><![CDATA[<blockquote><p>redis没有提供针对key的模糊删除支持，提供的keys命令会一次性扫描库中符合条件的记录，没有分页设置，可能由于数据量过大造成redis卡顿，影响正常业务进行，在生产中应该摒弃用keys命令来扫描。</p></blockquote><h3 id="Scan命令"><a href="#Scan命令" class="headerlink" title="Scan命令"></a>Scan命令</h3><p>该命令是redis2.8提供的，相比keys命令，它是通过游标分步进行，不会对线程造成阻塞，提供匹配功能。游标的意思，redis的数据结构是基于hash的，类似java的hashmap，底层也是数组+链表，这里通过游标遍历。</p><p>SCAN CURSOR [MATCH pattern] [COUNT count]</p><p>CURSOR代表游标，每次扫描都会返回上次的游标以此来开始增量的扫描，count指扫描槽位的数量，可以理解为扫描hashmap中一维数组中多少个元素并返回这些槽组的数据，判断是否有符合的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanAndDel</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           redisTemplate.execute((RedisCallback&lt;Boolean&gt;) redisConnection -&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               Object nativeConnection = redisConnection.getNativeConnection();</span><br><span class="line"></span><br><span class="line">               <span class="comment">// lettuce 单机</span></span><br><span class="line">               <span class="keyword">if</span> (nativeConnection <span class="keyword">instanceof</span> RedisAsyncCommands) &#123;</span><br><span class="line">                   RedisAsyncCommands connection = (RedisAsyncCommands) nativeConnection;</span><br><span class="line"></span><br><span class="line">                   RedisCommands&lt;<span class="keyword">byte</span>[], String&gt; commands = connection.getStatefulConnection().sync();</span><br><span class="line"></span><br><span class="line">                   KeyScanCursor&lt;<span class="keyword">byte</span>[]&gt; scanCursor = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (scanCursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           scanCursor = commands.scan(ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           scanCursor = commands.scan(scanCursor, ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       List&lt;<span class="keyword">byte</span>[]&gt; byteKeys = scanCursor.getKeys();</span><br><span class="line">                       <span class="keyword">if</span> (byteKeys.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">byte</span>[][] keys = <span class="keyword">new</span> <span class="keyword">byte</span>[byteKeys.size()][];</span><br><span class="line">                           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteKeys.size(); i++) &#123;</span><br><span class="line">                               keys[i] = byteKeys.get(i);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           commands.del(keys);</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (!scanCursor.isFinished());</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// lettuce 集群</span></span><br><span class="line">               <span class="keyword">if</span> (nativeConnection <span class="keyword">instanceof</span> RedisAdvancedClusterAsyncCommands) &#123;</span><br><span class="line">                   RedisAdvancedClusterAsyncCommands connection = (RedisAdvancedClusterAsyncCommands) nativeConnection;</span><br><span class="line"></span><br><span class="line">                   RedisAdvancedClusterCommands&lt;<span class="keyword">byte</span>[], String&gt; commands = connection.getStatefulConnection().sync();</span><br><span class="line"></span><br><span class="line">                   KeyScanCursor&lt;<span class="keyword">byte</span>[]&gt; scanCursor = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (scanCursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           scanCursor = commands.scan(ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           scanCursor = commands.scan(scanCursor, ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       List&lt;<span class="keyword">byte</span>[]&gt; byteKeys = scanCursor.getKeys();</span><br><span class="line">                       <span class="keyword">if</span> (byteKeys.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">byte</span>[][] keys = <span class="keyword">new</span> <span class="keyword">byte</span>[byteKeys.size()][];</span><br><span class="line">                           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteKeys.size(); i++) &#123;</span><br><span class="line">                               keys[i] = byteKeys.get(i);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           commands.del(keys);</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (!scanCursor.isFinished());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ignite迁移</title>
      <link href="/2020/11/28/ignite%E8%BF%81%E7%A7%BB/"/>
      <url>/2020/11/28/ignite%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新主机docker脚本安装</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><ul><li><p>docker-compose.yml&amp;ignite.db文件cp</p></li><li><p>容器服务导出导入</p><ul><li>生成容器快照，打出镜像<ul><li>docker commit -p [containerId] [alias]</li></ul></li><li>生成tar文件<ul><li>docker save -o ~/[filename].tar [imageName]</li></ul></li><li>导入tar文件<ul><li>cat [tarfile] |docker import - [name]</li></ul></li></ul></li><li><p>原主机获取容器启动命令相关参数</p><ul><li><p>安装runlike</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-pip</span><br><span class="line">pip install runlike</span><br><span class="line"><span class="meta">#</span><span class="bash">查看启动参数</span></span><br><span class="line">runlike -p [containerid]</span><br><span class="line">cp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动ssr子容器所有服务，获得所有containerid，修改ignite.db中表user的service_id</p></li><li><p>docker-compose run –rm ignite-admin /bin/sh -c ‘./ignite-admin recover’</p></li><li><p>docker-compose up -d</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Navicat更新删除数据的正确姿势</title>
      <link href="/2020/11/20/Navicat%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
      <url>/2020/11/20/Navicat%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 非常久没有使用Navicat这个工具了，基本从开发的项目转入oracle之后都是使用PL/SQL这个工具了，oracle是提供执行语句回滚的显式操作的。最近发现Navicat操作MySQL居然没有，查阅了一下Navicat执行sql特别是update/delete时怎么防止误操作，回滚数据。</p></blockquote><p>MySQL是默认提交事务的，所以写query时，如果写了条update是直接提交的，如果想回滚怎么办？只能找binlog非常麻烦。正确的姿势应该是在query页中，提前set autocommit=0，也就是关闭自动提交，但这仅在当前query页中生效，重启或者打开新标签页会失效，然后你的update语句需要显式commit才能提交，这样你能在commit前select一下查看当前执行结果，Innodb的隔离级别默认是可重复读的，所以能读到当前事务下的数据结果，如果不对就执行rollback。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CAP定理</title>
      <link href="/2020/11/04/CAP%E5%AE%9A%E7%90%86/"/>
      <url>/2020/11/04/CAP%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试被问到CAP定理，之前看过，真正问起来讲得不清楚，估计没有真正的理解这个定理，故作此文进行记录</p></blockquote><p>分布式系统有三个指标，也即一致性、可用性、分区容错</p><p>（C）一致性：多个节点的数据保持一致，当某个节点的数据修改后，需要同步修改所有节点的数据，保持一致</p><p>（A）可用性：即当某个节点宕机后，整个集群还能正常对外服务，保证服务健康</p><p>（P）分区容错：两个节点间可能会无法通信，P定理总是成立的。</p><p>一致性和可用性不可能同时成立，因为P即分区容错总是可能出现，如果要保证一致性，则必须保证所有节点都收到该数据的同步，才能对外服务，这就不满足可用性。如果满足可用性，即某个节点崩坏了也要提供服务，那么就不能保证一致性。</p><p>所以一般需要根据业务需要，保证C或A其中一个特性，例如网页更新可以采取可用性，因为最终用户都会看到最新的版本；如果是银行等金融数据，需要保证强一致性，则需要抛弃可用性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈实现队列</title>
      <link href="/2020/10/28/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2020/10/28/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>相对好理解的一条题目，栈的特点是后进先出，队列的特点是先进先出，那么用两个栈怎么实现队列呢？设S1和S2两个栈，要实现先进先出，如果都放到一个栈中，栈底元素是最先入的，那么要先出，得把栈底元素变成栈顶元素，这时候就利用到第二个栈了，把S1的元素都倒到S2，那么S2的栈顶元素就是最先入栈的，也就符合队列的特性。</p><p>入队列思路</p><ul><li>直接放入S1</li></ul><p>出队列思路</p><ul><li>判断S2是否为空，空则将S1的数据倒到S2，不为空不处理，S2弹出栈顶元素。这里直接保证了当出栈时，S2只要有元素，则一直弹，否则再从S1中取数据，减少了倒来倒去的过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueSample</span></span>&#123;</span><br><span class="line">  Stack&lt;Integer&gt; s1=<span class="keyword">new</span> Stack();</span><br><span class="line">  Stack&lt;Integer&gt; s2=<span class="keyword">new</span> Stack();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    s1.push(x);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s2.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">while</span>(!s1.isEmpty())&#123;</span><br><span class="line">        s2.push(s1.pop());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s2.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.isEmpty()&amp;&amp;s2.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis探究</title>
      <link href="/2020/10/28/Redis%E6%8E%A2%E7%A9%B6/"/>
      <url>/2020/10/28/Redis%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工作中接触Redis大多仅用来作为缓存，也用过来做分布式锁，对于内部的实现机制及高级用法几乎是走马观花，故作此文用来记录相关的知识点，从原理出发慢慢拓展此文，全部用自己的理解话术来进行记录，个人理解，有误请指出。</p></blockquote><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis诞生之初是为了解决关系型数据库的性能问题，由于IO需要对磁盘的读写速度满足不了实际场景，因此创造者利用内存造了一个内存数据库，没有关系型数据库的约束，Redis提供的数据结构简单且能满足高性能的读写场景，其基于对内存的读写，能够在短时间内处理数据，由于读写速度快，免去IO的局限，IO涉及操作系统用户空间与内核空间的数据复制及事件等待，所以redis采用单线程的处理模型，免去线程切换的开销，因为也没必要进行多线程处理</p><h3 id="对比memcached"><a href="#对比memcached" class="headerlink" title="对比memcached"></a>对比memcached</h3><p>支持多种数据结构，memcached仅支持字符串且不支持持久化</p><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><p>Redis采用基于Reactor模式开发网络事件处理器，采用IO多路复用技术，简单来说就是一条线程监听多个客户端socket，当有事件到时，将事件作为一个task放到队列中，接下来文件处理器会对队列中的task进行处理，文件处理器是单线程的，没有线程的切换问题，文件处理器包含连接应答器、命令请求处理器、命令回复处理器，执行相应的命令后，返回相应。这也是Redis速度快的原因：IO多路复用、单线程处理task、基于内存的数据操作</p><p><img src="/assets/blog_img/timg.jpeg" alt="timg"></p><h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>基于键值的存储，值支持以下几种类型</p><ul><li>string：字符串<ul><li>字节串：非字符自增会报错</li><li>整数：可自增减</li><li>浮点数</li></ul></li><li>list：有序队列<ul><li>可用作队列</li></ul></li><li>set：集合</li><li>hash：散列</li><li>zset：有序集合<ul><li>相比散列，提供基于分值的相关功能，每个key有对应的score，应对一些场景应用</li></ul></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>Redis提供持久化的功能，能够将内存的数据定时写入硬盘，保证数据在系统重启后能够恢复，继续进行服务</p><p>两种持久化的方式：</p><ul><li>快照</li><li>AOF</li></ul><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>　　快照：会开启一个子进程定时对内存的数据进行打快照，使用BGSAVE命令，缺点是快照是按周期打，性能有限，一旦系统崩溃，会丢失从上次快照之后的数据，也有可能在刚打完快照就崩溃。而且打快照可能会造成Redis停顿</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>　　AOF：将Redis的执行命令记录下来，记录到AOF文件中，可根据需要设置频率，恢复时只需要执行相应的写命令即可。缺点是AOF的文件会随着内存数据的增大而增大，造成磁盘爆满，可以使用命令对AOF文件重写，压缩冗余的部分</p><p>同步频率</p><ul><li><p>always：每个命令都写入磁盘</p></li><li><p>everysec：每秒同步一次，多个命令到磁盘</p></li><li><p>no：由系统决定写入时间</p></li></ul><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>水平添加多个Redis实例，通过主从服务器来满足高性能的读写请求。主服务器将快照文件发送到从服务器，从服务器获得快照并初始化数据</p><h3 id="过期时间设置"><a href="#过期时间设置" class="headerlink" title="过期时间设置"></a>过期时间设置</h3><p>Redis提供过期时间设置保证内存空间，也能保证热数据</p><p>Redis后台有两种方式对过期数据进行删除</p><ul><li>定期删除：每隔一段时间抽取过期的key然后删除</li><li>惰性删除：当系统查询到这个过期key时会删除</li></ul><h3 id="热key问题"><a href="#热key问题" class="headerlink" title="热key问题"></a>热key问题</h3><p>针对某个key的大流量请求，造成物理机的网卡超载，导致Redis宕机引发雪崩</p><p>解决思路：</p><ul><li>提前把key打到不同的服务器</li><li>加入二级缓存，提前加载热key到内存</li></ul><h3 id="缓存击穿-缓存穿透-缓存雪崩"><a href="#缓存击穿-缓存穿透-缓存雪崩" class="headerlink" title="缓存击穿|缓存穿透|缓存雪崩"></a>缓存击穿|缓存穿透|缓存雪崩</h3><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>类似热key问题，区别点在于key的过期导致请求打在DB上</p><p>解决思路：</p><ul><li>加锁更新，对key进行加锁，在数据库查询前就进行了拦截</li><li>过期时间写在value中，用异步方式刷新过期时间</li></ul><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>查询缓存中不存在的key，恶意请求大量制造不存在的key直接请求DB</p><p>解决思路：</p><ul><li>加一层布隆过滤器</li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>某一时刻可能发生大规模的缓存失效，例如缓存服务宕机，大量的key同时失效，请求打到DB，导致整个系统雪崩</p><ul><li>不同的key设置不同的过期时间，避免同时过期</li><li>限流，降低db压力</li><li>二级缓存</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring多数据源加载</title>
      <link href="/2020/10/07/Spring%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A0%E8%BD%BD/"/>
      <url>/2020/10/07/Spring%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Spring引入多数据源的方式，系统扩展的过程中可能会引入多个数据源，查阅了一些博客，发现引入方式或多或少都需要引入新的配置类，这里记录下在不需要修改任何代码的情况下，扩展数据源的方式，以后只需要在配置文件添加配置就能直接引入。</p></blockquote><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li>分包方式</li><li>参数化方式</li><li>注解+AOP</li></ul><h4 id="分包方式"><a href="#分包方式" class="headerlink" title="分包方式"></a>分包方式</h4><p>比较简单，哪个数据源的操作就走哪个mapper目录下的文件，一般就是两个库无任何关联的场景。</p><h4 id="参数化方式"><a href="#参数化方式" class="headerlink" title="参数化方式"></a>参数化方式</h4><p>根据传入的参数选择数据源，进行数据查询，个人比较推崇这一种方式。</p><h4 id="注解-AOP"><a href="#注解-AOP" class="headerlink" title="注解+AOP"></a>注解+AOP</h4><p>在特定的方式上添加自定义的注解，配置上需要选择的数据源值，AOP执行的时候通过获取注解上的值来切换，这种方式需要在方法上写死需要的数据源，不太灵活。</p><h3 id="引入数据源的思路"><a href="#引入数据源的思路" class="headerlink" title="引入数据源的思路"></a>引入数据源的思路</h3><ul><li>配置文件添加多个数据源</li><li>自定义数据源配置</li><li>注入Spring容器</li><li>利用ThreadLocal的上下文，实现线程与数据源的绑定关系</li><li>使用上用参数化还是AOP等都可以</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/master?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">slave1:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/slave1?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">slave2:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/slave2?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>建立一个property类来映射配置，这样我们就能拿到多个数据源的配置了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceProperty</span> </span>&#123;</span><br><span class="line">  <span class="comment">//只映射datasource</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; datasource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就是将所有的配置转换成bean并且注入到Spring中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.demo.sv.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicDataSourceProperty dynamicDataSourceProperty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能描述: &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 〈动态数据源bean 自动配置注册所有数据源〉</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dynamicDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//拿到Spring容器</span></span><br><span class="line">        DefaultListableBeanFactory listableBeanFactory = (DefaultListableBeanFactory) beanFactory;        </span><br><span class="line">        <span class="comment">/*获取yml所有数据源配置*/</span></span><br><span class="line">        Map&lt;String, Object&gt; datasource = dynamicDataSourceProperty.getDatasource();</span><br><span class="line">        Map&lt;Object, Object&gt; dataSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">        Optional.ofNullable(datasource).ifPresent(map -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">                <span class="comment">//创建数据源对象</span></span><br><span class="line">                HikariDataSource dataSource = (HikariDataSource) DataSourceBuilder.create().build();</span><br><span class="line">                String dataSourceId = entry.getKey();</span><br><span class="line">                configeDataSource(entry, dataSource);</span><br><span class="line">                <span class="comment">/*bean工厂注册每个数据源bean*/</span></span><br><span class="line">                listableBeanFactory.registerSingleton(dataSourceId, dataSource);</span><br><span class="line">                dataSourceMap.put(dataSourceId, dataSource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//AbstractRoutingDataSource设置主从数据源</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSource(beanFactory.getBean(<span class="string">&quot;master&quot;</span>, DataSource.class), dataSourceMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从配置转换成bean</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configeDataSource</span><span class="params">(Map.Entry&lt;String, Object&gt; entry, HikariDataSource dataSource)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; dataSourceConfig = (Map&lt;String, Object&gt;) entry.getValue();</span><br><span class="line">        dataSource.setJdbcUrl(MapUtils.getString(dataSourceConfig, <span class="string">&quot;jdbcUrl&quot;</span>));</span><br><span class="line">        dataSource.setDriverClassName(MapUtils.getString(dataSourceConfig, <span class="string">&quot;driverClassName&quot;</span>));</span><br><span class="line">        dataSource.setUsername(MapUtils.getString(dataSourceConfig, <span class="string">&quot;username&quot;</span>));</span><br><span class="line">        dataSource.setPassword(MapUtils.getString(dataSourceConfig, <span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换数据源我们需要用到Spring提供的一个抽象类AbstractRoutingDataSource，这个类有个抽象方法determineTargetDataSource，我们通过继承这个类，并且实现determineTargetDataSource方法，这个determineTargetDataSource就是决定调用数据源的逻辑，简单来说这个方法算出key值，然后去数据源池取出我们需要的数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">(DataSource defaultDataSource, Map&lt;Object, Object&gt; targetDataSource)</span> </span>&#123;</span><br><span class="line">        backupTargetDataSources = targetDataSource;</span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultDataSource);</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(backupTargetDataSources);</span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前的数据源：&#123;&#125;&quot;</span>,DynamicDataSourceContextHolder.getContextKey());</span><br><span class="line">      <span class="comment">//我们自己定义了一个DynamicDataSourceContextHolder来维护key，只要我们在方法调用前设置key，Spring会根据这个方法来决定数据源</span></span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceContextHolder.getContextKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类，Springboot项目要加入排除自动配置数据源注解@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SvApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">      <span class="comment">//根据需要切换我们需要的数据源</span></span><br><span class="line">        DynamicDataSourceContextHolder.setContextKey(<span class="string">&quot;slave2&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users= userMapper.query();</span><br><span class="line">        DynamicDataSourceContextHolder.remove();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于多数据源的事务处理"><a href="#关于多数据源的事务处理" class="headerlink" title="关于多数据源的事务处理"></a>关于多数据源的事务处理</h3><p>当引入多数据源后，如果要加入事务处理，同一个事务中处理处理两个数据源的数据会失败，主要是因为第一个数据源打开数据库连接后，会加入ThreadLocal中与线程进行绑定，而此时第二个数据源再获取sqlSession，发现不为空，取的是第一个数据源的连接，所以会有问题。如果要支持，思路就是保证sqlSession的独立，但不能保证分布式事务的正确处理。查阅相关资料，可以使用XA协议，具体此文没有详细探讨。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始写框架-SpringMVC</title>
      <link href="/2020/09/30/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E6%A1%86%E6%9E%B6-SpringMVC/"/>
      <url>/2020/09/30/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E6%A1%86%E6%9E%B6-SpringMVC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：</p><p>　　最近打算提升下源码能力，跟着相关教程实现Spring框架，巩固下前面的学习知识，像反射、设计模式等，顺带熟悉一些API。像设计模式这类知识，只能通过代码实践来提升对其核心思想的理解，毕竟设计模式不是凭空产生的，而是在代码实践的过程中，通过不断地重构提炼，发现其奥妙之处，才产生相关的程序思想。</p></blockquote><h3 id="1-0-MVC"><a href="#1-0-MVC" class="headerlink" title="1.0 MVC"></a>1.0 MVC</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h4 id="配置文件application-properties"><a href="#配置文件application-properties" class="headerlink" title="配置文件application.properties"></a>配置文件application.properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanPackage=com.gupaoedu.demo</span><br></pre></td></tr></table></figure><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>这部分主要模拟Spring中我们常用的Autowired，Controller，RequestMapping，RequestParam，Service等。</p><p>注解文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPAutowired &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPRequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPRequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gpmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.gupaoedu.mvcframework.v1.servlet.GPDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gpmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GPController</span></span><br><span class="line"><span class="meta">@GPRequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPAutowired</span></span><br><span class="line">    <span class="keyword">private</span> IDemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPRequestMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, <span class="meta">@GPRequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        String result = demoService.get(name);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            resp.getWriter().write(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPRequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,<span class="meta">@GPRequestParam(&quot;a&quot;)</span>Integer a,<span class="meta">@GPRequestParam(&quot;b&quot;)</span> Integer b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            resp.getWriter().write(a+<span class="string">&quot;+&quot;</span>+b+<span class="string">&quot;=&quot;</span>+(a+b));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPRequestMapping(&quot;/remove&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,<span class="meta">@GPRequestParam(&quot;a&quot;)</span>Integer a,<span class="meta">@GPRequestParam(&quot;b&quot;)</span> Integer b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GPService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> <span class="keyword">implements</span> <span class="title">IDemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my name is &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h4><p>思路：首先我们要实现SpringMVC，思考下需要什么组件，第一肯定是IOC容器，暂时可以使用Map来代替。还有就是能通过url来找controller的这么一个路由器，我们也可以用一个Map来存。上面的注解是标记文件的，我们需要扫描这部分标记有注解的文件，我们需要利用反射初始化相关类的实例，放到Map中，并且我们还要实现属性注入功能。</p><p>初始化中我们需要做以下工作：</p><ul><li>扫描配置文件</li><li>通过项目路径将注解相关的类，通过反射实例化</li><li>实现类中的属性注入功能</li><li>实现url与handler的映射，也即路由。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; mapping = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doDispatch(req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;500 error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求url</span></span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line">        String contextPath = req.getContextPath();</span><br><span class="line">        url = url.replace(contextPath, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;/+&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.mapping.containsKey(url)) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;404....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Method method = (Method) <span class="keyword">this</span>.mapping.get(url);</span><br><span class="line">        Map&lt;String, String[]&gt; params = req.getParameterMap();</span><br><span class="line">        method.invoke(<span class="keyword">this</span>.mapping.get(method.getDeclaringClass().getName()), <span class="keyword">new</span> Object[]&#123;req, resp, params.get(<span class="string">&quot;name&quot;</span>)[<span class="number">0</span>]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//简易版本实现全部在一个方法中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties configContext = <span class="keyword">new</span> Properties();</span><br><span class="line">            is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(config.getInitParameter(<span class="string">&quot;contextConfigLocation&quot;</span>)); </span><br><span class="line">          <span class="comment">//读取配置文件</span></span><br><span class="line">            configContext.load(is);</span><br><span class="line">            String scanPackage = configContext.getProperty(<span class="string">&quot;scanPackage&quot;</span>);</span><br><span class="line">            <span class="comment">//扫描配置路径下的类</span></span><br><span class="line">            doScanner(scanPackage);</span><br><span class="line">          <span class="comment">//实例化标有注解的类</span></span><br><span class="line">            <span class="keyword">for</span> (String className : mapping.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!className.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">                    mapping.put(className, clazz.newInstance());</span><br><span class="line">                    String baseUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (clazz.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">                        GPRequestMapping requestMapping = clazz.getAnnotation(GPRequestMapping.class);</span><br><span class="line">                        baseUrl = requestMapping.value();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Method[] methods = clazz.getMethods();</span><br><span class="line">                    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!method.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        GPRequestMapping requestMapping = method.getAnnotation(GPRequestMapping.class);</span><br><span class="line">                        String url = (baseUrl + <span class="string">&quot;/&quot;</span> + requestMapping.value()).replaceAll(<span class="string">&quot;/+&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                        mapping.put(url, method);</span><br><span class="line">                        System.out.println(<span class="string">&quot;Mapped &quot;</span> + url + <span class="string">&quot;,&quot;</span> + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isAnnotationPresent(GPService.class)) &#123;</span><br><span class="line">                    GPService service = clazz.getAnnotation(GPService.class);</span><br><span class="line">                    String beanName = service.value();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                        beanName = clazz.getName();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Object instance = clazz.newInstance();</span><br><span class="line">                    mapping.put(beanName, instance);</span><br><span class="line">                    <span class="keyword">for</span> (Class&lt;?&gt; i : clazz.getInterfaces()) &#123;</span><br><span class="line">                        mapping.put(i.getName(), instance);</span><br><span class="line">                        System.out.println(i.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行类的属性注入</span></span><br><span class="line">            <span class="keyword">for</span> (Object object : mapping.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Class clazz = object.getClass();</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">                    Field[] fileds = clazz.getDeclaredFields();</span><br><span class="line">                    <span class="keyword">for</span> (Field field : fileds) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!field.isAnnotationPresent(GPAutowired.class)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        GPAutowired autowired = field.getAnnotation(GPAutowired.class);</span><br><span class="line">                        String beanName = autowired.value();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                            beanName = field.getType().getName();</span><br><span class="line">                        &#125;</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">//对象的属性设置为value</span></span><br><span class="line">                        field.set(mapping.get(clazz.getName()), mapping.get(beanName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;GP mvc init...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//扫描所有的类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doScanner</span><span class="params">(String scanPackage)</span> </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;/&quot;</span> + scanPackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>));</span><br><span class="line">        File classDir = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">        <span class="keyword">for</span> (File file : classDir.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                doScanner(scanPackage + <span class="string">&quot;.&quot;</span> + file.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!file.getName().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String clazzName = (scanPackage + <span class="string">&quot;.&quot;</span> + file.getName().replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                mapping.put(clazzName, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-0-MVC"><a href="#2-0-MVC" class="headerlink" title="2.0 MVC"></a>2.0 MVC</h3><p>1.0版本将所有的代码逻辑都写在init方法内，我们需要将相关的步骤抽取出来，进行优化</p><h4 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">    doLoadConfig(config.getInitParameter(<span class="string">&quot;contextConfigLocation&quot;</span>));</span><br><span class="line"><span class="comment">//扫描类</span></span><br><span class="line">    doScanner(contextConfig.getProperty(<span class="string">&quot;scanPackage&quot;</span>));</span><br><span class="line"><span class="comment">//反射实例化类</span></span><br><span class="line">    doInstance();</span><br><span class="line"><span class="comment">//注入</span></span><br><span class="line">    doAutowired();</span><br><span class="line"><span class="comment">//初始化url与方法映射关系</span></span><br><span class="line">    initHandlerMapping();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;GP mvc init...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doLoadConfig方法"><a href="#doLoadConfig方法" class="headerlink" title="doLoadConfig方法"></a>doLoadConfig方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoadConfig</span><span class="params">(String contextConfigLocation)</span> </span>&#123;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(contextConfigLocation);</span><br><span class="line">        contextConfig.load(is);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != is) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doScanner方法"><a href="#doScanner方法" class="headerlink" title="doScanner方法"></a>doScanner方法</h4><p>递归扫描所有类，将扫描到的类到放到List中，后面需要进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doScanner</span><span class="params">(String scanPackage)</span> </span>&#123;</span><br><span class="line">    URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;/&quot;</span> + scanPackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>));</span><br><span class="line">    File classDir = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">    <span class="keyword">for</span> (File file : classDir.listFiles()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            doScanner(scanPackage + <span class="string">&quot;.&quot;</span> + file.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.getName().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String clazzName = (scanPackage + <span class="string">&quot;.&quot;</span> + file.getName().replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            classNames.add(clazzName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doInstance方法"><a href="#doInstance方法" class="headerlink" title="doInstance方法"></a>doInstance方法</h4><p>实例化Bean，模拟将实例化的Bean放进IOC中，我们用一个Map来代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (classNames.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String className : classNames) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">                Object instance = clazz.newInstance();</span><br><span class="line">                String beanName = toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                ioc.put(beanName, instance);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isAnnotationPresent(GPService.class)) &#123;</span><br><span class="line">                GPService service = clazz.getAnnotation(GPService.class);</span><br><span class="line">                String beanName = service.value();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                    beanName = toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Object instance = clazz.newInstance();</span><br><span class="line">                ioc.put(beanName, instance);</span><br><span class="line">                <span class="keyword">for</span> (Class&lt;?&gt; i : clazz.getInterfaces()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ioc.containsKey(i.getName())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;the &quot;</span> + i.getName() + <span class="string">&quot; is exists&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(i.getName(), instance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doAutowired方法进行注入"><a href="#doAutowired方法进行注入" class="headerlink" title="doAutowired方法进行注入"></a>doAutowired方法进行注入</h4><p>这一步我们将容器内的类取出来，通过反射将属性给拿到，通过扫描注解，再从容器中拿到相关的Bean然后注入到当前类的属性中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ioc.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet()) &#123;</span><br><span class="line">        <span class="comment">//取出所有的属性</span></span><br><span class="line">        Field[] fields = entry.getValue().getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!field.isAnnotationPresent(GPAutowired.class)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            GPAutowired autowired = field.getAnnotation(GPAutowired.class);</span><br><span class="line">            String beanName = autowired.value().trim();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                beanName = field.getType().getName();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field.set(entry.getValue(), ioc.get(beanName));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initHandlerMapping方法"><a href="#initHandlerMapping方法" class="headerlink" title="initHandlerMapping方法"></a>initHandlerMapping方法</h4><p>这一步我们将所有Controller的方法拿到，并且拿到对应的url相对路径，并且将url与处理方法映射给保存起来，在请求路由的时候就根据url来找到相应的方法，通过反射执行对应方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ioc.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet()) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = entry.getValue().getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String baseUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">            GPRequestMapping gpRequestMapping = clazz.getAnnotation(GPRequestMapping.class);</span><br><span class="line">            baseUrl = gpRequestMapping.value();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : clazz.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!method.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GPRequestMapping gpRequestMapping = method.getAnnotation(GPRequestMapping.class);</span><br><span class="line"></span><br><span class="line">            String url = (<span class="string">&quot;/&quot;</span> + baseUrl + <span class="string">&quot;/&quot;</span> + gpRequestMapping.value()).replaceAll(<span class="string">&quot;/+&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">            handlerMapping.put(url, method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doDispatch路由逻辑"><a href="#doDispatch路由逻辑" class="headerlink" title="doDispatch路由逻辑"></a>doDispatch路由逻辑</h4><p>请求路由逻辑，思路是这样的，拿到请求url，通过url找到初始化的method，这时候就有了目标类的执行方法。接下来就是填充请求参数，填充完后执行method.invoke方法执行目标类的方法，完成请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    String url = req.getRequestURI();</span><br><span class="line">    String contextPath = req.getContextPath();</span><br><span class="line">    url = url.replace(contextPath, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;//+&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.handlerMapping.containsKey(url)) &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;404....!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//拿到url对应的controller请求方法</span></span><br><span class="line">    Method method = (Method) <span class="keyword">this</span>.handlerMapping.get(url);</span><br><span class="line">    <span class="comment">//请求传进来的实参</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">    <span class="comment">//取到形参类型</span></span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line"><span class="comment">//实参数组初始化</span></span><br><span class="line">    Object[] paramValues = <span class="keyword">new</span> Object[parameterTypes.length];</span><br><span class="line"><span class="comment">//这里只处理String类型</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">        Class paramterType = parameterTypes[i];</span><br><span class="line">        <span class="keyword">if</span> (paramterType == HttpServletRequest.class) &#123;</span><br><span class="line">            paramValues[i] = req;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramterType == HttpServletResponse.class) &#123;</span><br><span class="line">            paramValues[i] = resp;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramterType == String.class) &#123;</span><br><span class="line">            Annotation[][] pa = method.getParameterAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pa.length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Annotation a : pa[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a <span class="keyword">instanceof</span> GPRequestParam) &#123;</span><br><span class="line">                        String paramName = ((GPRequestParam) a).value();</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(paramName.trim())) &#123;</span><br><span class="line">                            String value = Arrays.toString(parameterMap.get(paramName)).replaceAll(<span class="string">&quot;\\[|\\]&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;\\s&quot;</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                            paramValues[i] = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String beanName = toLowerFirstCase(method.getDeclaringClass().getSimpleName());</span><br><span class="line">    method.invoke(<span class="keyword">this</span>.ioc.get(beanName), paramValues);</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-0-MVC"><a href="#3-0-MVC" class="headerlink" title="3.0 MVC"></a>3.0 MVC</h3><p>待更</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> Spring </tag>
            
            <tag> 从零开始写框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新入书单</title>
      <link href="/2020/09/25/%E6%96%B0%E5%85%A5%E4%B9%A6%E5%8D%95/"/>
      <url>/2020/09/25/%E6%96%B0%E5%85%A5%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<ul><li>Google工作法</li><li>图解黄帝内经</li><li>我们内心的冲突</li><li>我们时代的神经症人格</li><li>Spring5核心原理与30个类手写实战</li><li>零基础学炒股从入门到精通</li></ul><hr><p><strong>待购入</strong></p><ul><li>价值：我对投资的思考</li><li>墨菲定律</li><li>李大霄投资战略</li><li>聪明的投资者</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GC垃圾收集器</title>
      <link href="/2020/09/15/GC%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
      <url>/2020/09/15/GC%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="GC垃圾收集"><a href="#GC垃圾收集" class="headerlink" title="GC垃圾收集"></a>GC垃圾收集</h1><p>JVM针对堆中的对象，启用守护线程进行无用对象的回收，防止JVM的内存溢出造成程序不可用。</p><h2 id="判断可否回收"><a href="#判断可否回收" class="headerlink" title="判断可否回收"></a>判断可否回收</h2><ul><li><p>引用计数法</p><p>简单来讲就是判断对象是否存在引用，没有则认为可回收，但若存在循环引用的情况，就无法判断导致内存泄漏</p></li><li><p>可达性分析</p><p>通过GC Roots对象作为起点进行搜索，如果一个对象与GC Roots之前没有可达路径，则认为该对象不可达，但还需要经过两次标记才能进行回收</p></li></ul><h2 id="强、软、弱、虚引用"><a href="#强、软、弱、虚引用" class="headerlink" title="强、软、弱、虚引用"></a>强、软、弱、虚引用</h2><p>强引用：存在引用的对象就是强引用对象，gc即使溢出都不会收集这类对象</p><p>软引用：SoftReference对象，如果gc快溢出了，会收集这类对象</p><p>弱引用：WeakReference对象，不管gc空间是否足够都会回收</p><p>虚引用：主要用来跟踪垃圾回收器的活动</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><ul><li>复制算法<ul><li>对内存分区，创建放一边，回收时存活的复制到另一边，然后对原来的空间直接清除。缺点是空间利用率不高，改进可按一定比例划分空间</li></ul></li><li>标记清除算法<ul><li>垃圾的对象标记起来，然后清除垃圾对象。缺点是容易产生内存碎片，导致大对象创建时，发生多次gc</li></ul></li><li>标记整理算法<ul><li>复制算法与标记清除算法的折中策略，标记垃圾对象，将存活的对象复制到边端，然后清除垃圾对象。</li></ul></li></ul><h2 id="商业化虚拟机的方式"><a href="#商业化虚拟机的方式" class="headerlink" title="商业化虚拟机的方式"></a>商业化虚拟机的方式</h2><p>采用分代收集算法，也即不同的年代采用不同的回收策略</p><p>新生代采用复制算法，按照一定的比例默认是8:1:1，分为Eden、From、To三个区域</p><ul><li>Minor GC的过程：开始Eden和From都是空的，新建对象会创建在Eden，一次minor gc时，会把所有存活的对象放到From，清除Eden，下一次gc，Eden和From的存活对象移动到To，清空Eden和From，重复这个过程，当然在过程中会判断对象的年龄阈值，当达到一定的程度会移动到老年代</li></ul><p>老年代采用标记整理算法</p><ul><li>Full GC的过程：主要针对老年代的对象进行回收    </li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><ul><li>单线程，需暂停其他工作线程，复制算法，Client模式下默认新生代收集器</li></ul><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><ul><li>多线程版本的Serial，同样需要暂停工作线程，Server模式下新生代收集器</li></ul><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><ul><li>关注吞吐量，即用户代码执行时间/(用户代码+回收时)，多线程。复制算法</li></ul><h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h3><ul><li>单线程，采用标记整理算法</li></ul><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3><ul><li>多线程，标记整理算法，Parallel Scavenge的年老代版本</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><ul><li>多线程标记清除算法，目标是获取最短垃圾回收停顿时间。优点在于并发收集、低停顿<ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ul></li></ul><h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2><p>相比CMS，改进</p><ol><li>基于标记整理算法，不产生内存碎片</li><li>可以精确控制停顿时间</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>放量下跌</title>
      <link href="/2020/09/10/%E6%94%BE%E9%87%8F%E4%B8%8B%E8%B7%8C/"/>
      <url>/2020/09/10/%E6%94%BE%E9%87%8F%E4%B8%8B%E8%B7%8C/</url>
      
        <content type="html"><![CDATA[<p>　　今日的市场放量下跌，现在持有500股21.95的招商证券下跌0.5，500股25.50的三安光电，没有精确拿到当天的低价，行情全日震荡幅度大，拿到这个筹码不算最好，但也算不错，留有30%的仓位等补仓用。前日受美股影响A股也下跌，今天突破了3260点下挫到3234附近，目前持有的基金收益已经亏损了，科技股受影响严重，也是因为之前重仓科技基金，只能说看错了入场点，但问题不大，中长期还是看涨的，毕竟大环境越差，股市肯定要逆行，年初放出的货币怎么也要流向股市的，只是看上层怎么控场了，既不想急速拉升把场子弄臭，也不想资金跑掉砸盘，这时候就看各个大资金大机构怎么做好这个工作了。平稳的一个点位一个点位往上调整，这也是符合大众对股票市场建立信心的。虽然手上拿点小钱在股票市场实践，但对于股票市场的风险，参与之后是深有体会，指数区间对于个股某个区间的价位十分难以把握，所以对于散户来讲，要拿到好的价位入场很难，在这种震荡市中，小资金用来走短线获利是十分有优势的，但同时一不小心就被套在高点了，所以散户只能说跟着趋势走，把握大趋势。从长远来看，手持蓝筹股是最稳的选择，走价值投资的路子。路漫漫其修远兮，学点理财技能，给出自己的判断观点，对于世界，经济趋势的把握十分有益，知行合一。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 投资 </tag>
            
            <tag> 股票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛市?</title>
      <link href="/2020/08/17/%E7%89%9B%E5%B8%82/"/>
      <url>/2020/08/17/%E7%89%9B%E5%B8%82/</url>
      
        <content type="html"><![CDATA[<p>　　8.17今天的股市红红火火，浙商证券在上周的震荡盘中，亏了6、7个点，后续也没有补仓，虽然看多，600股成本16.44，上周收盘15.50，一块钱的亏损，受可转债转股的影响，担心股价受影响，因此打算换股，看好招商证券20块的价位，但最终没有买入。今天证券板块拉升，招商当了把领头羊，涨停，虽然上周就看出来机构在打压股价，不断地低吸拉成本，可惜了，一波短线没有买入。今天的大盘站到3400以上，拉升过大，后面的量能支撑表示有所怀疑，k线站到了5日线以上，明天之后也会有所回调，今天将手上的浙商16.60清仓了，防止风险，没什么盈利，三安光电25.78的300股，今天到达29.50，比较满意，手上的持仓也没有满上。今天的行情就是撬动金融板块，拉升指数，个股普遍没有大涨，二八行情。后续应该是大盘的板块轮动，今天加仓了手上的科技基金，科技基金之前高拉减仓了，震荡行情中没有什么亏损，提前埋伏科技板，等大盘资金轮动的时候能吃点肉，顺应国家的慢牛行情，小股民跟着赚点小钱，还是要对股市有所敬畏，看好中国的资本市场。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 投资 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>茶多酚的功效</title>
      <link href="/2020/08/15/%E8%8C%B6%E5%A4%9A%E9%85%9A%E7%9A%84%E5%8A%9F%E6%95%88/"/>
      <url>/2020/08/15/%E8%8C%B6%E5%A4%9A%E9%85%9A%E7%9A%84%E5%8A%9F%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h3 id="茶多酚"><a href="#茶多酚" class="headerlink" title="茶多酚"></a>茶多酚</h3><p>　　英德特产绿茶，号称绿茶中的茶王，期间特别驱车前往本地试茶，相比红茶的烈性，绿茶的茶性比较收敛，就茶感上比较中性，对中枢神经的兴奋作用没有那么大，有促排，消肿的功效 ，个人本身有鼻炎，鼻甲长期处于肿胀的状态，喝绿茶发现鼻甲的肿胀有减缓，脸上的油脂减少，查阅相关资料，发现绿茶中的茶多酚含量相比其他茶种含量较高，因为绿茶的发酵程度低，故而茶多酚含量高。茶多酚对人体有多重功效，特别是一些慢性疾病有一定的疗效。</p><h4 id="功效"><a href="#功效" class="headerlink" title="功效"></a>功效</h4><ul><li>抗氧化</li><li>抗炎，鼻炎患者能够有效消肿，对鼻腔的炎症有一定的抑制作用</li><li>抗高血脂</li><li>延缓衰老</li><li>防水肿、抗过敏</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建仓</title>
      <link href="/2020/08/07/%E5%BB%BA%E4%BB%93/"/>
      <url>/2020/08/07/%E5%BB%BA%E4%BB%93/</url>
      
        <content type="html"><![CDATA[<p>　　8.4入场建仓，300股的浙商证券，成本16.65，500股的三安光电，成本26.14。基本是买在跌位，8.6涨了一块钱，在8.7又猛跌猛拉，基本上没有多大的盈利，后续看好，持股不动。</p><p>　　8.11，今天尾盘跳水，将这段时间的收益吐回去了，尾盘还加仓了浙商证券，拉低成本到16.44，虽然大盘整体下挫，但是聪明的钱，北上资金净流入60亿，说明在买筹，还是看好后市，持股不动。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 投资 </tag>
            
            <tag> 股票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出索引</title>
      <link href="/2020/07/16/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/07/16/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><blockquote><p>索引是数据库中为了提高数据查询速度而使用的一种数据结构，以一种结构化的存储方式来索引相关数据，达到快速查询的目的。通俗的讲类似书的目录，通过目录来查询数据效率会有极大提升。</p></blockquote><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p> 索引常用的数据结构：</p><ul><li>哈希表</li><li>有序数组</li><li>搜索树</li></ul><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>　　适用于等值查询的场景，key通过哈希函数得到一个确定的位置，上面放对应的value。使用链表解决哈希冲突。不适合范围查询，因为需要全表扫描，无法利用索引完成排序，不支持多列联合索引的最左匹配规则，如果有大量重复键值的情况会产生哈希碰撞问题。</p><h4 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h4><p>　　只适用于静态搜索引擎，索引列的数据按照规则排序，查找数据可以直接二分查找，时间复杂度是O(log(N))支持范围查询。缺点是更新数据比较麻烦，需要移动记录。</p><h4 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a>搜索树</h4><p>　　大部分数据库引擎采用这种数据结构，读写的性能优点适配磁盘的访问模式。搜索树的特点是左儿子节点的数据小于父节点，父节点小于右儿子节点，每个节点的多个儿子从左到右递增，查询的时间复杂度是O(log(N))。</p><h3 id="InnoDB的索引模型"><a href="#InnoDB的索引模型" class="headerlink" title="InnoDB的索引模型"></a>InnoDB的索引模型</h3><p>采用B+树，是一种多路平衡查询树</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>主键索引，也叫聚簇索引，叶子节点存整行数据。</p></li><li><p>非主键索引，叶子节点存放的是主键的值。</p></li><li><p>覆盖索引，索引上已经覆盖了查询的需求，无需回表。</p></li></ul><blockquote><p>区别：通过非主键索引查找非主键列的话，需要再用主键去主键索引查找相应的数据，这个过程叫回表，也就是多扫描一次索引树。</p></blockquote><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>　　B+树需要维护索引的有序，因此插入新值时需要维护，如果所在的数据页满了，则要申请一个新的数据页，然后将部分数据迁移过去，这个过程称为页分裂，反过来则称为页合并。</p><p>　　采用自增主键插入数据时，由于主键是递增的，因此索引新增都是以追加的方式，不会引起页分裂，如果采用业务逻辑字段做主键，不容易保证有序插入，写数据成本会很高。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>　　索引的搜索匹配按最左前缀匹配，不管是联合索引还是字符串索引的最左M个字符，在构造索引树时，已经按照索引的定义去进行了排序，比如联合索引(a,b)，在存储上也当成一个字节数组，排序也是按字节去比较排序。这也就是为什么会是最左前缀原则生效的原因。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">联合索引（a,b）</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以覆盖到a</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> a=<span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖到a，覆盖不到b，因为中间用了%通配符</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> a=<span class="string">&#x27;cc%&#x27;</span> <span class="keyword">and</span> b=<span class="string">&#x27;dd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖到a和b</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> a=<span class="string">&#x27;cc&#x27;</span>  <span class="keyword">and</span> b=<span class="string">&#x27;dd&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>索引下推</strong></p><blockquote><p>Mysql5.6之后在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。比如联合索引(a,b)，根据a,b条件先筛选出符合条件的数据再进行回表。</p></blockquote><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>模糊匹配、类型隐转、最左匹配</p><ul><li>%导致没有命中</li><li>参数类型跟sql查询的类型不一致，使用了函数</li><li>比如说组合索引，由a、b、c组成，查询c没法命中</li></ul><h3 id="如何排查慢查询"><a href="#如何排查慢查询" class="headerlink" title="如何排查慢查询"></a>如何排查慢查询</h3><p>根据explain执行计划，主要关注两个指标，一个是type，是全表还是范围查询，看key是否有命中索引，看rows，返回的行数</p><p>工作例子：一个报表查询，数据量100w左右，sql用到了聚合函数，临时表，查询速度到了几秒，通过explain分析，统计部分临时表的数据量很大，实际最后的结果集数据rows仅少量，索引也没有命中，走的是全表扫描，原表的日期用的是char来存，sql语句采用to_date()函数与传入的日期参数比较，导致索引失效，去除函数，并且对聚合查询做提前的条件过滤</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2020/07/14/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/14/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>　　定义对象的一种一对多的依赖关系，当一个对象的状态发生改变，所有依赖它的对象都得到通知并自动更新。</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>　　当一个对象状态发生变化时，依赖的对象需要得到通知时使用。</p><a id="more"></a><p><img src="/assets/blog_img/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png">　　</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="被观察对象"><a href="#被观察对象" class="headerlink" title="被观察对象"></a>被观察对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">   <span class="comment">//目标类保持所有观察者的引用，才能通知到</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers </span><br><span class="line">      = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//改变状态时，通知所有观察者</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">      observers.add(observer);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="观察者抽象类"><a href="#观察者抽象类" class="headerlink" title="观察者抽象类"></a>观察者抽象类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> Subject subject;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实际观察者实现类"><a href="#实际观察者实现类" class="headerlink" title="实际观察者实现类"></a>实际观察者实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BinaryObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println( <span class="string">&quot;Binary String: &quot;</span> </span><br><span class="line">      + Integer.toBinaryString( subject.getState() ) ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OctalObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">OctalObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println( <span class="string">&quot;Octal String: &quot;</span> </span><br><span class="line">     + Integer.toOctalString( subject.getState() ) ); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverPatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> OctalObserver(subject);</span><br><span class="line">      <span class="keyword">new</span> BinaryObserver(subject);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);   </span><br><span class="line">      subject.setState(<span class="number">15</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);  </span><br><span class="line">      subject.setState(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入场梭哈</title>
      <link href="/2020/07/07/%E5%85%A5%E5%9C%BA%E6%A2%AD%E5%93%88/"/>
      <url>/2020/07/07/%E5%85%A5%E5%9C%BA%E6%A2%AD%E5%93%88/</url>
      
        <content type="html"><![CDATA[<p>　　今天是7.7号，距离昨天开始宣传牛市启动仅一天之隔，作为一条韭菜，进场梭哈300股的招商证券，入手价是29.6，收市价是28.4，额……可以说进场就没了300多块钱，个人预期这波外资短时间不会那么快退场，因为资金吸水的作用还未曾达到，现在的资金来源是外资+机构在烘托，一波氛围烘托出来势必需要有人顶上，没错就是像楼主这样的韭菜，我的看法是现在还在中期，没到下跳的时候，如果我是外资，A股的股价这么低，加上长期的熊市周期，这波疫情下发的货币，总得有地方释放，没错，就是来圈释放的rmb，几天时间靠外资和机构拉到3300多点，剩下的就是要等散户进场，抬到3500以上，然后下跳。我个人预期股价到32块就清掉，不贪心，没错典型的韭菜思维，现在市场的空军是大于多军的，很多人在这波上涨中，吸取了年前的教训不恋战，及早止盈，离场，但我的看法还是那句话，增量的资金在对冲这些放量，大盘是下不来的，所以会造成及早下车的人在揪心少了几个点，其实都是没意义的，市场的变化太快没人能判断准，只要还在赌盘上，就没有赢家，我一直是这个思维，有人的地方就会一直有市场，有市场就会一直有买卖，资产总是放在那里，就看是否有交易的价值了，这些逃跑的资金我猜测它们的心理变化是会再度杀回来，而且会无比地猛烈，好了就看明天打脸了。</p><p>　　2020.7.8</p><p>　　今天最高跳到31块，股票公告说要停牌10天，10天后行情不知道啥样子，惊心动魄地在29.8抛了，净赚42块，第一次买股票，发现太刺激了，一上一下，几百块对于我这些小韭菜真觉得不是一般人能玩得起的，从7.1到现在，基金果断买了军工、消费、科技，刚好持有7天，而且是天天2-3个点的盈利，军工提前看好买了2000，才一周就17%的收益就很可怕的收益，从年前的经验来看，真的会来波跳水将这些收益给吸掉，现在的拉升是90°上升，这完全就是靠大资金拉上去的，到底场外资金的看客有多少不好说，看空的人都在等跳水进场收尸，如果市场完全无视呢，硬生生拉到3500点以上，那么也更加不敢进场了，营造出你不信我偏上的一种资本态度，还是要敬畏市场，适度止盈，还是那句话一天还在赌盘上，谁赢谁输还不好说。</p><p>　　2020.7.10</p><p>　　从6.30到今天，短短10天，2w的基金持仓，收益净赚2000，今天兑现收益，这收益率在平时可能要几个月才能达到，生生体会到资本的力量，只有兑现才真的是袋袋平安，今天的行情小幅度下跌，北向资金负流入了，昨晚美股大调整，说明这些天外资是在避险才把资金疯狂买入A股市场，现在已经是净流出了，个人看法是A股这波牛市行情快到点了，今天就兑现，提前避险，毕竟这些天的收益已经很满足了，留下一只长期看好的科技基金，持半仓，即使跌也跌不了多少，毕竟长期看好，后面跌下来再慢慢定投，相信时间的力量吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 投资 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录</title>
      <link href="/2020/07/06/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2020/07/06/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><blockquote><p>单点登录英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</p></blockquote><p><strong>概览</strong>　　</p><p>　　客户端会访问三个系统中的一个，当初次登录Node2时，首先去sso验证登录，之后访问Node1、Node3都无须再次登录。</p><p><img src="/assets/blog_img/sso.png"></p><p><strong>SSO登录流程</strong></p><ul><li>用户访问Node1，判断未登录。</li><li>跳转到CAS server，弹出登录页。</li><li>填写用户密码登录成功，session写入CAS server，将server ticket返回给客户端，客户端拿到ST去访问Node1。</li><li>Node1拿ST去CAS server验证有效性。</li><li>通过后Node1写入session并设置Cookie。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2020/07/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/06/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><p>　　类的行为在运行时可以更改，根据策略选择不同的执行算法。</p><a id="more"></a><p><strong>什么时候使用</strong></p><p>　　程序需要根据某个条件选择不同的执行方式时，一般会使用if/else分支逻辑，但不利于维护，如果只是执行方式不同，可以使用策略模式。</p><p><strong>特点</strong></p><p>　　避免多重判断，扩展性好。</p><p><img src="/assets/blog_img/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png"></p><p><strong>代码</strong></p><p><strong>策略接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>策略执行子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> n+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> n-<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mul</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> n/<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> strategy.exec(n);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Add());    </span><br><span class="line">      context.exec(<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Sub());      </span><br><span class="line">      context.exec(<span class="number">10</span>);</span><br><span class="line">     </span><br><span class="line">      context = <span class="keyword">new</span> Context(<span class="keyword">new</span> Mul());    </span><br><span class="line">      context.exec(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis分布式锁实现秒杀业务</title>
      <link href="/2020/07/02/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80%E4%B8%9A%E5%8A%A1/"/>
      <url>/2020/07/02/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0%E7%A7%92%E6%9D%80%E4%B8%9A%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>　　曾经做过一个类似秒杀系统的模块，系统采用分布式架构，场景是这样子的，用户提了故障单后，有跟踪故障单的需求，衍生了催单，用户会通过多个客户端去提交催单，用户催单有专人去跟踪，有一定的时效性，需要及时处理反馈。</p><a id="more"></a><p>业务规则</p><ul><li>同一个工单号一个用户15分钟内只能提一次催单</li><li>同一个工单号不同用户15分钟内只产生一条催单，新增的用户则追加子记录</li></ul><p><strong>问题</strong></p><ol><li>需要考虑并发操作</li><li>保证分布式环境下业务的正确处理</li><li>考虑大流量请求下服务处理压力</li></ol><p>　　虽然系统是运营商的内部系统，tob的用户量并不会很大，但站在技术角度，需要考虑如果toc要怎么满足的问题。首先处理并发问题，因为多个用户对于同一个工单的业务操作是竞争的，因此需要对同一个工单号上锁，其次要满足高可用，因此在多服务运行环境下，需要引入分布式锁，查了下分布式锁的解决方案可以使用redis或者数据库锁（通过数据库插入记录的唯一性保证），这里使用redis分布式锁来解决，且针对用户的重复查询，使用redis缓存来降低DB的压力，这样15分钟内用户的多次查询都能命中缓存，以此解决问题3。</p><p><strong>分布式锁的方案及原理</strong></p><ul><li><p>数据库加锁</p><p>数据库锁主要是利用行记录的唯一性来保护资源，插入失败即继续重试，直至获取到锁。需要自己考虑锁超时，事务等。</p></li><li><p>Redis锁</p><p>利用sexNx方法的原子特性实现，多个进程竞争set值，只有一个进程set成功则为获取锁成功，需要设置锁的过期时间防止宕机，redis2.8以前需要使用lua脚本来保证setNx与过期时间设置保证原子操作，2.8以后能支持nx和ex是同一操作。可以使用redission客户端，封装了锁的实现。</p></li><li><p>zookeeper锁</p><p>使用Curator框架，其封装了zookeeper的API，提供分布式锁的实现。原理是zookeeper有一个临时有序节点的概念，在某个目录加锁会生成一个节点，后来的客户端会有序生成排列，然后先到的客户端会检测自己是不是第一个节点，是的话就加锁成功，否则寻找当前节点的上一个节点，并且添加监听器。当上一个节点操作完毕释放锁会删除自己的节点，此时监听到删除的下一个节点会尝试获取。这里不用保证超时，因为zookeeper能够检测客户端的健康状态，当失活后能够删除当前节点，这也就是zookeeper锁的原理</p></li></ul><p><img src="/assets/blog_img/%E7%94%A8%E6%88%B7%E5%B9%B6%E5%8F%91%E5%82%AC%E5%8D%95%E6%B5%81%E7%A8%8B.png" alt="流程图"></p><p><strong>伪代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitCallOrder</span><span class="params">(String orderNum, String userName)</span></span>&#123;</span><br><span class="line">  String cacheUserOrderNum;</span><br><span class="line">  <span class="comment">//缓存取是否催单，key以用户+工单号</span></span><br><span class="line">  cacheUserOrderNum=template.opsForValue().get(userName+<span class="string">&quot;:&quot;</span>+orderNum);</span><br><span class="line">  <span class="keyword">if</span>(Strings.isNotBlank(cacheUserOrderNum))&#123;</span><br><span class="line"><span class="comment">//用户已催单</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//加锁，获取不到一直阻塞</span></span><br><span class="line">  <span class="keyword">while</span>(!redisLockHelper.lock(orderNum,String.valueOf(time)))&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询是否有15分钟内的催单</span></span><br><span class="line">  Order dbOrder=orderMapper.existLatestCallOrder(orderNum);</span><br><span class="line">  <span class="keyword">if</span>(dbOrder==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//没有则新增催单</span></span><br><span class="line">    orderMapper.insert(order);</span><br><span class="line">    <span class="comment">//新增催单用户子记录</span></span><br><span class="line">    subOrderMapper.insert(subOrder);</span><br><span class="line">    <span class="comment">//缓存数据</span></span><br><span class="line">    template.opsForValue().set(userName+<span class="string">&quot;:&quot;</span>+orderNum,<span class="string">&quot;1&quot;</span>, TimeUnit.MINUTES.toMinutes(<span class="number">15</span>));</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//用户15分钟内是否催过单</span></span><br><span class="line">    <span class="keyword">if</span>(subOrderMapper.existLatestSubCallOrder(orderNum,userName))&#123;</span><br><span class="line">      <span class="comment">//缓存数据</span></span><br><span class="line">      template.opsForValue().set(userName+<span class="string">&quot;:&quot;</span>+orderNum,<span class="string">&quot;1&quot;</span>, TimeUnit.MINUTES.toMinutes(<span class="number">15</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//新增催单用户子记录</span></span><br><span class="line">      subOrderMapper.insert(subOrder);</span><br><span class="line">   <span class="comment">//更新催单主记录最近催单时间</span></span><br><span class="line">      orderMapper.updateByPrimaryKeySelective(order);</span><br><span class="line">      <span class="comment">//缓存数据</span></span><br><span class="line">      template.opsForValue().set(userName+<span class="string">&quot;:&quot;</span>+orderNum,<span class="string">&quot;1&quot;</span>, TimeUnit.MINUTES.toMinutes(<span class="number">15</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//释放锁</span></span><br><span class="line">  redisLockHelper.unlock(orderNum,String.valueOf(time));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Redis分布式锁工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockHelper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetId   targetId - 唯一标志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeStamp  当前时间+超时时间 也就是时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String targetId,String timeStamp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stringRedisTemplate.opsForValue().setIfAbsent(targetId,timeStamp))&#123;</span><br><span class="line">            <span class="comment">// 对应setnx命令，可以成功设置,也就是key不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断锁超时 - 防止原来的操作异常，没有运行解锁操作  防止死锁</span></span><br><span class="line">        String currentLock = stringRedisTemplate.opsForValue().get(targetId);</span><br><span class="line">        <span class="comment">// 如果锁过期 currentLock不为空且小于当前时间</span></span><br><span class="line">        <span class="keyword">if</span>(!Strings.isNullOrEmpty(currentLock) &amp;&amp; Long.parseLong(currentLock) &lt; System.currentTimeMillis())&#123;</span><br><span class="line">            <span class="comment">// 获取上一个锁的时间value 对应getset，如果lock存在</span></span><br><span class="line">            String preLock =stringRedisTemplate.opsForValue().getAndSet(targetId,timeStamp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 假设两个线程同时进来这里，因为key被占用了，而且锁过期了。获取的值currentLock=A(get取的旧的值肯定是一样的),两个线程的timeStamp都是B,key都是K.锁时间已经过期了。</span></span><br><span class="line">            <span class="comment">// 而这里面的getAndSet一次只会一个执行，也就是一个执行之后，上一个的timeStamp已经变成了B。只有一个线程获取的上一个值会是A，另一个线程拿到的值是B。</span></span><br><span class="line">            <span class="keyword">if</span>(!Strings.isNullOrEmpty(preLock) &amp;&amp; preLock.equals(currentLock) )&#123;</span><br><span class="line">                <span class="comment">// preLock不为空且preLock等于currentLock，也就是校验是不是上个对应的商品时间戳，也是防止并发</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeStamp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String target,String timeStamp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String currentValue = stringRedisTemplate.opsForValue().get(target);</span><br><span class="line">            <span class="keyword">if</span>(!Strings.isNullOrEmpty(currentValue) &amp;&amp; currentValue.equals(timeStamp) )&#123;</span><br><span class="line">                <span class="comment">// 删除锁状态</span></span><br><span class="line">                stringRedisTemplate.opsForValue().getOperations().delete(target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;警报！警报！警报！解锁异常&#123;&#125;&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mokitkira/order/tree/master">github源码地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/2020/07/01/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/07/01/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><blockquote><p>在一个抽象类中定义了方法的模板，子类可以按照需要重写，调用以抽象类中定义的方式执行。</p></blockquote><p><strong>什么时候使用</strong></p><p>　　有一些通用的方法时，步骤基本一样，可以将通用的步骤抽象出来，具体的实现方法留给子类去实现。</p><a id="more"></a><p><strong>特点</strong></p><p>　　封装不变部分，扩展可变部分，提取公共代码。缺点是每一个不同的实现都需要一个子类实现，子类数量庞大。</p><p><img src="/assets/blog_img/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F.png"></p><p><strong>代码</strong></p><p><strong>抽象模板类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractHouse&#123;</span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">decorate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//抽象出模板步骤，具体方法留给子类实现</span></span><br><span class="line">    decorateDoor();</span><br><span class="line">    decorateWall();</span><br><span class="line">    decorateWindow();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">abstract</span>　<span class="keyword">void</span> <span class="title">decorateDoor</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">abstract</span>　<span class="keyword">void</span> <span class="title">decorateWall</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">abstract</span>　<span class="keyword">void</span> <span class="title">decorateWindow</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubHouse</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decorateDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;装饰地板&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decorateWall</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;装饰墙面&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decorateWindow</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;装饰窗户&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    AbstractHouse house = <span class="keyword">new</span> SubHouse();</span><br><span class="line">    house.decorate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/2020/06/30/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2020/06/30/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>事务的定义</strong></p><blockquote><p>事务是数据库管理系统执行过程的一个逻辑单位，通俗地讲，一件事要么一次做完，要么不做。</p></blockquote><p><strong>事务的特性（ACID）</strong></p><ul><li><strong>原子性（Atomicity）</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li><strong>一致性（Consistency）</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。<em>一致状态</em>的含义是数据库中的数据应满足完整性约束。</li><li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li><strong>持久性（Durability）</strong>：已被提交的事务对数据库的修改应该永久保存在数据库中。</li></ul><p><strong>例子</strong></p><p>　　比如去银行存款这个事务，分为几个操作，首先查询账户余额，修改余额，然后提交，这就是一个事务。</p><a id="more"></a><p><strong>事务隔离级别</strong></p><blockquote><p>事务与事务会共同影响同一条数据，比如两个人同时操作一个账户就会引发各种问题，隔离级别决定了两个事务同时操作的作用范围。</p></blockquote><ul><li><p>读未提交</p><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">Begin</td><td align="center">Begin</td></tr><tr><td align="center"></td><td align="center">更新id=3的数据status=true</td></tr><tr><td align="center">查询id=3的数据，读到数据status=true</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">Commit</td></tr><tr><td align="center">Commit</td><td align="center"></td></tr></tbody></table></li><li><p>读已提交</p><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">Begin</td><td align="center">Begin</td></tr><tr><td align="center"></td><td align="center">更新id=3的数据status=true</td></tr><tr><td align="center">查询id=3的数据，读到数据status=false</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">Commit</td></tr><tr><td align="center">查询id=3的数据，读到数据status=true</td><td align="center"></td></tr><tr><td align="center">Commit</td><td align="center"></td></tr></tbody></table></li><li><p>可重复读</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>Begin</td><td>Begin</td></tr><tr><td></td><td>更新id=3的数据status=true</td></tr><tr><td>查询id=3的数据，读到数据status=false</td><td></td></tr><tr><td></td><td>Commit</td></tr><tr><td>查询id=3的数据，读到数据status=false</td><td></td></tr><tr><td>Commit</td><td></td></tr></tbody></table></li><li><p>串行</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>Begin</td><td>Begin</td></tr><tr><td></td><td>更新id=3的数据status=true</td></tr><tr><td>查询id=3的数据，阻塞</td><td></td></tr><tr><td></td><td>Commit</td></tr><tr><td>查询id=3的数据，读到数据status=true</td><td></td></tr><tr><td>Commit</td><td></td></tr></tbody></table></li></ul><p><strong>事务的传播行为</strong></p><blockquote><p>从代码的层面上讲，就是方法的嵌套调用过程中，方法A对其子方法B的调用过程中，对其事务的影响范围。</p></blockquote><ul><li><p>PROPAGATION_REQUIRED：支持当前事务，假设当前没有事务。就新建一个事务</p><p>方法A调用子方法B，A自动起一个事务，如果B没有起事务，自动加入到A事务中。</p></li><li><p>PROPAGATION_SUPPORTS：支持当前事务，假设当前没有事务，就以非事务方式运行</p><p>方法A调用子方法B，B会看当前有没有事务，有则加入，无则以非事务运行</p></li><li><p>PROPAGATION_MANDATORY：支持当前事务，假设当前没有事务，就抛出异常</p><p>方法A调用子方法B，B会看当前有没有事务，有则加入，无则抛异常</p></li><li><p>PROPAGATION_REQUIRES_NEW：新建事务，假设当前存在事务。把当前事务挂起</p><p>方法A调用子方法B，B会起一个新事务，B的事务提交后，A的事务才会继续运行，B的事务失败回滚，A事务还是有可能提交</p></li><li><p>PROPAGATION_NOT_SUPPORTED：以非事务方式运行操作。假设当前存在事务，就把当前事务挂起</p><p>方法A调用子方法B，A事务挂起，B以非事务运行</p></li><li><p>PROPAGATION_NEVER：以非事务方式运行，假设当前存在事务，则抛出异常</p><p>方法A调用子方法B，B发现在A的事务中，就抛出异常</p></li><li><p>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基金布局</title>
      <link href="/2020/06/30/%E5%9F%BA%E9%87%91%E5%B8%83%E5%B1%80/"/>
      <url>/2020/06/30/%E5%9F%BA%E9%87%91%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>　　上半年疫情看好的医疗板块，没有坚定持有，当时的想法是持有至六月份，判定依据是国内是最早稳定疫情的，外部环境的综合生产能力或者控制能力相对中国这种集大力办大事的处理能力肯定是完全不在一个等级上的，因此中国这个外贸型国家在一段时间内必然是医疗设备输出国，有需必有供，在此认为下半年医疗还是可以持有的。另外就是布局消费、航空、军工、科技。</p><a id="more"></a>在低净值开始针对消费，军工建仓，当前中国的地缘环境，在全球经济衰退的这个阶段，必然是背锅对象，近期的西部中印边境对峙，或者朝韩关系紧张，抑或东部台湾与日本，都是美国转移经济下行制造事端的一种潜在手段，中国势必会通过秀肌肉，加强军工产业，实战化演练来起到震慑周边国家的效果，因此军工相关的产业链会利好。至于消费或者航空，在经济下行的阶段，想将GDP20%外贸转内需，说实话，个人感受，在房价及物价飞涨的情况下，每个人或多或少都能感受到经济冲击的影响，必然会由消费走向储蓄，尽管政府的基调是通过内需来消耗掉，拉动消费，拉动经济增长，这是一个点，相对会有所增长，这是我判断的依据，但前面说了物价与房价决定了大多数人的消费心理，那么少部分消费基数在我看来是起不了大作用的，当前3%的通胀及银行如此低的利率。居民的心理必然会将钱拿出来投资，问题是钱会流向哪里？个人并不看好房产，一来是国家的定调，二来房产的泡沫没有对应的生产力与购买力，势必只是有价无市，只能是国家作为稳定市场的手段。所以我认为钱会流向股市，国内A股尚且处于低估值阶段，有很大的上升空间，这波上涨需要一个推力，我预估将会来自于外资。一个是稳定健康的市场环境，尽管政治上不待见，但对于资本家来说，资本无国界，国家也在营造一个健康的资本环境，为的也就是吸引外资，吸引国内的资本，推动股市上行，这样才能消解掉这次黑天鹅带来的危机，货币的市场流动性，社会分工的再循环，这才是重中之重。我的决策是消费航空军工开始建仓，逐步重仓医疗与科技，是成是败就看半年后回首今天写下的内容了。]]></content>
      
      
      
        <tags>
            
            <tag> 投资 </tag>
            
            <tag> 基金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝与深拷贝</title>
      <link href="/2020/06/28/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/06/28/%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>　　一般在Java中我们创建一个对象是使用new关键字来创建的，new关键字会调用类的构造方法来创建对象，那么有一些场景我们想以现成的对象为模板来复制对象，回避构造函数的过程，毕竟构造函数中或多或少会有初始化的过程，性能难免较低，这时候就可以考虑使用拷贝，copy一个对象。</p><a id="more"></a><p><strong>实例</strong></p><p>以下这个类创建对象如果使用new关键字，调用构造函数会消耗较多时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//模拟构造函数初始化需要较多的性能</span></span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>clone方法代替Person</strong></p><p>我们如果想直接复制一个对象，使用现有对象，避免多余的代码，可以使用clone方法，这个是Object的方法，默认实现会返回现有对象的拷贝，但仅仅是浅拷贝。</p><blockquote><p>浅拷贝：快速复制一个对象，底层调用的是本地方法，对于基本数据类型会直接复制到新对象，而对象类型，仅仅是将引用指向原有对象的地址空间，即是复制后的对象与复制前的对象，对象中的引用对象都是同一个对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  Vector v;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//模拟构造函数初始化需要较多的性能</span></span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">      <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">     Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Ben&quot;</span>,<span class="number">20</span>);</span><br><span class="line">     p.v=<span class="keyword">new</span> Vector();</span><br><span class="line">     Person c = (Person) p.clone();</span><br><span class="line">     log.info(p.name+<span class="string">&quot;:&quot;</span>+p.age);</span><br><span class="line">     log.info(c.name+<span class="string">&quot;:&quot;</span>+c.age);</span><br><span class="line">     log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,p==c);</span><br><span class="line">     log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,p.v==c.v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>深拷贝：在浅拷贝的基础上，如果我们想把对象的对象类型也按照新的对象的创建，即分配一块新的内存空间，则需要在clone方法中重写相应的实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneDemo</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        Vector v;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//模拟构造函数初始化需要较多的性能</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">this</span>.name=name;</span><br><span class="line">                <span class="keyword">this</span>.age=age;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">             Person t = (Person)<span class="keyword">super</span>.clone();</span><br><span class="line">             Vector vv = <span class="keyword">new</span> Vector();</span><br><span class="line">             Collections.copy(vv,t.v);</span><br><span class="line">             t.v=vv;</span><br><span class="line">             <span class="keyword">return</span> t;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Ben&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        p.v=<span class="keyword">new</span> Vector();</span><br><span class="line">        Person c = (Person) p.clone();</span><br><span class="line">        log.info(p.name+<span class="string">&quot;:&quot;</span>+p.age);</span><br><span class="line">        log.info(c.name+<span class="string">&quot;:&quot;</span>+c.age);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,p==c);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,p.v==c.v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2020/06/28/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/06/28/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><blockquote><p>根据原型实例创建对象的种类，并通过拷贝原型来创建新的对象。</p></blockquote><p><strong>实现方式</strong></p><ul><li>实现Cloneable接口。在java中实现了此接口的类才可以被拷贝。</li><li>重写Object的clone方法，Object的clone方法作用域是protected类型，需要重写修改作用域为public。</li></ul><a id="more"></a><p><strong>特点</strong></p><p>　　比new对象性能好，clone方法调用本地方法复制对象。不会调用类的构造方法。clone方法只会浅拷贝，即是拷贝对象的基本数据类型，若要实现深拷贝，重写方法中需要针对数组、容器对象、引用对象做另外的拷贝。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">Prototype prototype = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">prototype = (Prototype)<span class="keyword">super</span>.clone();</span><br><span class="line">      prototype.list = (ArrayList) <span class="keyword">this</span>.list.clone();</span><br><span class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> prototype; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title">Prototype</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;原型模式实现类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">ConcretePrototype cp = <span class="keyword">new</span> ConcretePrototype();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">ConcretePrototype clonecp = (ConcretePrototype)cp.clone();</span><br><span class="line">clonecp.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Web Token</title>
      <link href="/2020/06/26/JSON-Web-Token/"/>
      <url>/2020/06/26/JSON-Web-Token/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><blockquote><p>是一种跨域认证的令牌技术。</p></blockquote><p><strong>解决场景</strong></p><ol><li><p>用户向服务器发送用户名和密码。</p></li><li><p>服务器验证通过后，则在session中保存用户的相关信息，如用户角色，权限等。</p></li><li><p>服务器返回一个sessionId给客户端 ，写入浏览器的cookie中。</p><a id="more"></a></li><li><p>用户的每次请求都带上seesionId。</p></li><li><p>服务端找到sessionId，知道用户的身份。</p></li></ol><blockquote><p>缺点：单机没问题，集群或者跨域，则需要session共享。一种方案是将session持久化，每个服务受到请求都请求持久层。</p></blockquote><p>　　JWT的方案：服务端不在保存session，session保存在客户端，每次请求发送给服务端。</p><p><strong>原理</strong></p><p>　　服务端认证后，生成一个JSON对象给客户端，以后客户端就用这个对象去跟服务端交互，防止数据被篡改，需要对其进行签名，可以理解为配一对无法修改的钥匙，用户可以用其来开门。</p><p><strong>数据结构</strong></p><p>头部（header）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    “typ”: “JWT”, </span><br><span class="line">    “alg”: “HS256” </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>有效载荷（PayLoad）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    “iss”: “Online JWT Builder”, </span><br><span class="line">    “iat”: 1416797419, </span><br><span class="line">    “exp”: 1448333419, </span><br><span class="line">    ……. </span><br><span class="line">    “userid”:10001 </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>签名</p><blockquote><p>将Header和Playload拼接生成一个字符串,str=“eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyaWQiOjB9”，使用HS256算法和我们提供的密钥（secret,服务器自己提供的一个字符串）对str进行加密生成最终的JWT，即我们需要的令牌（token），形如：str.”签名字符串”。</p></blockquote><p><strong>交互过程</strong></p><p>1、客户端通过用户名和密码登录</p><p>2、服务端进行鉴权，通过则返回token给客户端</p><p>3、客户端收到token后每次访问服务端都带上该token，相当于令牌表示有权访问</p><p>4、服务端一般会在网关验证token的合法性，若token合法，则允许请求，若token不合法或者过期，返回请求失败</p><p><strong>JWT的时序图</strong></p><p><img src="/assets/blog_img/%E5%9F%BA%E4%BA%8Etoken%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88.png"></p><p><strong>验证token有效性</strong></p><blockquote><p>HS256加密算法：使用对称算法加密，共享同一个密钥，验证的时候，取头部和载荷base64后的字符串再使用该算法加密，将生成与传过来的签名比对，一致则有效。</p><p> RS256加密算法：使用非对称算法加密，提供方使用私钥加密后，生成签名，接收方使用公钥验证签名</p></blockquote><p><strong>特点</strong></p><ol><li>JWT默认不加密，可以生产token后再用密钥加密一次。</li><li>不加密时不能将敏感数据写入body。</li><li>可以降低服务端的查库压力，因为每次仅校验token。</li><li>缺点是token生成后续签难，且无法废弃。</li><li>尽可能使用https协议传输。</li></ol><p><strong>实践</strong></p><blockquote><p>项目架构是微服务架构，采用JWT鉴权与数据交互，采用RSA256非对称加密算法，统一通过gateway进行token的合法性校验。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调理脾胃</title>
      <link href="/2020/06/26/%E8%B0%83%E7%90%86%E8%84%BE%E8%83%83/"/>
      <url>/2020/06/26/%E8%B0%83%E7%90%86%E8%84%BE%E8%83%83/</url>
      
        <content type="html"><![CDATA[<p>　　近来生活不规律，饮食好生冷，多熬夜，作息不规律，感觉脾胃瘀滞，气机不畅感明显。查阅中医相关资料，是为脾胃虚弱之症。</p><h3 id="判定"><a href="#判定" class="headerlink" title="判定"></a>判定</h3><ol><li>舌头边缘有齿痕，湿气重，脾胃虚</li><li>食欲下降，转化率差</li><li>早起不适，起床就胸闷气短，头晕。</li><li>湿气重</li></ol><h3 id="如何养脾胃"><a href="#如何养脾胃" class="headerlink" title="如何养脾胃"></a>如何养脾胃</h3><ul><li>忌生冷</li><li>忌多</li><li>忌忧思过度</li><li>适量服用归脾丸或补中益气丸提升脾胃的运化</li><li>慢跑运动提升血液循环，提升脾胃的运化能力，且能去除体内的湿气。</li></ul><blockquote><p>健康是革命的资本，关注健康，关注自我。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 健康 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP模式设置引发的问题</title>
      <link href="/2020/05/21/FTP%E6%A8%A1%E5%BC%8F%E8%AE%BE%E7%BD%AE%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/21/FTP%E6%A8%A1%E5%BC%8F%E8%AE%BE%E7%BD%AE%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　最近写了一个程序使用FTP去服务器批量下载文件，按道理应该是比较简单的。但上了生产环境就发生了异常，程序下载的过程中莫名其妙进入假死状态，日志也没有继续打，起初以为是递归加载文件的时候找不到出口，后来经过排查原因是FTP的工作模式问题引起的。</p><h3 id="FTP的工作模式"><a href="#FTP的工作模式" class="headerlink" title="FTP的工作模式"></a>FTP的工作模式</h3><p>FTP工作端口默认有两个，通常21是命令端口，20是数据端口，当混入主被动模式，数据端口就不一定是20了。</p><ul><li>主动模式（PORT）</li><li>被动模式（PASV）</li></ul><h4 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h4><p>　　FTP默认是启动主动模式，client与server的21端口建立连接后，client随机开放一个1024以上的端口，发送命令给server，告诉server我client将采用主动模式并开放端口，server主动连接并传输。</p><h4 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h4><p>　　不同点在于在建立了连接后，client发送pasv命令给server，server随机开放一个端口给client，简单说就是让server告诉client应该连接哪个端口来进行数据传输，server是被动等待client连接的。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>　　程序发生假死的原因是因为默认采用主动模式，当服务器连接客户端的传输端口时，有可能被客户端防火墙挡住，采用被动模式让服务端打开随机端口，被动等待客户端进行连接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件删除原理</title>
      <link href="/2020/05/14/Linux%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E5%8E%9F%E7%90%86/"/>
      <url>/2020/05/14/Linux%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>　　Linux磁盘上的文件有两个link计数器，分别是i_count和i_link，表示进程的引用计数和硬连接的数量。只有当i_count=0并且i_link=0才会删除文件。当我们使用rm命令时，只是使i_link减少，如果此时文件依然被进程引用，文件还未被真正的删除。</p><p><strong>实践场景</strong></p><p>　　实现的一个功能点是通过FTP将文件从其他机子同步到本机，需要删除本机当日的数据，覆写新的数据，并且这些数据会被一个程序定时读取使用。这里的问题是如果此时程序正在读取数据，而同步程序也在跑，会不会影响业务。首先这里程序不涉及写操作，只读，那么当同步程序删除文件时，应用程序load到内存中，完成业务操作都是在内存中，当然如果发生程序异常，那么重跑也会以最新的文件为基础。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2020/05/12/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/05/12/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><blockquote><p>在防止缓存穿透场景中，接触到布隆过滤器这个东西，总结下个人对这玩意的理解</p></blockquote><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><p>简单来说，这个东西就是由一个bit数组和几个哈希函数组成，数组上只存放0或1，好处就是这个数组可以搞得非常大，毕竟bit数组，100w的数据，撑死 1000000Bit / 8 = 125000 Byte = 125000/1024 kb ≈ 122kb 的空间。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p><strong>加入元素</strong></p><p>　　加入元素先拿这个元素通过几个hash函数去算一下值，然后将数组上的这几个位置的值设为1</p><p><strong>搜索元素</strong></p><p>　　同样也是用这个元素通过几个hash函数去算一下值，然后判断数组上的这几个位置的值是否1，如果都为1，则说明元素存在，否则元素不在。存在的问题是有可能同一个元素算出同一个位置的值，存在误判的概率，但是如果存在不为1，则肯定是不存在这个元素。</p><h1 id="解决场景"><a href="#解决场景" class="headerlink" title="解决场景"></a>解决场景</h1><ul><li>判断一个数字是否存在大量的数字集中</li><li>防止缓存穿透</li><li>邮件的垃圾邮件过滤、黑名单</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程实践</title>
      <link href="/2020/05/09/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>/2020/05/09/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　在软件工程工作实践中，很多时候由于项目工期紧，一个需求提出后，由于急于落地结果，前期的需求调研的时间可能只有一两次的需求会议，作为开发人员，个人体会是在会议中陷入考虑编码和实现的思维中，往往这会造成开发人员对于需求的理解不准确，有时由于业务点或者业务规则过多，会给初次接触需求的开发人员过大的压力，从不理解需求开始，就开始实践编码，往往会造成不可避免的返工，如果团队有专业的需求分析人员，从需求分析人员到开发人员的沟通传递中，不可避免会遗漏信息，若果没有落地的需求文档，更加如此。因此在需求会议中应该以业务人员的角度，抛开开发人员的思维方式，无需考虑编码细节，因为这往往会影响我们的理解和会议的效果，站在对方的角度去思考，但需要考虑的是软件设计合理性，毕竟业务人员不懂技术，也不一定懂软件设计，必须引导用户，保证软件交互的合理性。</p><p>　　作为开发人员需要清楚需求才可动手，只有当手上输出了该有的设计文档开始编码才能做到胸有成竹，以文档来驱动开发的好处在于，当业务快速变化的时候，能够适时查阅新增的业务点对现有的业务流程和程序流程的影响会有多大，改动一个点会造成多大的影响。</p><p>　　从个人的实践来看，对于一个从零开始的需求，至少包含以下几个文档</p><p>　　1、业务需求文档，包含业务提出的所有需求点和业务规则。</p><p>　　2、程序流程图，需要开发根据业务需求说明书转化成程序流程图，程序流程可以作为与业务确认的稿件，保证设计方案不会与业务需求有较大的差距，最终的稿件应该是编码的可依据基础。</p><p>　　3、ER图，数据库表设计，这两个工具应该能确保扩展性，否则后续的加表返工设计数据表或者加表成本都会引发一系列的编码成本。</p><p>　　如果团队是需要应对快速变化的业务，那么引入敏捷开发的工程模式是比较适合的，当有了以上几个文档后，以最简单的方式构建代码架子，不考虑过多的设计，设计一个核心的架构，慢慢改进，不需要就干掉，交付最小成果，快速反馈业务人员，与业务人员探讨改进。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 工作感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>投资思考</title>
      <link href="/2020/02/21/%E6%8A%95%E8%B5%84%E6%80%9D%E8%80%83/"/>
      <url>/2020/02/21/%E6%8A%95%E8%B5%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　高度信息化的社会，身处巨大的信息洪流中，每个社会个体接触信息源的渠道丰富多样，有效甄别信息的有效性并能形成投资的决策根据。市场的变化来源于大众对于当下事态的反应，抓去这种心理变化，去洞察分析，进行投机获取相应的收益。</p><p>　　市场是自由交易的。</p><p>　　劳动产生报酬，个人对雇主负责，雇主角度来讲，只有当你的有效成果直接或间接促成公司收益，才是有效的，才能提高你的议价权。你的职位价格由市场供需关系确定，其上限最终会受限与市场整体的价位，除非你能够通过差异性综合提高公司收益，不仅仅你的职位能力。</p><p>　　投资性收入来源于个人对市场的把握，手段及渠道是多样化的，决策的正确根据对市场未来一段时间的预测，市场是敏感的，是大众心里变化的反映，如何从其中抽取对未来有效的信息源，并根据时势预估未来一段时间的市场变化，作出相应的投资决策，其正确性只能在你的收益中得到反映。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web实时消息推送</title>
      <link href="/2019/12/20/Web%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
      <url>/2019/12/20/Web%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><blockquote><p>一个Web项目中，构建过一个消息推送服务，项目使用SpringCloud微服务架构，系统多数的业务场景是发送邮件通知系统用户，为了提高系统的用户粘度，希望通过系统内的实时通知来取代邮件服务。</p></blockquote><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>　　ws出现之前，网站实时消息技术一般采用http轮询，这种方式缺点明显，由于http协议消息包含的头部信息较长其中的有效会消耗大量的带宽资源。ws通过兼容80和443端口来实现客户端与服务端的全双工通信。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>减少控制开销</li><li>更强的实时性</li><li>保持连接状态，是有状态协议</li><li>可以传输二进制数据</li></ul><h4 id="协议细节"><a href="#协议细节" class="headerlink" title="协议细节"></a>协议细节</h4><p><img src="/assets/blog_img/1513538-20200602171824968-160895943.jpg"></p><ol><li>客户端通过http协议发起连接请求，Upgrade字段是websocket，表明需要升级为ws进行通讯。</li><li>服务端收到请求后，返回101状态码表示理解，并返回Upgrade消息头表明采用ws来处理请求。</li></ol><p><strong>客户端请求头</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span><br><span class="line">Origin: http://example.com</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p><strong>服务端请求头</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ&#x3D;&#x3D;</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><h3 id="SpringBoot搭建WebSocket服务"><a href="#SpringBoot搭建WebSocket服务" class="headerlink" title="SpringBoot搭建WebSocket服务"></a>SpringBoot搭建WebSocket服务</h3><blockquote><p>最简单的消息推送模型，前端+后端服务对应客户端与服务端</p></blockquote><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-websocket&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServerEndpointExporter 作用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这个Bean会自动注册使用<span class="doctag">@ServerEndpoint</span>注解声明的websocket endpoint</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="核心处理类"><a href="#核心处理类" class="headerlink" title="核心处理类"></a>核心处理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/webSocket/&#123;sid&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger onlineNum = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的WebSocketServer对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, Session&gt; sessionPools = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Session session, String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (session) &#123;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;发送数据：&quot; + message);</span></span><br><span class="line">                session.getBasicRemote().sendText(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给指定用户发送信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String userName, String message)</span></span>&#123;</span><br><span class="line">        Session session = sessionPools.get(userName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(session, message);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立连接成功调用</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, <span class="meta">@PathParam(value = &quot;sid&quot;)</span> String userName)</span></span>&#123;</span><br><span class="line">        sessionPools.put(userName, session);</span><br><span class="line">        addOnlineCount();</span><br><span class="line">        System.out.println(userName + <span class="string">&quot;加入webSocket！当前人数为&quot;</span> + onlineNum);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendMessage(session, <span class="string">&quot;欢迎&quot;</span> + userName + <span class="string">&quot;加入连接！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接时调用</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="meta">@PathParam(value = &quot;sid&quot;)</span> String userName)</span></span>&#123;</span><br><span class="line">        sessionPools.remove(userName);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">        System.out.println(userName + <span class="string">&quot;断开webSocket连接！当前人数为&quot;</span> + onlineNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收到客户端信息</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        message = <span class="string">&quot;客户端：&quot;</span> + message + <span class="string">&quot;,已收到&quot;</span>;</span><br><span class="line">        System.out.println(message);</span><br><span class="line">        <span class="keyword">for</span> (Session session: sessionPools.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendMessage(session, message);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误时调用</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生错误&quot;</span>);</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onlineNum.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        onlineNum.decrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;input type=&quot;text&quot; placeholder=&quot;channelId&quot; id=&quot;channelId&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;input type=&quot;button&quot; value=&quot;连接&quot; onclick=&quot;link()&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;input type=&quot;button&quot; value=&quot;关闭&quot; onclick=&quot;close()&quot;&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendText&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送数据&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;txa&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ws</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timer</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sendId = <span class="string">&quot;客户端&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sendText&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> txa = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;txa&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(text.value);</span></span><br><span class="line"><span class="javascript">        txa.value =txa.value + sendId+<span class="string">&quot;:&quot;</span>+ text.value + <span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line">        ws.send(text.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 打开一个 web socket</span></span></span><br><span class="line"><span class="javascript">    ws = <span class="keyword">new</span> WebSocket(<span class="string">`ws://localhost:8080/webSocket/1`</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;连接完成，可以发送数据&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 固定频率发送消息保持连接在线</span></span></span><br><span class="line">     /*   timer = setInterval(() =&gt; &#123;</span><br><span class="line"><span class="javascript">            ws.send(<span class="built_in">Date</span>.now())</span></span><br><span class="line">        &#125;, 10000)*/</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> received_msg = evt.data;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;数据已接收...&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(received_msg)</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 关闭 websocket</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;连接已关闭...&quot;</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.error(err)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (ws === <span class="literal">null</span> || ws === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;请先连接&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        ws.close()</span><br><span class="line">        if (!timer) &#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;请先连接&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer.clear()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="微服务架构下session处理"><a href="#微服务架构下session处理" class="headerlink" title="微服务架构下session处理"></a>微服务架构下session处理</h3><p>　　由于WebSocket是有状态的，当前端与某个服务节点连接上后，只能与该节点进行通信。session也不能通过外部缓存，那么如果需要发送消息给某个用户，怎么找到用户所连的节点呢？</p><h4 id="定向分配"><a href="#定向分配" class="headerlink" title="定向分配"></a>定向分配</h4><p>　　通过redis存储用户与连接节点的映射，当需要发送时，该路由表发送到真实节点，节点再转给用户。适合大型架构，精准投放消息。</p><h4 id="MQ广播"><a href="#MQ广播" class="headerlink" title="MQ广播"></a>MQ广播</h4><p>　　使用MQ的订阅模式，所有服务节点订阅相同的主题，需要发送消息时，进行广播，节点收到消息后判断用户是否在自己的节点上，在则发送消息。这种方式适合小型架构。</p><h3 id="引入RabbitMQ订阅推送消息"><a href="#引入RabbitMQ订阅推送消息" class="headerlink" title="引入RabbitMQ订阅推送消息"></a>引入RabbitMQ订阅推送消息</h3><p>　　RabbitMQ的模型有生产者、交换机、消费者，主要有三种模式，Direct、Topic、Fanout模式</p><ul><li><p>Direct模式</p><p>发送到DirectExchange的消息转发到RouteKey制定的Queue，RouteKey需要完全匹配。</p></li><li><p>Topic模式</p><p>根据通配符发送到相应的队列。</p></li><li><p>Fanout模式</p><p>广播模式，绑定到交换机上的队列都会收到消息。</p></li></ul><h4 id="实现的功能点"><a href="#实现的功能点" class="headerlink" title="实现的功能点"></a>实现的功能点</h4><p>　　WebSocket的中继节点会有多个，我们希望的是每个中继节点订阅队列，消费同一批消息，将消息发送到当前节点的用户上。这里采用RabbitMQ的Fanout模式，随机生成多个队列名称绑定到同一个交换机上，该交换机上所有队列都能收到消息。</p><p><img src="/assets/blog_img/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81.png" alt="架构图"></p><p><strong>RabbitMQ配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutRabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  每个节点创建随机队列</span></span><br><span class="line"><span class="comment">     *  将三个队列都绑定在交换机 fanoutExchange 上</span></span><br><span class="line"><span class="comment">     *  因为是扇型交换机, 路由键无需配置,配置也不起作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可直接根据本机ip生成队列名</span></span><br><span class="line">        String queueName=<span class="string">&quot;random&quot;</span>+ <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(queueName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;messageFanoutExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingExchangeA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueRandom()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConsumer</span> </span>&#123;</span><br><span class="line"><span class="comment">//直接关联交换机名称，消费其中一条随机队列</span></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(), //注意这里不要定义队列名称,系统会随机产生</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;messageFanoutExchange&quot;, type = ExchangeTypes.FANOUT)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String payload)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;receive:&#123;&#125;&quot;</span>, payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费幂等性"><a href="#消费幂等性" class="headerlink" title="消费幂等性"></a>消费幂等性</h3><p>​        发送前进行入库，并且设置对应的消费状态；消费端也要判断是否存在该数据，存在且未消费则消费，否则丢弃。</p><h3 id="消息发送确认机制"><a href="#消息发送确认机制" class="headerlink" title="消息发送确认机制"></a>消息发送确认机制</h3><p>　　发送到exchange中会有个回调方法，可以在里面记录数据状态</p><h3 id="消费确认机制"><a href="#消费确认机制" class="headerlink" title="消费确认机制"></a>消费确认机制</h3><p>　　在消费端做了捕获，如果失败设置channel.basicNack(tag, false, true)，消息重新入队</p><p>###　消息重新投递</p><p>　　可以采用定时任务重新投递消息，引入重试机制</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitflow实践</title>
      <link href="/2019/11/11/gitflow%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/11/11/gitflow%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>团队中使用git来做版本管理，为尽可能贯彻gitflow的实践，做个总结</p></blockquote><h3 id="提交代码原则"><a href="#提交代码原则" class="headerlink" title="提交代码原则"></a>提交代码原则</h3><ul><li>提交的粒度是一个小功能点或一个bugfix</li><li>comment简练且描述清楚修改的位置或增加的功能</li><li>尽可能几次提交再进行一次推送</li></ul><h3 id="GitFlow"><a href="#GitFlow" class="headerlink" title="GitFlow"></a>GitFlow</h3><ul><li>master——最为稳定功能最为完整的随时可发布的代码；</li><li>hotfix——修复线上代码的 bug；</li><li>develop——永远是功能最新最全的分支；</li><li>feature——某个功能点正在开发阶段；</li><li>release——发布定期要上线的功能。</li></ul><p><strong>Master和develop需要保护起来，只有项目负责人可以推送和删除。</strong></p><h4 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h4><p>​    从develop拉取一条feature的新分支出来进行开发</p><h4 id="完成开发阶段"><a href="#完成开发阶段" class="headerlink" title="完成开发阶段"></a>完成开发阶段</h4><p>​    在develop合并feature分支，创建release版本分支，发布测试环境。相关bug问题都在release分支修改，没问题后发布master分支</p><h4 id="clear阶段"><a href="#clear阶段" class="headerlink" title="clear阶段"></a>clear阶段</h4><p>​    删除feature、release分支</p><h4 id="生产环境bug处理"><a href="#生产环境bug处理" class="headerlink" title="生产环境bug处理"></a>生产环境bug处理</h4><p>​    在master上创建hotfix分支，修改代码直接推，然后记得将hotfix分支合并到develop再删除hotfix，原则上要保证develop上的代码是最新的。因为在并行开发的阶段会有多种情况涉及对生产环境等代码的提交，而实践中开发人员很多时候没有定时更新feature分支，导致后面合并的时候将生产代码给覆盖了，引发生产问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/2019/07/26/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/26/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><blockquote><p>用于向一个现有对象添加新的功能，同时不改变其现有结构。通过创建一个类的装饰类，包装原有类，并保证原有类的签名的前提下提供额外功能。</p></blockquote><p><strong>为什么及什么时候应用</strong></p><blockquote><p>一般拓展一个类的功能会先想到使用继承的基础上添加，但那样会对原有类的层级结构增添多个子类，且往往我们的需求仅仅是针对某个类做一下简单的功能拓展，而并不是为了定义一个新的子类。此时仅仅增加一个装饰类即可。</p></blockquote><p><strong>优点</strong></p><blockquote><p>装饰类和被装饰类能独立发展，不相互耦合。装饰模式是继承的一个替代，可以动态扩展一个实现类的功能。</p></blockquote><a id="more"></a><p><img src="/assets/blog_img"></p><p><strong>代码</strong></p><p><strong>被装饰类接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>被装饰类具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape: Rectangle&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape: Circle&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装饰类抽象接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">      decoratedShape.draw();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>装饰类具体实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(decoratedShape);     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      decoratedShape.draw();         </span><br><span class="line">      setRedBorder(decoratedShape);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Border Color: Red&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      ShapeDecorator redCircle = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Circle());</span><br><span class="line">      ShapeDecorator redRectangle = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Rectangle());</span><br><span class="line">      <span class="comment">//Shape redCircle = new RedShapeDecorator(new Circle());</span></span><br><span class="line">      <span class="comment">//Shape redRectangle = new RedShapeDecorator(new Rectangle());</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Circle with normal border&quot;</span>);</span><br><span class="line">      circle.draw();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;\nCircle of red border&quot;</span>);</span><br><span class="line">      redCircle.draw();</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">&quot;\nRectangle of red border&quot;</span>);</span><br><span class="line">      redRectangle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2019/06/23/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/23/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>将一个类的接口转换成客户端希望的接口，通常用于使用现有类适配新的系统接口。优点是复用现有类。</p></blockquote><blockquote><p>代码层面：适配器类继承或依赖已有的对象，实现想要的目标接口。</p></blockquote><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>客户接口</td><td>适配的接口</td><td>客户端想要的接口形式</td></tr><tr><td>现有目标类</td><td>现有的可被复用的类</td><td>提供现有接口实现</td></tr><tr><td>适配器类</td><td>实现目标接口，依赖目标类</td><td>实现目标接口，做接口兼容</td></tr></tbody></table><a id="more"></a><p><img src="/assets/blog_img/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="UML"></p><p><strong>客户接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>目标类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RgbPlayer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specialPlay</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//自有实现方法；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配器类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerAdapter</span> <span class="keyword">extends</span> <span class="title">RgbPlayer</span> <span class="keyword">implements</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">  <span class="comment">//也可以通过对象依赖的方式注入</span></span><br><span class="line">  <span class="comment">//private RgbPlayer rgbPlayer;</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//转换并调用目标类的方法,比如换参数</span></span><br><span class="line">    <span class="keyword">this</span>.specialPlay();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Player p = <span class="keyword">new</span> PlayerAdapter();</span><br><span class="line">      p.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List遍历过程remove的ConcurrentModificationException</title>
      <link href="/2019/05/03/List%E9%81%8D%E5%8E%86%E8%BF%87%E7%A8%8Bremove%E7%9A%84ConcurrentModificationException/"/>
      <url>/2019/05/03/List%E9%81%8D%E5%8E%86%E8%BF%87%E7%A8%8Bremove%E7%9A%84ConcurrentModificationException/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">  Integer integer = iterator.next();</span><br><span class="line">  <span class="keyword">if</span>(integer==<span class="number">2</span>)</span><br><span class="line">    list.remove(integer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　以上代码List在遍历的过程中，通过判定索引，移除List的元素，程序抛出ConcurrentModificationException异常。</p><p><strong>原因</strong>　　</p><p>　　在迭代器的实现中，checkForComodification()方法会检查List的modCount与expectedModCount的值，不相等则抛出该异常。我们调用的是List的remove方法， 可以看到程序修改了modeCount的值，但是没有修改expectedModCount的值，导致问题的产生。modCount表示List被修改的次数，expectedModCount表示期待值。</p><p><strong>List的remove方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  rangeCheck(index);</span><br><span class="line"></span><br><span class="line">  modCount++;</span><br><span class="line">  E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                     numMoved);</span><br><span class="line">  elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>迭代器的遍历实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>　　调用iterator的remove方法取代List的remove方法， 该方法多了一步操作，expectedModCount=modCount。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">  checkForComodification();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">    cursor = lastRet;</span><br><span class="line">    lastRet = -<span class="number">1</span>;</span><br><span class="line">    expectedModCount = modCount;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> Java基础 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2019/03/24/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/24/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用来处理相关事务责任的一条执行链，执行链上有多个节点，每个节点都有机会根据匹配条件处理事务，处理完就根据实际业务需求传递给下一个节点或者返回。</p></blockquote><table><thead><tr><th>组成</th></tr></thead><tbody><tr><td>抽象责任处理类</td></tr><tr><td>请求类</td></tr><tr><td>具体节点处理类</td></tr></tbody></table><a id="more"></a><p><img src="/assets/blog_img/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.png" alt="UML"></p><p><strong>抽象责任处理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLeaveHandler</span></span>&#123;</span><br><span class="line">   <span class="comment">/**直接主管审批处理的请假天数*/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> MIN = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**部门经理处理的请假天数*/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> MIDDLE = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/**总经理处理的请假天数*/</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> MAX = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**领导名称*/</span></span><br><span class="line">    <span class="keyword">protected</span> String handlerName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**下一个处理节点（即更高级别的领导）*/</span></span><br><span class="line">    <span class="keyword">protected</span> AbstractLeaveHandler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**设置下一节点*/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setNextHandler</span><span class="params">(AbstractLeaveHandler handler)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextHandler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**处理请假的请求，子类实现*/</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type=type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**类型*/</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组长处理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupManagerHandler</span> <span class="keyword">extends</span> <span class="title">AbstractLeaveHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GroupManagerHandler</span><span class="params">(String handlerName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handlerName=handlerName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.getType = <span class="keyword">this</span>.MIN)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;组长处理结束&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.nextHandler)&#123;</span><br><span class="line">      <span class="keyword">this</span>.nextHandler.handlerRequest(request);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;审批拒绝！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>部门经理处理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeptManagerHandler</span> <span class="keyword">extends</span> <span class="title">AbstractLeaveHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DeptManagerHandler</span><span class="params">(String handlerName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handlerName=handlerName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.getType = <span class="keyword">this</span>.MIDDLE)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;部门经理处理结束&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.nextHandler)&#123;</span><br><span class="line">      <span class="keyword">this</span>.nextHandler.handlerRequest(request);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;审批拒绝！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CTO经理处理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CtoManagerHandler</span> <span class="keyword">extends</span> <span class="title">AbstractLeaveHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CtoManagerHandler</span><span class="params">(String handlerName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handlerName=handlerName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.getType = CTO.MAX)&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;CTO处理结束&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.nextHandler)&#123;</span><br><span class="line">      <span class="keyword">this</span>.nextHandler.handlerRequest(request);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;审批拒绝！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    GroupManagerHandler g = <span class="keyword">new</span> GroupManagerHandler(<span class="string">&quot;组长处理类&quot;</span>);</span><br><span class="line">    DeptManagerHandler d = <span class="keyword">new</span> DeptManagerHandler(<span class="string">&quot;部门经理处理类&quot;</span>);</span><br><span class="line">    CtoManagerHandler c = <span class="keyword">new</span> CtoManagerHandler(<span class="string">&quot;CTO处理类&quot;</span>);</span><br><span class="line">    g.setNextHandler(d);</span><br><span class="line">    d.setNextHandler(c);</span><br><span class="line"></span><br><span class="line">    Request rq=<span class="keyword">new</span> Request(<span class="number">30</span>);</span><br><span class="line">    g.handlerRequest(rq);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处世</title>
      <link href="/2018/07/13/%E5%A4%84%E4%B8%96/"/>
      <url>/2018/07/13/%E5%A4%84%E4%B8%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　当我们做一件事情的时候，不要寐心，可能很多时候为了达成目的，我们会着急，焦虑，眼看时间一点点在消逝，不得已而为之，未考虑清楚匆忙决定一件事情，最终发现事与愿违。当然太过谨慎思虑太多也会错失很多机会，青春给了我们试错的资本，敢于尝试是听得比较多的道理。</p><p>　　对人对事，得与失之间，权衡利弊而后之。而立之年，太多的困惑会阻挡人的前进方向，选择的方向往往比努力重要，想成为什么样子，想达到什么目标，三思而后行。我们处在一个环境中往往会带有局限性，限制我们的视野与思维，当你慢慢接触更优秀的人与其共事交流，会开阔自身的思维与境界，很多时候我们更愿意处于一个舒适区，不想跳出来，害怕这份稳定与安宁被打破，宁愿在内做最优解，但是这样人就会不知不觉被环境所同化，带有其土壤所熏陶的气息，很难打破。如果我们选择的东西不是我们内心所想要的，必定有所困惑，怀疑自身的态度与原则，必要的调解都无法按捺内心那股冲突。我们处于世上，有着自身的底线，跨越这个底线，抛弃原则，可能最终自己都无法认清自己的模样，何苦呢？</p><p>　　人必要忠于自己而后立生处事，对人对事亦然。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表我与自我</title>
      <link href="/2018/07/09/%E8%A1%A8%E6%88%91%E4%B8%8E%E8%87%AA%E6%88%91/"/>
      <url>/2018/07/09/%E8%A1%A8%E6%88%91%E4%B8%8E%E8%87%AA%E6%88%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　当我们认知一个人，最快速的方式是通过外表，穿着，走姿，来刻画一个人在我们心目中的印象，标签化是我们短期内记忆一个人最快的方法，反之亦然。</p><p>　　一个人所呈现的表象是他想让我们看到的样子，表我和内我是截然不同的，在外界环境中，起作用的是表我，这个姿态是我们根据社会规则，道德伦理，他人所要求的样子所刻画出来的。形成一个人的表我，其行为细节，三观，态度等，其实都可以关联性分析。一个人最原生的自我来自于其原生家庭，所处的阶层，父母的教养，童年的经历，青春期的成长，都是塑造一个人的基石。其三观与原生家庭的教养会在社交细节中体现出来，其行为动机则需要关联构成其复杂性格的环境与经历。我们知道一个人的行事总是遵循其固定不变的性格构成，受动机和能力的制约，一个正常的人在其范围内作出的行为都是有根据的，处事，对人亦然。要了解一个人的自我，需要时间去了解，通过对其日常的行为细节，观其言察其色，对待一件事情的反应，面对责任时是推卸抑或主动承担。这些细节是掩饰不了的，会在其行为中体现出来。情商达练之人懂得在人群中把握分寸，与人相处时保持一种舒适的状态，适度展现自我在环境中的存在，但也往往成为其弱点。人与人相处时，其一言一行都会进入他人的印象中，言语是其动机产生的结果，达到一个如何的程度，希望事情走向一个什么样的结果，其实已经刻画在一个人的大致计划中，是其本我在事物发展过程当中的本能调控。这类动机行为是难以看穿的，因为当你不完全了解一个人时，这个结果你是无法推敲出来的。有一类人，处于人群中并不处于起眼的，但发生某事情时，为了调控事情走向，达到自我目的，会通过各类细节去调控，虽然抽象，但是若果最终的结果如他个人所愿，则必定有其达练之处。聪明人与聪明人交谈时，思维方式是跳跃的，正常人的交流顺序是按照123456，但聪明人之间交流的逻辑顺序是136，遵从跳跃式顺序。很多时候聪明人识破一个人的动机的时候，不会去揭穿，鉴于正常的社交尊重，让对方能够下台面或者利用话题周旋，若这个动机也是能够接受的范围内，且是双赢的，则会顺应对方的所求，有所求必有所图，这类人难以交心，其有着天生的防备心态，表面上关系融洽，但一旦希望关系深入时，你必然能感受到与对方的距离。大智若愚非常适用于形容高阶的聪明人，看似平淡无常，其背后的动机暗流涌动，当你对其产生疑惑但又无法说出个所以然来，这时候，明显的对方已经高你一阶。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>光阴似箭日月如梭</title>
      <link href="/2018/07/07/%E5%85%89%E9%98%B4%E4%BC%BC%E7%AE%AD%E6%97%A5%E6%9C%88%E5%A6%82%E6%A2%AD/"/>
      <url>/2018/07/07/%E5%85%89%E9%98%B4%E4%BC%BC%E7%AE%AD%E6%97%A5%E6%9C%88%E5%A6%82%E6%A2%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　光阴似箭，日月如梭，曾几何时写作文惯用的起手式只是应付当时那800字的心态加之自身时常慨叹时光易逝，因此，这两个四字词不知出现在我的作文里多少次。再次用起，总有一番不同的感觉。很多电影，很多文章，很多诗词，很多字句，当人有了一定的阅历后重新回味总会有一番不同的感受，如周星驰的电影，宫崎骏的动漫，童年1元杯的珍珠奶茶，街边小贩的牛杂，初高中写的文章，这种五味杂陈的感觉或许就是自身心智在不断成熟，对过去自我一种审视的反馈。不知不觉时间已到了2018，偶然间被叫了声叔叔犹感突兀，但貌似在提醒我已长大成人，95后的我们已经奔向社会，成为承担社会责任的一代，起承转合间备感压力，爱情婚姻，事业家庭，属于这个阶段去追求的东西，人生没有多少个十年，一个阶段又一个阶段的成长造就现在的我们，不断变化的自我与环境间的不断磨合，年轮棱角在角逐中被磨平，因此能够保持初心的人犹应珍惜。那一个个头顶掉发的中年大叔当年何不是意气风发的青年，带着梦想与期待步入社会，在生活面前，他们收起了那份锐气取而代之的是对生活的妥协，这或许是一种成熟吧，我不知道，但是自我抗拒成为他们，因此必须储备资本，你才有条件对生活说不，这个条件需要你为之付出，付出才有所得，任何事情亦然，空有目标而无执行力只是头脑发热之人的一时冲动，落实到逐步的目标实施中，有具体的可行性，才有机会达到想要的效果。</p><p>　　勤奋的含义是今天的热血，而不是明天的决心，后天的保证。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存在即是合理</title>
      <link href="/2018/07/04/%E5%AD%98%E5%9C%A8%E5%8D%B3%E6%98%AF%E5%90%88%E7%90%86/"/>
      <url>/2018/07/04/%E5%AD%98%E5%9C%A8%E5%8D%B3%E6%98%AF%E5%90%88%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　存在即是合理，当环境变换时，周遭的一切都不是你知悉的一切，快速投入到工作中，你会发现周围的一切都那么模糊，快速的工作节奏，工作的deadline压力，抬头发现已经忘记时间，夜色已经降临，只是生活还是在继续。走出大楼，那各色的人匆匆茫茫到底在奔向何方，憧憬着什么。有时你会发现人最可怕的地方是不知道自己想要什么，任由生活摆布。但成年人的世界有时又无可奈何，责任在身，上级的压力，慢慢的就能够去接受，去承担这种变化，无事一身轻或许是最潇洒的状态，摆摆手或者就能让自己的生活轻松点，但是人要懂得居安思危，时间是很残酷的，不知不觉你的青春、你的时间就已然流逝。</p><p>　　生活要有点盼头，有点目标，你就会去期待，这个过程必须改变自我，坚持着一些事情，养成良好的习惯，保持自律，一点一点的积累，相信会在不久的将来收到回报。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂谈</title>
      <link href="/2018/06/29/%E6%9D%82%E8%B0%88/"/>
      <url>/2018/06/29/%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　成长，爱情，婚姻，可能是20多岁这个年龄段比较苦恼的三件事情，一方面我们步向社会，慢慢适应社会的节奏，从学生到社会一员这一角色的转变，带着金字塔尖那份骄傲走出来，发现这份骄傲带给你的只有一时的光环作用，社会更看重个人价值，能力贡献，说白了就是等价交换，不管是技能、资本、人脉抑或其他可利用的资源，都被他人当作你的价值所在，你身上会自带一个标签，大家会利用那个标签来评判你的利用价值，这些都在人际交往的细节中能体现出来，社交就是一种互利互惠的活动，标签化印象化是你能给与他人对你认知最快的方式。在社会中不再像学生阶段般，大家都是平等地接受教育，学习，考试，以成绩来定论一个人。不得承认好多在校成绩优秀的学生进入社会会有一份失落感，不再以成绩来定论一个人的价值，而是多方面的能力，这能力是个笼统的概念，也即是如上所说，不再是你个人产生的影响，涉及到各个层面的关系，利用好这各方面的资源，对于个人的发展有各种好处。</p><p>　　关于爱情，私以为触不可及，也不算，只不过在遇到适合的人之前都不愿随便发展一段感情，毕竟爱情需要成本，不管感情上、精力上抑或经济上，很多时候，上层建筑是需要下层建筑来支撑的，这一点在初中政治课上早有认知，爱情亦然，这个社会越来越不相信爱情，讲究门当户对，高中课上年过半百的数学老师直言道，但我们不以为然，我们相信着那没有面包的爱情，纯真动人，可以为了爱不顾一切。但随着成长，你会发觉这个世界很不公平，爱情是一件很奢侈的东西，见过一些人和事，发现爱情有时不堪一击，那般脆弱，因为我们身处这个大环境中，我们的观念，视角不再受那书中狭隘的爱情观所枷锁，欲望在膨胀，观念在刷新，影响着我们的选择，我们的考虑。但不管如何，谁都享有爱情的权利，既然两情相悦，惺惺相惜，那就去体验吧，至少不会成为人生的一大遗憾。</p><p>　　关于婚姻，常听说婚姻是爱情的坟墓，貌似爱情的终点就是婚姻，成为枷锁两个人一生的苦链，我无法评判先辈的经验之谈，未到那个年纪未有那般体会也不好说什么。但至少我是向往婚姻的，婚姻应该是两个人爱情的结晶，是对彼此相依为命，厮守终生的一种承诺，未来的事情我们不能预测与知晓，但我们在那一刻的选择就是我们那一刻所相信着的想法，既然相信着那就相信自己的选择，一起去面对生活的柴米油盐，面对生活的欢声笑语。生活不可能永远一帆风顺，婚姻也如此，任何一段成功的婚姻无不是两个人共同参与，共同构建的结果，这其中的酸甜苦辣也只有你们两个知道，正是一起走过，一起面对，齐步并进，婚姻才会幸福而美满，只向往美好而不考虑艰辛，只憧憬快乐而忽视痛苦，那是自私者的想法 ，爱与被爱都是相互的，好的婚姻应当是相互扶持，相互关爱，包容理解，所以见到一些老年后依然彼此关爱，互相尊重的夫妻，才会感叹好的婚姻的难能可贵，因为生活的重担很容易消耗感情，消耗彼此的耐心，一旦风雨来临，就能见证婚姻的坚固性。</p><p>　　杂谈629</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写</title>
      <link href="/2018/06/28/%E5%86%99/"/>
      <url>/2018/06/28/%E5%86%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　写，是一种心情，是一种态度，是对生活的思考，庆幸我生而为人，庆幸我学会了读与写，庆幸我有了思想，只需要一支笔，一个大脑便能对抗全世界，对抗消极的一切。当你有了写的冲动，那抑制不住的倾诉欲，涌现的灵感，流露的情绪只需执笔下纸。那文字是你面对生活的武器，是你激荡的思考留下的结晶，是你迸发的心情，是你不屈的态度，想写就写，有想法就写，多么惬意舒适，自由自在。你升华着，成长着，什么都无法阻挡枷锁你自由的思想，任其倾泻吧，那是你生活源源不断的动力，是面对困难的武器，是面对消极的解药。</p><p>　　给我一支笔，一个自由的思想，我不再畏惧。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平常心</title>
      <link href="/2018/06/27/%E5%B9%B3%E5%B8%B8%E5%BF%83/"/>
      <url>/2018/06/27/%E5%B9%B3%E5%B8%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　世上有一些东西，是你自己支配不了的，比如运气和机会、舆论和毁誉，那就不去管它们，顺气自然吧！</p><p>　　世上有一些东西，是你自己可以支配的，比如兴趣和志向、处世和做人，那就在这些方面好好地努力，至于努力的结果是什么，也顺气自然吧！</p><p>　　我们不妨去追求最好——最好的生活、最好的职业、最好的婚姻、最好的友谊，等等。但是，是否得到最好，取决于许多因素，不是光靠努力就能成功。因此，如果我们尽了力，结果得到的不是最好，而是次好、次次好，我们也应该坦然地接受。人生原本就是有缺憾的，在人生中需要妥协。不肯妥协，和自己过不去，其实是一种痴愚，是对人生的物质。</p><p>　　在青年时期，人有虚荣心和野心是很正常的。成熟的标志是自我认识，认清了自己的天赋方向，于是外在的虚荣心和野心被内在的目标取代。</p><p>　　野心倘若肯下降为平常心，同时也就上升成了慧心。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>困顿与觉悟</title>
      <link href="/2018/06/24/%E5%9B%B0%E9%A1%BF%E4%B8%8E%E8%A7%89%E6%82%9F/"/>
      <url>/2018/06/24/%E5%9B%B0%E9%A1%BF%E4%B8%8E%E8%A7%89%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　人生的困惑无非色与空，色代表情感的困惑，空代表生命意义的困惑。想来想去，到头仍是困惑。不过想的好处是，在困惑中有了方向，困惑中的寻求形成了人的精神生活。因为色的诱惑，男人走向女人，女人走向男人，走进彼此的心灵，有色入情，于是有了爱。因为空的疑惑，人类呼唤世界之本相，由空入悟，于是有了哲学和宗教。</p><p>　　不去想人生的大问题，不是会快乐点吗？不是因为思考所以痛苦，而是因为痛苦所以思考。想不想不是自己能选择的，由天生的禀赋决定。想这类问题的人多半生性敏感而认真，实在身不由己，欲罢不能。</p><p>　　喜欢想人生问题的人，所谓喜欢想，并不是刻意去想，而是问题自己找上来，躲也躲不掉。想这类问题当然痛苦，但痛苦在先，你不去思考，痛苦仍然在，成为隐痛。既然如此，不如去面对它，看一看那些有智慧的人是怎么想这类问题的，开阔自己的思路，把痛苦变成人生的积极力量。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存在的意义</title>
      <link href="/2018/06/24/%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/"/>
      <url>/2018/06/24/%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　每个人生于世上，都不免会对自己存在的意义产生疑惑。不知何时有了意识，对这个世界有了清晰的认知，当问起自己这个问题时，仿佛呱呱落地的我们就在昨天，但今日我们已成为这个世界整体的一部分，不可否认的存在着。对于世界来讲，人是客体，对于人来讲，这个世界的一切都是客体。人作为一种有思考能力的动物，在进化的过程中区别与其他生物，我不免有疑惑我们的思维方式是否受限于我们的物质构成，如果将整个世界，扩大至宇宙，我们也不过是时间长河的一瞬，空间上的一点尘埃。换个角度，人不是这个世上的主体，也不过如其他物质，生物那般只是这个有机世界的一部分，以世界作为主体的角度来看，人与其他一切客体都是等同的，无非就是分子在不断运动，产生，分化，死亡。无他，也就是物质的形态以一种方式产生凋零转化为另一种形态。</p><p>　　每个人终其一生的寿命十分短暂，但走过的轨迹都是唯一的，认识的人经历的事情，我们身处这个时代，也受制于这个时代，我们享受着21世纪的便利，也遵循着社会运行法则，在这个车轮不停滚动的社会中生存，作为一种有思想的生物，我们接受的教育一方面完善我们的认知，但不可否认，一方面抑制了我们的思维。我们的三观，父母、老师的教育这些潜移默化的观念在我们青年时期已然写入我们的生命中，认知了世界的运行法则，然后在此之上，在生存着抑或有着各式各样的梦想，在个体生命中不断追逐。我们按照这个世界的规律，受教育，成长，工作，结婚，生子，退休，死亡，千篇一律，可能是每个人的轨迹路线了。</p><p>　　其实，对于每个个体来讲，体验一遍生命我认为就是其存在的意义，不管如何，这个世界有你存在的痕迹，到过，经历过，了解过，何其不是一种幸运，不管出生前的你处于什么，死亡后的你处于什么，你在这个起点与终点之间走过了一段路，感受自我与周遭世界的一切，那便是对于个体来讲存在的最大意义，放平心态，去感受生命的美好，感受世界带给你的风景，是我们作为人来讲最幸运的一种能力了。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们对待自己的态度</title>
      <link href="/2018/06/24/%E6%88%91%E4%BB%AC%E5%AF%B9%E5%BE%85%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%81%E5%BA%A6/"/>
      <url>/2018/06/24/%E6%88%91%E4%BB%AC%E5%AF%B9%E5%BE%85%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%81%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>　　一个人的个性越独特、越具价值和意义，那么，他就越有必要不时地认清自己生命总体发展的大致脉络和自己的计划，为此必须要踏上认识自己的道路，清楚自己的首要和真正的意愿——这些对于他的幸福而言是至关重要的东西，然后对于何者排在第二和第三位置必须心中有数。同时他也应该大致明白自己应该从事何种职业、需要扮演何种角色以及自己与这个世界的关系。如果一个人具备非凡的个性，那么，对自己的生命计划有一个大致的了解，能够比任何一切都更有效地增强自己的勇气，振作、鼓足信心，激励自己行动起来，避免走弯路。</p><p>　　只有登上峰顶才能够回头总体，连贯的看到自己所走过的迂回曲折的道路，同样，只有当我们度过了生命中的一段时间，或者在我们整体生命终结的时候，我们才能把我们做的事、业绩真正联系起来，包括其中的因果关联，甚至才能了解到它们的价值。只要我们置身其中，那我们的行事就只能总是遵循我们那固定不变的性格构成，受着动机的左右和我们能力的制约。由此可见，我们的行事自始至终都有其必然性。我们在每一刻都做着我们在那一刻认为合理和适当的事情，只有事后的结果才让我们看清到底发生了什么事；对事情整体的惠顾才使我们明白事情的如何和为什么。</p><p>　　人生的智慧的重要一点就是在关注现在和计划将来这两者之间达致恰到好处的平衡，这样，现在与将来才不至于互相干扰。许多人太过沉迷现在，这些是无忧无虑、漫不经心的人；也有的人则更多地活在将来，他们则是谨小甚微、忧心忡忡的杞人。人们很少能够在处理现在和将来两者当中把握一个恰到好处的尺度。那些以希望和努力生活在将来的人眼睛盯着前面，不耐烦地等待将要发生的事情，仿佛将来的事情才会为他们带来真正的幸福。在这期间，他们却对现在不予理会、不加咀嚼，听任现时匆匆逝去。</p><p>　　我们应该愉快地迎接现时此刻，从而有意识地享受每一可忍受的、没有直接烦恼和痛苦的短暂时光，也就是说，不要由于在过去我们的希望落空现在就变得忧郁寡欢，或者为了将来操心伤神以致和败坏现时。</p><p>　　对已经发生的</p><p>　　无论事情多么悲痛，我们必须让过去的事情成为过去，或许我们难以做到这一点，但我们必须降伏我们的乖僻心情。</p><p>　　对将来的事情</p><p>　　在上帝的安排之中。</p><p>　　应该把每一天都视为一段特别的生活。</p><p>　　我们只能为那些肯定发生的灾祸忧心，对于不可肯定的，我们必须养成习惯，把并不肯定发生的灾祸视为永远不会发生。</p><p>　　我们的安宁越少受到担忧和害怕的打扰，那它就越会被我们的愿望、欲念和期待所刺激。只有当人挣脱了所有各种可能的期望，从而返回赤裸和冰冷的存在本身，人才能领会到精神上的安宁，而精神的安宁却是幸福的构成基础。如果人要享受现时，乃至整个一生，精神的安宁是必不可少的。我们应该永远记住今天只有一次，它不会再来。但在我们的想象中，今天又在明天重现。其实明天又是另外的一天，它也只来一次。在我们患病、困顿的时候，每当念及在这之前没有疾病和痛苦的时光，就陡然让人心生羡慕——那些美好的日子就犹如不曾得到我们珍惜的朋友，它们简直就是失去了的天堂。在健康、美好的日子里，这种情形应被我们牢记在心，这样我们就会倍加珍惜和享受此刻的好时光。</p><p>　　我们的视线、活动和接触的范围越狭窄，我们就越幸福；范围圈子越大，我们感受的焦虑或者担忧就越多。因为随着这一范围圈子的扩大，我们的愿望、恐惧、担忧也就相应增加。痛苦是肯定的，幸福是否定的。我们感受到欢乐还是痛苦，归根到底取决于我们意识的内涵。我们的一生中，我们关系和目标的范围总是不断伸展。在童年时期，我们的视野只局限于周围的环境和狭窄的关系。到了青年，视野明显扩大；进入成年期，我们的整个生命轨迹，甚至最遥远的联系、别的国家和民族都被纳入我们的视线之内；局限制约有助于增进我们的幸福，原因就在于意欲受到的刺激越少，我们的痛苦也就越少。我们的生活关系应尽可能的简单，越少感觉到生活，并因此更少地感觉到生活的重负，重负本来就是生活的本质。这样生活流淌就像一条波澜不惊、旋涡不起的小溪。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 理哲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存与DB数据操作问题</title>
      <link href="/2018/05/28/%E7%BC%93%E5%AD%98%E4%B8%8EDB%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/28/%E7%BC%93%E5%AD%98%E4%B8%8EDB%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>　　更新数据时，先删除缓存再更新DB，还是先更新DB再删除缓存。</p><h4 id="先删除缓存再更新DB"><a href="#先删除缓存再更新DB" class="headerlink" title="先删除缓存再更新DB"></a>先删除缓存再更新DB</h4><p>　　出现脏数据的概率较大，假设系统存在两条线程，一条是查询，一条是更新，当更新时，先删除缓存，此时查询线程不能命中缓存，去查库，此时load的是旧数据，然后将旧数据缓存，更新线程此时才更新数据库。这样很大的概率缓存是脏数据。</p><h4 id="先更新DB再删除缓存"><a href="#先更新DB再删除缓存" class="headerlink" title="先更新DB再删除缓存"></a>先更新DB再删除缓存</h4><p>　　产生脏数据的概率低，同样是上个例子两条线程，当更新DB时，查询线程查的是旧数据，此时删除缓存，下次查询则会去查库，保证新数据，不会影响后面的数据。这种情况产生脏数据的情形：查询线程命中不了缓存，去查库，此时更新操作删除缓存，尔后查询线程load旧数据进缓存，这才造成脏数据。出现的条件在于查库线程在更新操作之前，且在更新线程删除缓存之后load数据进缓存。条件比较苛刻，可以忽略。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2018/05/27/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/05/27/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>定义</strong></p><blockquote><p>外部与一个子系统的通信通过一个统一的外观对象进行，为一组接口提供一个统一的界面，外部与其只通过这个抽象的接口，隐藏背后的复杂性。</p></blockquote><a id="more"></a><p><img src="/assets/blog_img/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png"></p><p><strong>解决场景</strong></p><p>　　一般业务包含一系列复杂的子逻辑，需要调用各个子服务的接口才能完成既定的业务需求，为了让调用方可以透明调用且无需了解其背后的逻辑链路，通过封装一个一致的门面对象，提供必要的接口参数即可。</p><p>　　如下单功能，我们需要保存用户的下单记录，发送物流，保存订单这系列操作，我们可以封装一个订单接口，对外提供下单的接口，剩下的逻辑放在其中去做。调用方无需了解。</p><p><strong>代码</strong></p><p><strong>门面接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>门面实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">  UserService userService;</span><br><span class="line">  DistribuService distribuService;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    userService.saveBuyRecord();</span><br><span class="line">    distribuService.distriPackage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    OrderService service = <span class="keyword">new</span> OrderServiceImpl();</span><br><span class="line">    service.saveOrder();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka生产重复消费问题</title>
      <link href="/2018/04/11/kafka%E7%94%9F%E4%BA%A7%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/11/kafka%E7%94%9F%E4%BA%A7%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>生产环境中kafka出现消息积压的情况，消费者重复消费的情况</p></blockquote><p><strong>分析</strong></p><p>业务代码中消费端主要做消息存储与消息推送，http推数据。定位消费端的日志逻辑，发现http连接超时，应该是厂家设的推送地址有问题，导致超时。用的kafka版本是0.10.0，查阅了超时配置在10s，思路就改动消费端的逻辑，改成用线程池去异步推，把自动提交改成手动提交，解决了我的问题。</p><p>0.10.0以后的版本与消费者相关的几个重要参数</p><ul><li>enable.auto.commit 默认值true，表示消费者会周期性自动提交消费的offset</li><li>auto.commit.interval.ms 在enable.auto.commit 为true的情况下， 自动提交的间隔，默认值5000ms</li><li>max.poll.records 单次消费者拉取的最大数据条数，默认值</li><li>500 max.poll.interval.ms 默认值5分钟，表示若5分钟之内消费者没有消费完上一次poll的消息，那么consumer会主动发起离开group的请求</li></ul><p>使用0.10.0后的版本，重要的特性是多了个poll线程，一个心跳线程维持心跳，另一个poll线程拉取数据，当消费了拉取的数据后，消费端会重新poll。当超过指定时间没有poll，也即consume*条数&gt;poll的间隔时间就会发生rebalance</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2018/03/24/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/24/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个类代表另一个类的功能，创建现有对象的对象，向外提供功能接口。增加了中间层，目标对象职责明确，不同的代理类能够按照场景去做不同的额外业务操作，不影响被代理类的业务。</p></blockquote><p><img src="/assets/blog_img/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png"></p><a id="more"></a><p><strong>银行接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>银行业务处理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealBank</span> <span class="keyword">implements</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;存款&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>银行代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyBank</span> <span class="keyword">implements</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> RealBank realBank;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">riskCaculate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;风险评估&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">saveMoney</span><span class="params">()</span></span>&#123;            </span><br><span class="line">    riskCaculate();</span><br><span class="line">    realBank.saveMoney();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Bank bank = <span class="keyword">new</span> ProxyBank();</span><br><span class="line">bank.saveMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssr &amp; ignite 搭建</title>
      <link href="/2018/02/26/ssr-ignite-%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/02/26/ssr-ignite-%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="shadowsocks安装"><a href="#shadowsocks安装" class="headerlink" title="shadowsocks安装"></a>shadowsocks安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><blockquote><p>编辑：vi /etc/shadowsocks.json</p><p>启动：/etc/init.d/shadowsocks start</p><p>停止：/etc/init.d/shadowsocks stop</p><p>重启：/etc/init.d/shadowsocks restart</p><p>状态：/etc/init.d/shadowsocks status</p><p>卸载：./shadowsocks-go.sh uninstall</p></blockquote><h4 id="bbr安装"><a href="#bbr安装" class="headerlink" title="bbr安装"></a>bbr安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">确认bbr开启</span></span><br><span class="line">lsmod | grep bbr</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="SSR安装"><a href="#SSR安装" class="headerlink" title="SSR安装"></a>SSR安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git </span><br><span class="line">yum --enablerepo=extras install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line"></span><br><span class="line">git clone https://github.com/hao35954514/shadowsocksR-b.git</span><br><span class="line"></span><br><span class="line">cd shadowsocksR-b/ </span><br><span class="line">bash initcfg.sh</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/API_INTERFACE = &#x27;sspanelv2&#x27;/API_INTERFACE = &#x27;mudbjson&#x27;/&quot; userapiconfig.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用说明:</p><p>python mujson_mgr.py -a|-d|-e|-c|-l [选项( -u|-p|-k|-m|-O|-o|-G|-g|-t|-f|-i|-s|-S )]</p><p>操作:</p><p>-a ADD        添加 用户</p><p>-d DELETE      删除 用户</p><p>-e EDIT       编辑 用户</p><p>-c CLEAR       清零 上传/下载 已使用流量</p><p>-l LIST       显示用户信息 或 所有用户信息</p><p>选项:</p><p>-u USER       用户名</p><p>-p PORT       服务器 端口</p><p>-k PASSWORD     服务器 密码</p><p>-m METHOD      服务器 加密方式，默认: aes-128-ctr</p><p>-O PROTOCOL     服务器 协议插件，默认: auth_aes128_md5</p><p>-o OBFS       服务器 混淆插件，默认: tls1.2_ticket_auth_compatible</p><p>-G PROTOCOL_PARAM  服务器 协议插件参数，可用于限制设备连接数，-G 5 代表限制5个</p><p>-g OBFS_PARAM    服务器 混淆插件参数，可省略</p><p>-t TRANSFER     限制总使用流量，单位: GB，默认:838868GB(即 8PB/8192TB 可理解为无限)</p><p>-f FORBID      设置禁止访问使用的端口</p><p>​            – 例如：禁止25,465,233~266这些端口，那么这样写: -f “25,465,233-266”</p><p>-i MUID       设置子ID显示（仅适用与 -l 操作）</p><p>-s value       当前用户(端口)单线程限速，单位: KB/s(speed_limit_per_con)</p><p>-S value       当前用户(端口)端口总限速，单位: KB/s(speed_limit_per_user)</p><p>一般选项:</p><p>-h, –help      显示此帮助消息并退出</p><p>多用户的本地JSON数据库文件位置：shadowsocksR-b/mudb.json</p></blockquote><blockquote><p>#添加用户</p><p>python mujson_mgr.py -a -u fuck -p 8989 -k panzer1230 -m aes-256-cfb -O auth_aes128_md5 -G 10 -o tls1.2_ticket_auth -s 10000 -S 10000 -t 10</p><p>#编辑用户</p><p>python mujson_mgr.py -e -u lightime -t 100 #以用户修改</p><p>python mujson_mgr.py -e -p 3333 -t 100 #以端口修改</p><p>#删除用户</p><p>python mujson_mgr.py -d -u lightime #以用户为依据删除</p><p>python mujson_mgr.py -d -p 3333 #以端口为依据删除</p><p>#其他操作</p><p>python mujson_mgr.py -l #查看所有用户信息</p><p>python mujson_mgr.py -l -u lightime #查看单个用户信息(包括流量使用情况)</p><p>python mujson_mgr.py -c -u lightime #用户使用流量清零</p><p>#服务端控制</p><p>./run.sh #后台运行 但不记录日志</p><p>./logrun.sh #后台运行 且 记录日志</p><p>./tail.sh #查看日志./stop.sh #停止服务端</p></blockquote><h4 id="go-ignite"><a href="#go-ignite" class="headerlink" title="go-ignite"></a>go-ignite</h4><blockquote><p>go-ignite是一个基于Docker实现，由Golang开发的多账户SS(R)管理面板。<br>对用户来说，SS(R)服务被隔离在单独的容器中，安全高效，一键创建服务，简单方便。<br>对管理员，提供后台管理页面，能够快捷的管理用户服务，重置流量等。</p><p>用户面板：<br>支持创建 SS 和 SSR，但是仅提供自定义加密方式，且只能在初始化激活账号的时候，创建之后无法更改；<br>SS 支持 AEAD 系加密；<br>SSR 密码由随机生成、协议默认 auth_aes128_md5、混淆默认 tls1.2_ticket_auth_compatible。</p><p>管理面板：<br>无法更改用户端口、服务类型；<br>用户使用的端口并非随机创建。</p><p>因为需要使用 Docker，所以请使用非 OpenVZ 构架的 VPS 进行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line">service docker start</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">usermod -aG docker root</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;opt</span><br><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><h5 id="通过ip访问"><a href="#通过ip访问" class="headerlink" title="通过ip访问"></a>通过ip访问</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ignite:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ignite</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">goignite/ignite</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/root/ignite/data&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_ADDRESS=8.8.8.8</span></span><br><span class="line">      <span class="comment"># 此处修改为VPS IP，是展示在用户界面上的 SS/R 的连接 IP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_FROM=5001</span></span><br><span class="line">      <span class="comment"># SS/R 容器的起始可用端口范围，默认 5001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TO=6000</span></span><br><span class="line">      <span class="comment"># SS/R 容器的截止可用端口范围，默认 6000</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:5000&quot;</span></span><br><span class="line">      <span class="comment"># 用户界面访问端口，默认 80</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ignite-admin:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ignite-admin</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">goignite/ignite-admin</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/root/ignite/data&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AUTH_USERNAME=admin</span></span><br><span class="line">      <span class="comment"># 管理员用户名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AUTH_PASSWORD=admin_password</span></span><br><span class="line">      <span class="comment"># 管理员密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Auth_SECRET=ignite2017</span></span><br><span class="line">      <span class="comment"># 生成 JWT Token 的密钥，随便修改</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8000&quot;</span></span><br><span class="line">      <span class="comment"># 管理界面访问端口，默认 8080</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h5 id="通过域名访问（中文为了说明，使用时请删除）"><a href="#通过域名访问（中文为了说明，使用时请删除）" class="headerlink" title="通过域名访问（中文为了说明，使用时请删除）"></a>通过域名访问（中文为了说明，使用时请删除）</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx-proxy:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-proxy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jwilder/nginx-proxy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="comment"># 访问端口，可以无需修改</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/tmp/docker.sock:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ignite:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ignite</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">goignite/ignite</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/root/ignite/data&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_ADDRESS=8.8.8.8</span></span><br><span class="line">      <span class="comment"># 此处修改为 VPS IP，是展示在用户界面上的 SS/R 的连接 IP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_FROM=5001</span></span><br><span class="line">      <span class="comment"># SS/R 容器的起始可用端口范围，默认 5001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TO=6000</span></span><br><span class="line">      <span class="comment"># SS/R 容器的截止可用端口范围，默认 6000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_PORT=5000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_HOST=domain.com</span></span><br><span class="line">      <span class="comment"># 用户面板的访问域名</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ignite-admin:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ignite-admin</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">goignite/ignite-admin</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/root/ignite/data&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AUTH_USERNAME=admin</span></span><br><span class="line">      <span class="comment"># 管理员用户名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AUTH_PASSWORD=admin_password</span></span><br><span class="line">      <span class="comment"># 管理员密码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Auth_SECRET=ignite2017</span></span><br><span class="line">      <span class="comment"># 生成 JWT Token 的密钥，随便修改</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_PORT=8000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">VIRTUAL_HOST=admin.domain.com</span></span><br><span class="line">      <span class="comment"># 管理面板的访问域名</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;opt</span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br><span class="line"># 运行</span><br><span class="line">docker-compose down</span><br><span class="line"># 停止</span><br><span class="line">docker-compose pull</span><br><span class="line"># 更新</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> ignite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2018/02/14/vim/"/>
      <url>/2018/02/14/vim/</url>
      
        <content type="html"><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p><strong>移动光标</strong></p><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>h</td><td>左移动</td></tr><tr><td>j</td><td>下移动</td></tr><tr><td>k</td><td>上移动</td></tr><tr><td>l</td><td>右移动</td></tr><tr><td>ctrl+d</td><td>下移动半页</td></tr><tr><td>ctrl+u</td><td>上移动半页</td></tr><tr><td>gg</td><td>移动到第一行</td></tr><tr><td>G</td><td>移动到最后一行</td></tr><tr><td>nG</td><td>移动到第n行</td></tr><tr><td>n+<space></td><td>右移n个字符</td></tr><tr><td>n+<enter></td><td>下移动n行</td></tr></tbody></table><a id="more"></a><p><strong>搜索</strong></p><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>/word</td><td>向光标下搜索</td></tr><tr><td>?word</td><td>向光标上搜索</td></tr></tbody></table><p><strong>删除、复制与粘贴</strong></p><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>x</td><td>向后删除一个字符</td></tr><tr><td>nx</td><td>向后删除n个字符</td></tr><tr><td>dd</td><td>删除游标那正行</td></tr><tr><td>ndd</td><td>删除光标下n行</td></tr></tbody></table><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>yy</td><td>复制那一行</td></tr><tr><td>nyy</td><td>复制光标下n行</td></tr></tbody></table><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>p</td><td>将已复制的数据贴到光标下一行</td></tr><tr><td>P</td><td>将已复制的数据贴到光标上一行</td></tr></tbody></table><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>u</td><td>复原前一个动作（撤回）</td></tr><tr><td>ctrl+r</td><td>重做上一个动作</td></tr></tbody></table><p><strong>切换到输入模式</strong></p><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>i</td><td>目前光标所在处输入</td></tr><tr><td>I</td><td>从光标所在行的非空格字符输入</td></tr><tr><td>a</td><td>从目前光标所在的下一个字符开始输入</td></tr><tr><td>A</td><td>从目前光标所在的最后一个字符开始输入</td></tr><tr><td>o</td><td>从目前光标所在的行的下一行开始输入</td></tr><tr><td>O</td><td>从目前光标所在的行的上一行开始输入</td></tr></tbody></table><p><strong>命令模式切换到底线命令模式</strong></p><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>:w</td><td>编辑的数据写入硬盘</td></tr><tr><td>:w!</td><td>强制写入硬盘，无权限还是写不进</td></tr><tr><td>:q</td><td>离开vi</td></tr><tr><td>:q!</td><td>修改过不想保存，强制离开vi</td></tr><tr><td>:wq</td><td>保存后离开</td></tr><tr><td>:w [filename]</td><td>另存为</td></tr></tbody></table><p><strong>vim环境的变更</strong></p><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 生产效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka消息队列</title>
      <link href="/2018/02/11/kafka%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2018/02/11/kafka%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在项目中使用到了kafka中间件，作为消费队列，下文对该组件的一些概念和特性做一些概括性总结。</p></blockquote><h1 id="消息队列作用"><a href="#消息队列作用" class="headerlink" title="消息队列作用"></a>消息队列作用</h1><p>解耦：降低系统间的耦合度，方便日后扩展</p><p>削峰：通过异步处理消息，并且提供多消费端来消费消息，达到削峰的作用</p><p>冗余</p><p>可恢复</p><h1 id="Kafka特点"><a href="#Kafka特点" class="headerlink" title="Kafka特点"></a>Kafka特点</h1><p>Kakfa是一个分布式流处理平台，特点是高性能、分布式、高吞吐，底层写消息是顺序写磁盘，因此写入和读取速度非常快。大部分用于大数据处理平台和日志处理，其出身的原因也是LinkIn公司为了处理海量日志</p><p>支持消息模型</p><ul><li><p>队列模型</p><p>同一个消息会被多个消费者一个个处理，不会重复处理</p></li><li><p>发布订阅模型</p><p>同一个消息会被所有消费者消费，类似通知</p></li></ul><h1 id="组件概念"><a href="#组件概念" class="headerlink" title="组件概念"></a>组件概念</h1><p>Producer：消息生产者</p><p>Consumer：消息消费者</p><p>Broker：实例，一般可以理解为服务器，一台服务器部署一个broker</p><p>Topic：主题，消息是通过主题作为载体发送到队列中的</p><p>Partition：分区，主题下的分区概念，分区是可以在多个broker中，消息是写到多个partition上，每个partition上的数据是有序的，但多个消息间是无序的，若要保证消息有序消费，则可以设置一个topic一个partition</p><h1 id="消费模型"><a href="#消费模型" class="headerlink" title="消费模型"></a>消费模型</h1><p>topic下的多个partition可以分布在多个broker中，一般N个partition分布在N个broker上，或者N个partition分布在M个broker，尽量保证N&lt;M，并且消费者数量&lt;=N，多余的消费者是拿不到partition的</p><h2 id="副本机制"><a href="#副本机制" class="headerlink" title="副本机制"></a>副本机制</h2><p>Kakfa提供副本机制来保证高可用，副本不用于消费，仅用来冗余数据。比如一个topic有N个partition，分布在N个broker上。一个partition可以有多个副本，副本间有一个leader和多个follower，读写都是在leader中，follower和leader会保持数据同步。假设topic有3个partition设置3个副本，则第一个partition的数据会复制到2、3上，最简单的策略就是2存储1的数据副本，3存储2的数据副本，当某个broker宕了，则保证另外的broker中有数据冗余，这就保证了消息能继续消费，保证高可用</p><p><strong>存在情况</strong> </p><p> 假设leader所在的broker挂了，其他的follower还来不及同步消息，导致数据丢失，这种情况可以设置acks=all，表示当所有follower都收到该消息才算发送成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2017/08/13/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/08/13/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>对比简单工厂模式集中工厂类生产，工厂模式将对象的创建交给相应的子类工厂，延迟创建，降低扩展对工厂接口的影响。这里有个要求就是工厂创建对象的细节不依赖于客户端。</p></blockquote><h1 id="对象关系"><a href="#对象关系" class="headerlink" title="对象关系"></a>对象关系</h1><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类</td><td>生产的具体产品</td></tr><tr><td>抽象工厂</td><td>工厂抽象类</td><td>定义工厂的生产行为</td></tr><tr><td>具体的工厂</td><td>工厂抽象类的具体实现</td><td>根据参数创建不同的具体产品</td></tr></tbody></table><a id="more"></a><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p><img src="/assets/blog_img/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="工厂模式UML"></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>　　抽象对象保持不变，我们需要把工厂抽象化，让子类工厂去实现抽象工厂，提供对象返回，这么做下来，当我们需要哪个对象，就调用哪个子类工厂就行了。</p><p><strong>产品抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体产品类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产产品A；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产产品B；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FactoryA implements Factory &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FactoryB implements Factory &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Factory fa = <span class="keyword">new</span> FactoryA();</span><br><span class="line">    Product a = f.getProduct();</span><br><span class="line">    </span><br><span class="line">    Factory fb = <span class="keyword">new</span> FactoryB();</span><br><span class="line">    Product b = f.getProduct();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优点：通过对应的工厂对象完成对象的创建，对比简单工厂模式将对象的创建从工厂类中解耦出来，易扩展。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术Cookie与Session</title>
      <link href="/2017/08/06/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AFCookie%E4%B8%8ESession/"/>
      <url>/2017/08/06/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AFCookie%E4%B8%8ESession/</url>
      
        <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>　　什么是会话？按照理解就是人与人之间建立的一次谈话称为会话，放到Web的语义下就是浏览器与服务端的一次数据交互。我们知道Http协议是无状态的，一次连接建立后，数据交互完就结束了，第二次请求如果浏览器的请求不带点标识，服务端是无从知道是哪个客户发消息来，这也就引出我们的主题，Web的会话跟踪技术—Cookie与Session。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>　　Cookie意为饼干，是一种客户端技术，当浏览器访问服务端时，服务端可以向响应Cookie中写入想要的内容，客户端就会保留相应的Cookie内容，在其后的请求中都会带上相应的内容，也就可以带上我们的用户标识。</p><h4 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h4><ul><li>public Cookie(String name,String value)</li><li>setValue与getValue方法</li><li>setMaxAge与getMaxAge方法</li><li>setPath与getPath方法</li><li>setDomain与getDomain方法</li><li>getName方法</li></ul><h4 id="不可跨域名"><a href="#不可跨域名" class="headerlink" title="不可跨域名"></a>不可跨域名</h4><p>　　Cookie是不能跨域名的，也就是a网站的Cookie是不能发到b网站去的。</p><h4 id="有效时间"><a href="#有效时间" class="headerlink" title="有效时间"></a>有效时间</h4><p>　　使用setMaxAge来设置过期时间，如果是整数，则表示在MaxAge秒前有效，会写入磁盘；如果是负数，则表明Cookie是临时的，在浏览器关闭前是有效的。</p><h4 id="没有修改和删除功能"><a href="#没有修改和删除功能" class="headerlink" title="没有修改和删除功能"></a>没有修改和删除功能</h4><p>　　修改就是用新值去覆盖旧值。</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>　　domain属性决定了Cookie的域名，规定为”.域名”。</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>　　是一种服务端技术，服务端会记录当前用户的相关信息，返回一个sessionId给客户端，那么下个请求就以sessionId唯一关联当前用户身份信息。</p><h4 id="常见方法-1"><a href="#常见方法-1" class="headerlink" title="常见方法"></a>常见方法</h4><ul><li>long getCreationTime();【获取Session被创建时间】</li><li><strong>String getId();【获取Session的id】</strong></li><li>long getLastAccessedTime();【返回Session最后活跃的时间】</li><li>ServletContext getServletContext();【获取ServletContext对象】</li><li><strong>void setMaxInactiveInterval(int var1);【设置Session超时时间】</strong></li><li><strong>int getMaxInactiveInterval();【获取Session超时时间】</strong></li><li><strong>Object getAttribute(String var1);【获取Session属性</strong>】</li><li>Enumeration getAttributeNames();【获取Session所有的属性名】</li><li><strong>void setAttribute(String var1, Object var2);【设置Session属性】</strong></li><li><strong>void removeAttribute(String var1);【移除Session属性】</strong></li><li><strong>void invalidate();【销毁该Session】</strong></li><li>boolean isNew();【该Session是否为新的】</li></ul><h4 id="生命周期与有效期"><a href="#生命周期与有效期" class="headerlink" title="生命周期与有效期"></a>生命周期与有效期</h4><p>　　用户首次访问服务端servlet则会创建session对象。只要用户持续访问，服务端都会更新session的最后访问时间，而为了防止内存溢出，会把长时间没有访问的session干掉。默认的超时时间是30min，可以修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2017/07/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/07/21/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>相比工厂模式，抽象工厂可以生产多类产品。抽象出产品类，比如电视类、空调类两类别产品，具体的产品子类对应子品牌，如海尔的电视，三星的电视或海尔的空调，三星的空调。工厂具体类主要包含需要生产的产品的组合，需要组合时只需扩展一个新的工厂具体类。</p></blockquote><a id="more"></a><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><blockquote><p><img src="/assets/blog_img/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="UML图"></p></blockquote><blockquote><p>缺点：当添加新的产品时，需要修改抽象工厂的接口，其子类都需要修改。</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>　　怎么在一个工厂里组合生产多种产品呢？首先将多种类型的产品抽象化，创建对应产品的实现，创建顶层工厂抽象定义多种产品类族的工厂的抽象方法，这样顶层就决定了多种类族产品的组合，具体的产品有具体的抽象工厂。最终的效果就是我们能通过对应工厂获得对应的各种产品类</p><p><strong>抽象产品类别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCatoryA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCatoryB</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">catch</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体产品</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductConcreteAa</span> <span class="keyword">extends</span> <span class="title">ProductCatoryA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产类别A的具体产品品牌a；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductConcreteAb</span> <span class="keyword">extends</span> <span class="title">ProductCatoryA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产类别A的具体产品品牌b；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductConcreteBa</span> <span class="keyword">extends</span> <span class="title">ProductCatoryA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产类别B的具体产品品牌b；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductConcreteBb</span> <span class="keyword">extends</span> <span class="title">ProductCatoryA</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产类别B的具体产品品牌b；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> Factory &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ProductCatoryA <span class="title">makeCatoryA</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ProductCatoryB <span class="title">makeCatoryB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FactoryA implements Factory &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ProductCatoryA <span class="title">makeCatoryA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProductConcreteAa();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> ProductCatoryB <span class="title">makeCatoryB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProductConcreteBa();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FactoryB implements Factory &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ProductCatoryA <span class="title">makeCatoryA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProductConcreteAb();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> ProductCatoryB <span class="title">makeCatoryB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ProductConcreteBb();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Factory fa = <span class="keyword">new</span> FactoryA();</span><br><span class="line">    ProductCatoryA a = fa.makeCatoryA();</span><br><span class="line">    ProductCatoryB b = fa.makeCatoryB();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Factory fb = <span class="keyword">new</span> FactoryB();</span><br><span class="line">    ProductCatoryA aa = fb.makeCatoryA();</span><br><span class="line">    ProductCatoryB bb = fb.makeCatoryB();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　可以看出来如果我们要加入新的产品族，我们就需要在顶层工厂加入新的工厂方法，那么每个具体的工厂需要去实现新的产品的工厂方法，如果遇到需求变化大的情况，扩展起来比较麻烦，所以抽象工厂模式适合少变的场景</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2017/04/26/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/04/26/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>通过一个工厂类的静态方法根据需要生产需要的对象，客户端直接调用工厂类，而不需要知道创建的细节。</p></blockquote><h1 id="对象关系"><a href="#对象关系" class="headerlink" title="对象关系"></a>对象关系</h1><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类</td><td>生产的具体产品</td></tr><tr><td>工厂</td><td>被客户端调用</td><td>根据参数创建不同的具体产品</td></tr></tbody></table><a id="more"></a><h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><p><img src="/assets/img/%E7%AE%80%E5%8D%95%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%BC%8FUML.png" alt="UML图"></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>　　该模式的思路，首先定义一个抽象对象，定义相关的抽象方法，子对象通过继承实现抽象方法，实现工厂类，在工厂类提供一个静态对外调用，定义创建对象对应的参数，然后根据参数条件创建对应对象。</p><p><strong>产品抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具体产品类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产产品A；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//生产产品B；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">make</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(type)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Factory f = <span class="keyword">new</span> Factory;</span><br><span class="line">    f.make(<span class="string">&quot;A&quot;</span>).show();</span><br><span class="line">    f.make(<span class="string">&quot;B&quot;</span>).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点：当需要添加或修改产品时，需要修改工厂类的逻辑，当类的数量多时，不容易维护。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　使用简单工厂模式创建对象，所有创建对象的逻辑都放在了工厂静态方法内，客户端传入对应的对象类型或者参数来让工厂输出对象，缺点就是所有的创建逻辑都在工厂方法内导致以后如果扩展新对象需要修改工厂方法，当对象增多之后，不容易维护。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>count的用法</title>
      <link href="/2017/02/17/count%E7%9A%84%E7%94%A8%E6%B3%95/"/>
      <url>/2017/02/17/count%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>*<em>count(</em>)、count(id)、count(1)、count(字段)的区别，针对MySQL**</p><p>count(id)，InnoDB会遍历整张表，把每行的id取出来，返回给server层，判断不为空，按行累计。</p><p>count(1)，InnoDB会遍历整张表，每行放数字1进去，返回给server层，判断不为空，按行累计。</p><p>count(字段)</p><ul><li>如果字段定义为not null，一行行取出这个字段，判断不能为null，按行累加。</li><li>如果字段定位为null，那么取的时候需要判断一下，不为null才累加。</li></ul><p>count(*)，不会取全部字段，因为肯定不是null，直接按行累加。</p><blockquote><p>效率：count(字段)&lt;count(主键id)&lt;count(1)≈count(<em>)。尽量使用count(\</em>)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2017/02/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/02/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>只有一个实例，类只创建一个对象，这个类提供一种访问其唯一对象的方式。</p></blockquote><p>懒汉式：只有实例用到的时候才会去加载，加载时判断是否生成实例，没有就立刻创建并返回，有则返回已有的唯一实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>饿汉式：实例在需要使用之前已经加载好了，用空间换取时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton instance = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检锁：保证线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLockSingleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleLockSingleton instance ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">DoubleLockSingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleLockSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//保证只有一条线程能创建</span></span><br><span class="line"><span class="keyword">synchronized</span>(DoubleLockSingleton.class)&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">instance=<span class="keyword">new</span> DoubleLockSingleton();</span><br><span class="line"><span class="comment">//jvm字节码指令分3步</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、创建引用</span></span><br><span class="line"><span class="comment">2、在堆上分配内存空间</span></span><br><span class="line"><span class="comment">3、创建实例，引用与实例进行关联</span></span><br><span class="line"><span class="comment">由于jvm的字节码执行时会根据需要进行优化，无法保证2和3的顺序，有可能引用返回的实例是空对象，因此加入volatile保证jvm字节码执行的有序性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类生成单例：当需要用到单例时，jvm会调用静态内部类的加载，并初始化该实例，jvm能保证只初始化一次，因此是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">retrun SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 技术学习 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
