<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cary Tseng</title>
  <icon>https://www.gravatar.com/avatar/bac9080800c06a1b685d5f013601b128</icon>
  
  <link href="https://dogfun.top/atom.xml" rel="self"/>
  
  <link href="https://dogfun.top/"/>
  <updated>2022-04-02T03:44:08.972Z</updated>
  <id>https://dogfun.top/</id>
  
  <author>
    <name>CaryTseng</name>
    <email>carytseng.kira@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>canal</title>
    <link href="https://dogfun.top/2022/03/20/middleware/canal/"/>
    <id>https://dogfun.top/2022/03/20/middleware/canal/</id>
    <published>2022-03-20T02:14:13.000Z</published>
    <updated>2022-04-02T03:44:08.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h1><blockquote><p>工作遇到将mysql转储存到es的需求，提供查询性能，常规做法可用mq，但过于麻烦，用canal可以直接基于binlog进行数据同步，基于监听器编写业务即可</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>基于日志增量订阅和消费的业务包括</p><ul><li>数据库镜像</li><li>数据库实时备份</li><li>索引构建和实时维护(拆分异构索引、倒排索引等)</li><li>业务 cache 刷新</li><li>带业务逻辑的增量数据处理</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL slave ，向 MySQL master 发送dump 协议</li><li>MySQL master 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li><li>canal 解析 binary log 对象(原始为 byte 流)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;canal&quot;&gt;&lt;a href=&quot;#canal&quot; class=&quot;headerlink&quot; title=&quot;canal&quot;&gt;&lt;/a&gt;canal&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;工作遇到将mysql转储存到es的需求，提供查询性能，常规做法可用mq，但过于麻烦，用ca</summary>
      
    
    
    
    <category term="middleware" scheme="https://dogfun.top/categories/middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://dogfun.top/2022/03/03/middleware/Elasticsearch/"/>
    <id>https://dogfun.top/2022/03/03/middleware/Elasticsearch/</id>
    <published>2022-03-03T01:25:02.000Z</published>
    <updated>2022-03-30T01:09:02.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建-docker"><a href="#环境搭建-docker" class="headerlink" title="环境搭建(docker)"></a>环境搭建(docker)</h2><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 -d  -e &quot;discovery.type=single-node&quot; --name elasticsearch \</span><br><span class="line">-v /Users/carytseng/envir/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /Users/carytseng/envir/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /Users/carytseng/envir/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line"> docker.elastic.co/elasticsearch/elasticsearch:7.12.0 </span><br></pre></td></tr></table></figure><h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --link elasticsearch:elasticsearch --name kibana -p 5601:5601 -d docker.elastic.co/kibana/kibana:7.12.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -it -d -e ELASTICSEARCH_URL=http://10.91.22.6:9200 --name kibana --restart=always -p 5602:5601 kibana:6.5.0</span><br></pre></td></tr></table></figure><h4 id="使用docker-compose启动"><a href="#使用docker-compose启动" class="headerlink" title="使用docker-compose启动"></a>使用docker-compose启动</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yml文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment">#es</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="comment">#restart: always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:6.5.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=elk</span> <span class="comment">#设置集群名称为elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span> <span class="comment">#以单一节点模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="comment">#设置使用jvm内存大小</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es/plugins:/usr/share/elasticsearch/plugins</span> <span class="comment">#将ik的插件挂在到这个目录下</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es/logs:/user/share/elasticsearch/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="comment">#restart: always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:6.5.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment">#kibana在elasticsearch启动之后再启动</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://elasticsearch:9200</span> <span class="comment">#设置访问elasticsearch的地址</span></span><br><span class="line">      <span class="attr">I18N_LOCALE:</span> <span class="string">zh-CN</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Index</strong>：Elasticsearch的Index相当于数据库的Table</p><p><strong>Type</strong>：这个在新的Elasticsearch版本已经废除（在以前的Elasticsearch版本，一个Index下支持多个Type–有点类似于消息队列一个topic下多个group的概念）</p><p><strong>Document</strong>：Document相当于数据库的一行记录</p><p><strong>Field</strong>：相当于数据库的Column的概念</p><p><strong>Mapping</strong>：相当于数据库的Schema的概念</p><p><strong>DSL</strong>：相当于数据库的SQL（给我们读取Elasticsearch数据的API）</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="查看集群所有索引"><a href="#查看集群所有索引" class="headerlink" title="查看集群所有索引"></a>查看集群所有索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/indices?v</span><br></pre></td></tr></table></figure><h3 id="创建索引并设置mapping"><a href="#创建索引并设置mapping" class="headerlink" title="创建索引并设置mapping"></a>创建索引并设置mapping</h3><ul><li><p>type:text:分词  keyword:不分词 都是字符串</p></li><li><p>analyzer:0-not_analyzed 1-ik_smart 2-ik_max_word 3-ik-index(自定义分词器)</p></li><li><p>search_analyzer:搜索时选择分词器</p></li></ul><p>最佳实践是索引使用ik_max_word最细粒度进行分词，搜索时使用ik_smart粗力度搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">put /uniresearch_project_info</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;projectName&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">          &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;keyword&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;principal&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">          &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;keyword&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;researchTags&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">          &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;keyword&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定制动态mapping模板"><a href="#定制动态mapping模板" class="headerlink" title="定制动态mapping模板"></a>定制动态mapping模板</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;dynamic_templates&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;string&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;match&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;date&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;date&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;match&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;object&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;match&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;long&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;match&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">              <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">                  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  设置mapping映射 动态模板，未映射的字段则根据模板来定义</span></span><br><span class="line">        builder.startArray(<span class="string">&quot;dynamic_templates&quot;</span>)</span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">&quot;string&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;match&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">//                    .field(&quot;match_mapping_type&quot;,&quot;string&quot;)</span></span><br><span class="line">                .field(<span class="string">&quot;match_mapping_type&quot;</span>, <span class="string">&quot;string&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;mapping&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;fields&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">&quot;date&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;match&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">//                    .field(&quot;match_mapping_type&quot;,&quot;string&quot;)</span></span><br><span class="line">                .field(<span class="string">&quot;match_mapping_type&quot;</span>, <span class="string">&quot;date&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;mapping&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;fields&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">&quot;long&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;match&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">//                    .field(&quot;match_mapping_type&quot;,&quot;string&quot;)</span></span><br><span class="line">                .field(<span class="string">&quot;match_mapping_type&quot;</span>, <span class="string">&quot;long&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;mapping&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;fields&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                .startObject()</span><br><span class="line">                .startObject(<span class="string">&quot;object&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;match&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment">//                    .field(&quot;match_mapping_type&quot;,&quot;string&quot;)</span></span><br><span class="line">                .field(<span class="string">&quot;match_mapping_type&quot;</span>, <span class="string">&quot;object&quot;</span>)</span><br><span class="line">                .startObject(<span class="string">&quot;mapping&quot;</span>)</span><br><span class="line">                .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;object&quot;</span>)</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject()</span><br><span class="line"></span><br><span class="line">                .endArray();</span><br></pre></td></tr></table></figure><h3 id="查看mapping"><a href="#查看mapping" class="headerlink" title="查看mapping"></a>查看mapping</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /uniresearch_project_info/_search</span><br></pre></td></tr></table></figure><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /uniresearch_project_info/doc/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;projectName&quot;: &quot;慢性病毒性乙型肝炎&quot;,</span><br><span class="line">  &quot;principal&quot;: &quot;吕丽云&quot;,</span><br><span class="line">  &quot;researchTags&quot;: [&quot;慢病管理&quot;, &quot;分级诊疗&quot;, &quot;筛查&quot;, &quot;呼吸系统疾病&quot;, &quot;哮喘&quot;, &quot;慢性阻塞性肺疾病&quot;, &quot;慢性咳嗽&quot;, &quot;支气管扩张&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询所有文档"><a href="#查询所有文档" class="headerlink" title="查询所有文档"></a>查询所有文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /uniresearch_project_info/_search</span><br></pre></td></tr></table></figure><h3 id="根据id查询文档"><a href="#根据id查询文档" class="headerlink" title="根据id查询文档"></a>根据id查询文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /uniresearch_project_info/doc/1?</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /uniresearch_project_info/doc/1?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;projectName&quot;: &quot;慢性病毒性乙型肝炎&quot;,</span><br><span class="line">  &quot;principal&quot;: &quot;吕丽云&quot;,</span><br><span class="line">  &quot;researchTags&quot;: [&quot;慢病管理&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete /uniresearch_project_info</span><br><span class="line"></span><br><span class="line">DELETE _all</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>text：会对字段进行分词，根据设定的分词器控制粒度</li><li>keyword：不分词即原字符串，主要用于模糊匹配或者等值查询<ul><li>如果字段即想分词也想用字符串匹配，可设定两个类型，查询时加上.keyword进行等值匹配</li></ul></li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>term：查询keyword类型，用于精确匹配。查询text类型若不知道分词器，会无法命中数据<ul><li>比如查text类型，关键词”Quick Foxes!”，该数据被分为[Quick,Foxes]，会出现无法命中</li><li>用关键词”Quick”，则能查出，因此对于模糊查询要用match查text类型的数据</li></ul></li><li>match：查询text类型，用于模糊查询</li></ul><h3 id="Nested"><a href="#Nested" class="headerlink" title="Nested"></a>Nested</h3><blockquote><p>es中object类型的数组会被扁平化，打破数组中对象属性的关联关系，需要定义nested即嵌套对象来处理数组，保证数组中的对象会被独立处理。</p></blockquote><h3 id="多层嵌套对象处理inner-hits"><a href="#多层嵌套对象处理inner-hits" class="headerlink" title="多层嵌套对象处理inner_hits"></a>多层嵌套对象处理inner_hits</h3><p>inner_hits是用于筛选出命中对象的对应属性，当层级过多时，条件中有多个inner_hits，需要使用name来防止覆盖问题</p><h2 id="SpringBoot集成Elasticsearch6-5"><a href="#SpringBoot集成Elasticsearch6-5" class="headerlink" title="SpringBoot集成Elasticsearch6.5"></a>SpringBoot集成Elasticsearch6.5</h2><h3 id="依赖pom文件"><a href="#依赖pom文件" class="headerlink" title="依赖pom文件"></a>依赖pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch:</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200</span></span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑剑锋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Elasticsearch配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022.03.01 18:01:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;elasticsearch.hosts:127.0.0.1:9200&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String hosts; <span class="comment">// 127.0.0.1:9200</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 高版本客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解析 hostlist 配置信息。假如以后有多个，则需要用 ， 分开</span></span><br><span class="line">        String[] split = hosts.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建 HttpHost 数组，其中存放es主机和端口的配置信息</span></span><br><span class="line">        HttpHost[] httpHostArray = <span class="keyword">new</span> HttpHost[split.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            String item = split[i];</span><br><span class="line">            httpHostArray[i] = <span class="keyword">new</span> HttpHost(item.split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>], Integer.parseInt(item.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]), <span class="string">&quot;http&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建RestHighLevelClient客户端</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(httpHostArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chinaunicom.medical.business.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollectionUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ObjectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Wrappers;</span><br><span class="line"><span class="keyword">import</span> com.carrotsearch.hppc.cursors.ObjectObjectCursor;</span><br><span class="line"><span class="keyword">import</span> com.chinaunicom.medical.business.constants.PortalConstants;</span><br><span class="line"><span class="keyword">import</span> com.chinaunicom.medical.business.dto.DataSetFieldCondition;</span><br><span class="line"><span class="keyword">import</span> com.chinaunicom.medical.business.entity.UniresearchProjectVisitAnswer;</span><br><span class="line"><span class="keyword">import</span> com.chinaunicom.medical.business.entity.UniresearchProjectVisitQuestion;</span><br><span class="line"><span class="keyword">import</span> com.chinaunicom.medical.business.enums.DataSetFieldInnerType;</span><br><span class="line"><span class="keyword">import</span> com.chinaunicom.medical.business.mapper.UniresearchProjectVisitQuestionMapper;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.create.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.get.GetIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.mapping.get.GetMappingsRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.delete.DeleteRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.support.master.AcknowledgedResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.update.UpdateResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.cluster.metadata.MappingMetaData;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.collect.ImmutableOpenMap;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.unit.TimeValue;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentFactory;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.*;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.exframework.support.common.entity.FilterCondition;</span><br><span class="line"><span class="keyword">import</span> org.exframework.support.common.entity.Page;</span><br><span class="line"><span class="keyword">import</span> org.exframework.support.common.entity.PageModel;</span><br><span class="line"><span class="keyword">import</span> org.exframework.support.common.entity.Pager;</span><br><span class="line"><span class="keyword">import</span> org.exframework.support.common.util.StrUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> es工具类封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 郑剑锋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@updateTime</span> 2022/3/18 08:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(EsUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UniresearchProjectVisitQuestionMapper uniresearchProjectVisitQuestionMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String STATUS = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indexs 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 创建成功,false创建失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createIndex</span><span class="params">(String... indexs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String index : indexs) &#123;</span><br><span class="line">            GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest();</span><br><span class="line">            request.indices(index);</span><br><span class="line">            <span class="keyword">if</span> (restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT)) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;index: &#123;&#125; exists&quot;</span>, index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//创建索引请求</span></span><br><span class="line">                CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(index);</span><br><span class="line">                <span class="comment">//设置mapping映射-实现字段分词,暂时没有装ik，暂时先注释</span></span><br><span class="line">                <span class="comment">//创建执行请求</span></span><br><span class="line">                CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj   对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 创建成功,false创建失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createIndex</span><span class="params">(String index, Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest();</span><br><span class="line">        request.indices(index);</span><br><span class="line">        <span class="keyword">if</span> (restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;索引:&#123;&#125;已存在&quot;</span>, index);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建索引请求</span></span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(index);</span><br><span class="line">        <span class="comment">//设置mapping映射-实现字段分词,暂时没有装ik，暂时先注释</span></span><br><span class="line">        XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; mappObj = getObjectToMap(obj);</span><br><span class="line">        builder.startObject();</span><br><span class="line">        <span class="comment">//properties固定</span></span><br><span class="line">        builder.startObject(<span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//设置字段</span></span><br><span class="line">            <span class="keyword">for</span> (String key : mappObj.keySet()) &#123;</span><br><span class="line">                builder.startObject(key);</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//设置字段类型</span></span><br><span class="line">                    builder.field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>) <span class="comment">//text:分词  keyword:不分词 都是字符串</span></span><br><span class="line">                            <span class="comment">//是否索引</span></span><br><span class="line">                            .field(<span class="string">&quot;index&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">                            <span class="comment">//插入时分词ik_smart</span></span><br><span class="line">                            <span class="comment">//分词器选择：0-not_analyzed 1-ik_smart 2-ik_max_word 3-ik-index(自定义分词器)</span></span><br><span class="line">                            .field(<span class="string">&quot;analyzer&quot;</span>, <span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;search_analyzer&quot;</span>, <span class="string">&quot;ik_smart&quot;</span>)</span><br><span class="line">                            .startObject(<span class="string">&quot;fields&quot;</span>)</span><br><span class="line">                            .startObject(<span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                            .field(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">                            .endObject()</span><br><span class="line">                            .endObject();</span><br><span class="line">                &#125;</span><br><span class="line">                builder.endObject();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        builder.endObject();</span><br><span class="line">        builder.endObject();</span><br><span class="line">        <span class="comment">//设置mapping映射</span></span><br><span class="line">        createIndexRequest.mapping(<span class="string">&quot;doc&quot;</span>, builder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建执行请求</span></span><br><span class="line">        CreateIndexResponse createIndexResponse = restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看索引是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true存在 false不存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">getIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest();</span><br><span class="line">        getIndexRequest.indices(index);</span><br><span class="line">        <span class="keyword">return</span> restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true删除成功 false删除失败或索引不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteIndex</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest(index);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AcknowledgedResponse delete = restHighLevelClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existMapping</span><span class="params">(String index)</span></span>&#123;</span><br><span class="line">        GetMappingsRequest getMappingsRequest = <span class="keyword">new</span> GetMappingsRequest();</span><br><span class="line">        getMappingsRequest.indices(index);</span><br><span class="line">        GetMappingsResponse getMappingResponse;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getMappingResponse = restHighLevelClient.indices().getMapping(getMappingsRequest, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ImmutableOpenMap&lt;String, ImmutableOpenMap&lt;String, MappingMetaData&gt;&gt; mappings = getMappingResponse.mappings();</span><br><span class="line">        <span class="keyword">for</span>(ObjectObjectCursor&lt;String, ImmutableOpenMap&lt;String, MappingMetaData&gt;&gt; indexEntry : mappings)&#123;</span><br><span class="line">            <span class="keyword">if</span>(indexEntry.value.isEmpty() )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  数据 可以为单个对象也可以为数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 插入成功 false插入失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insertBathData</span><span class="params">(String index, JSONArray data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//判断索引是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = getIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            createIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isEmpty(data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">&quot;15s&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">            JSONObject m = (JSONObject) data.get(i);</span><br><span class="line">            String id = (String) m.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            bulkRequest.add(<span class="keyword">new</span> IndexRequest(index).id(id).source(JSON.toJSONString(data.get(i)), XContentType.JSON).type(<span class="string">&quot;doc&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//是否失败 bulk.hasFailures()=false 代表成功</span></span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  数据 可以为单个对象也可以为数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 插入成功 false插入失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insertData</span><span class="params">(String index, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//判断索引是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = getIndex(index);</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            createIndex(index);</span><br><span class="line">        &#125;</span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(index);</span><br><span class="line"></span><br><span class="line">        indexRequest.timeout(<span class="string">&quot;1s&quot;</span>);      <span class="comment">// 设置超时时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将数据放入到请求中</span></span><br><span class="line">        indexRequest.source(JSON.toJSONString(data), XContentType.JSON).type(<span class="string">&quot;doc&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; obj = getObjectToMap(data);</span><br><span class="line">        String id = (String) obj.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(id)) &#123;</span><br><span class="line">            indexRequest.id(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 使用客户端发送请求</span></span><br><span class="line">        IndexResponse response = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//是否失败 bulk.hasFailures()=false 代表成功</span></span><br><span class="line">        <span class="keyword">return</span> STATUS.equals(response.status().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    esId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  修改后的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true修改成功 false修改失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateData</span><span class="params">(String index, String id, Object data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(index, <span class="string">&quot;doc&quot;</span>, id);</span><br><span class="line">        updateRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">        UpdateRequest doc = updateRequest.doc(JSON.toJSONString(data), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//XContentBuilder builder = XContentFactory.jsonBuilder();</span></span><br><span class="line"></span><br><span class="line">        UpdateResponse update = restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* //测试批量</span></span><br><span class="line"><span class="comment">        UpdateByQueryRequest updateByQueryRequest = new UpdateByQueryRequest(index, id);</span></span><br><span class="line"><span class="comment">        //updateByQueryRequest.setDocTypes(JSON.toJSONString(data));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        BulkB yScrollResponse bulkByScrollResponse = restHighLevelClient.updateByQuery(updateByQueryRequest, RequestOptions.DEFAULT);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> STATUS.equals(update.status().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据(可批量删除，可单条删除)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    esId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true删除成功 false删除失败</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteData</span><span class="params">(String index, String... id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        <span class="keyword">for</span> (String s : id) &#123;</span><br><span class="line">            DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(index, <span class="string">&quot;doc&quot;</span>, s);</span><br><span class="line">            deleteRequest.timeout(<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">            request.add(deleteRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//DeleteResponse deleteResponse = restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);</span></span><br><span class="line">        <span class="keyword">return</span> STATUS.equals(bulk.status().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分页查询数据 查询全部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> form  页数 如果查看第一页传1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size  数量 默认传10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询好的SearchHit数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchHits <span class="title">queryPage</span><span class="params">(String index, Integer form, Integer size)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//QueryBuilders.matchAllQuery查询所有</span></span><br><span class="line">        MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">        searchSourceBuilder.query(matchAllQueryBuilder);</span><br><span class="line">        <span class="comment">//构建分页</span></span><br><span class="line">        <span class="keyword">if</span> (form == <span class="number">1</span>) &#123;</span><br><span class="line">            searchSourceBuilder.from();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            searchSourceBuilder.from(form);</span><br><span class="line">        &#125;</span><br><span class="line">        searchSourceBuilder.size(size);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> search.getHits();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询全部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index      索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询好的SearchHit数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; queryAllData(String index) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//构建分页</span></span><br><span class="line">        searchSourceBuilder.from();</span><br><span class="line">        searchSourceBuilder.size(<span class="number">10000</span>);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; resultMap = toList(search.getHits());</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分词查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> form  页数 如果查看第一页传1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size  数量 默认传10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  查询参数名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 查询值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询好的SearchHit数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SearchHit[] boolPage(String index, Integer form, Integer size, String name, String value) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//QueryBuilders.termQuery(); //精确查找</span></span><br><span class="line">        <span class="comment">/*TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(name, value);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(termQueryBuilder);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用bool检索</span></span><br><span class="line">        <span class="comment">/*bool:几种格式</span></span><br><span class="line"><span class="comment">        must:所有分句都必须匹配，与 AND 相同。</span></span><br><span class="line"><span class="comment">        must_not:所有分句都必须不匹配，与 NOT 相同。</span></span><br><span class="line"><span class="comment">        should: 至少有一个分句匹配，与 OR 相同。</span></span><br><span class="line"><span class="comment">        1 term查询（精准查询）</span></span><br><span class="line"><span class="comment">        2 math查询（分词匹配查询）</span></span><br><span class="line"><span class="comment">        3 fuzzy查询（模糊查询）</span></span><br><span class="line"><span class="comment">        4 wildcard(通配符查询)</span></span><br><span class="line"><span class="comment">        5 bool查询（布尔查询）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery()</span><br><span class="line">                .should(QueryBuilders.matchQuery(name, value)</span><br><span class="line">                        .analyzer(<span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">                        .operator(Operator.OR));</span><br><span class="line">        searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * math查询（分词匹配查询），只要与其中一个关键字匹配就可以查出来</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">       <span class="comment">/* MatchQueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(name, value);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(matchQueryBuilder);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// math查询（分词匹配查询）可以支持多个字段检索</span></span><br><span class="line">        <span class="comment">/*QueryBuilder multiMatch = QueryBuilders.multiMatchQuery(&quot;zhou&quot;, &quot;first_name&quot;,&quot;last_name&quot;);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(multiMatch);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// math查询（分词匹配查询）一定要包含全部关键字</span></span><br><span class="line">        <span class="comment">/*MatchPhraseQueryBuilder matchPhraseQueryBuilder = QueryBuilders.matchPhraseQuery(&quot;about&quot;, &quot;in this world&quot;);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(matchPhraseQueryBuilder);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建分页</span></span><br><span class="line">        <span class="keyword">if</span> (form == <span class="number">1</span>) &#123;</span><br><span class="line">            searchSourceBuilder.from();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            searchSourceBuilder.from(form);</span><br><span class="line">        &#125;</span><br><span class="line">        searchSourceBuilder.size(size);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> search.getHits().getHits();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精确查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> form  页数 如果查看第一页传1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size  数量 默认传10</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name  查询参数名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 查询值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询好的SearchHit数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException es连接异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SearchHit[] queryPage(String index, Integer form, Integer size, String name, String value) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        <span class="comment">//构建搜索条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//QueryBuilders.termQuery(); //精确查找</span></span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(name, value);</span><br><span class="line">        searchSourceBuilder.query(termQueryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用bool检索</span></span><br><span class="line">        <span class="comment">/*bool:几种格式</span></span><br><span class="line"><span class="comment">        must:所有分句都必须匹配，与 AND 相同。</span></span><br><span class="line"><span class="comment">        must_not:所有分句都必须不匹配，与 NOT 相同。</span></span><br><span class="line"><span class="comment">        should: 至少有一个分句匹配，与 OR 相同。</span></span><br><span class="line"><span class="comment">        1 term查询（精准查询）</span></span><br><span class="line"><span class="comment">        2 math查询（分词匹配查询）</span></span><br><span class="line"><span class="comment">        3 fuzzy查询（模糊查询）</span></span><br><span class="line"><span class="comment">        4 wildcard(通配符查询)</span></span><br><span class="line"><span class="comment">        5 bool查询（布尔查询）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">/*BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery()</span></span><br><span class="line"><span class="comment">                .should(QueryBuilders.matchQuery(name,value)</span></span><br><span class="line"><span class="comment">                        .analyzer(&quot;ik_max_word&quot;)</span></span><br><span class="line"><span class="comment">                        .operator(Operator.OR));</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(boolQueryBuilder);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * math查询（分词匹配查询），只要与其中一个关键字匹配就可以查出来</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*MatchQueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(name, value);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(matchQueryBuilder);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// math查询（分词匹配查询）可以支持多个字段检索</span></span><br><span class="line">        <span class="comment">/*QueryBuilder multiMatch = QueryBuilders.multiMatchQuery(&quot;zhou&quot;, &quot;first_name&quot;,&quot;last_name&quot;);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(multiMatch);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// math查询（分词匹配查询）一定要包含全部关键字</span></span><br><span class="line">        <span class="comment">/*MatchPhraseQueryBuilder matchPhraseQueryBuilder = QueryBuilders.matchPhraseQuery(&quot;about&quot;, &quot;in this world&quot;);</span></span><br><span class="line"><span class="comment">        searchSourceBuilder.query(matchPhraseQueryBuilder);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建分页</span></span><br><span class="line">        <span class="keyword">if</span> (form == <span class="number">1</span>) &#123;</span><br><span class="line">            searchSourceBuilder.from();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            searchSourceBuilder.from(form);</span><br><span class="line">        &#125;</span><br><span class="line">        searchSourceBuilder.size(size);</span><br><span class="line">        searchSourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        searchRequest.source(searchSourceBuilder);</span><br><span class="line">        SearchResponse search = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> search.getHits().getHits();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchHits</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; toList(SearchHits searchHits) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; sourceAsMap = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; orginMap = searchHit.getSourceAsMap();</span><br><span class="line">            Map&lt;String, Object&gt; newMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//sourceAsMap1.put(&quot;esId&quot;, searchHit.getId());</span></span><br><span class="line">            <span class="comment">//sourceAsMap1.put(&quot;index&quot;, searchHit.getIndex());</span></span><br><span class="line">            <span class="comment">// key是个jsonObject则把对象打平，处理矩阵数据</span></span><br><span class="line">            <span class="keyword">for</span> (String parentKey : orginMap.keySet()) &#123;</span><br><span class="line">                Object obj = orginMap.get(parentKey);</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">                    Map&lt;String, Object&gt; childMap = (Map) obj;</span><br><span class="line">                    <span class="keyword">for</span> (String childKey : childMap.keySet()) &#123;</span><br><span class="line">                        String newKey = parentKey + <span class="string">&quot;.&quot;</span> + childKey;</span><br><span class="line">                        Object childValue = childMap.get(childKey);</span><br><span class="line">                        <span class="keyword">if</span> (childValue <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                            newMap.put(newKey, JSON.toJSONString(childMap.get(childKey)));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            newMap.put(newKey, childMap.get(childKey));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">                    newMap.put(parentKey, JSON.toJSONString(obj));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newMap.put(parentKey, orginMap.get(parentKey));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sourceAsMap.add(newMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sourceAsMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">getObjectToMap</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, Object&gt;();</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            Object value = field.get(obj);</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(fieldName, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境搭建-docker&quot;&gt;&lt;a href=&quot;#环境搭建-docker&quot; class=&quot;headerlink&quot; title=&quot;环境搭建(docker)&quot;&gt;&lt;/a&gt;环境搭建(docker)&lt;/h2&gt;&lt;h4 id=&quot;Elasticsearch&quot;&gt;&lt;a href=&quot;#El</summary>
      
    
    
    
    <category term="middleware" scheme="https://dogfun.top/categories/middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>俄乌冲突</title>
    <link href="https://dogfun.top/2022/02/27/thinking/%E4%BF%84%E4%B9%8C%E5%86%B2%E7%AA%81/"/>
    <id>https://dogfun.top/2022/02/27/thinking/%E4%BF%84%E4%B9%8C%E5%86%B2%E7%AA%81/</id>
    <published>2022-02-27T05:29:46.000Z</published>
    <updated>2022-03-28T08:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>俄乌冲突背后，实质是美俄冲突，美国领导下的北约组织东扩，乌克兰现任总统演员出身，基本上没有从政经验，属于美国的代理人，若乌加入北约，按照北约的防护条例，北约的军事部署直接搞到了俄罗斯的家门口，这是俄罗斯无法接受的底线，但是美国一直在试探俄罗斯的底线，或者说明知道这是俄罗斯的底线而故意而为之，结合2020以来疫情时代，我认为这是美国有意诱发的一场战争。在美国无限QE的背景下，2021美国的通胀高企不下，股市不能崩，如果崩了，基本全球的经济危机是逃不了的，对于中国的制裁也起不到作用，基本上本来想将危机从中国这个对手盘引爆的想法没有实现。而采取在欧洲诱发一场小规模可控的战争。这场战争对于美国来说，一能转嫁国内经济问题，欧洲作为战争基本不影响美国本土安全的，欧盟或者说欧洲资本必然会外逃，优质资本回流美国，那么美联储加息的烈度就不高了，而且欧盟北约等更加依赖美国提供的资金、军事保护，换句话将又能继续收保护费了，毕竟有俄罗斯这个头号敌人作为借口。对俄罗斯而言，只能赢不能输，在考虑了战争这个选项的时候，俄罗斯的高层必然评估了后续的经济制裁等结果，在欧洲及中国这几大能源依赖下，至少能保证俄罗斯的经济命脉不会受太大影响，后续的目标估计是在乌克兰建立亲俄政府，或者去武装化，作为一个中立国，也是俄罗斯能够接受的。毕竟俄罗斯经过了多年的经济制裁，实际上经济领域已经十分困难了，作为世界第二大军事强国，要维系如此强大的军事需要的经济投入也是巨大的，现在如果不展示力量，过多几年估计俄罗斯在军事方面的优势被全方位碾压的时候北约估计想都不想直接派兵了，这是普京不希望看到的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;俄乌冲突背后，实质是美俄冲突，美国领导下的北约组织东扩，乌克兰现任总统演员出身，基本上没有从政经验，属于美国的代理人，若乌加入北约，按照北约的防护条例，北约的军事部署直接搞到了俄罗斯的家门口，这是俄罗斯无法接受的底线，但是美国一直在试探俄罗斯的底线</summary>
      
    
    
    
    <category term="thinking" scheme="https://dogfun.top/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>K8S</title>
    <link href="https://dogfun.top/2022/02/22/middleware/k8/"/>
    <id>https://dogfun.top/2022/02/22/middleware/k8/</id>
    <published>2022-02-22T03:24:58.000Z</published>
    <updated>2022-03-29T02:41:36.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://img.orchome.com/group1/M00/00/03/dr5oXFv0K4eAMuaUAACvvKRWv6A962.png" alt="Pod、RC与Service的关系"></p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>​    一类服务，有name，虚拟ip和port，提供远程能力</p><pre><code>#### 三种IP</code></pre><ul><li>Node IP：Node节点的IP地址，真实的物理机网卡的ip地址。</li><li>Pod IP：Pod的IP地址，docker0网桥分配的ip。</li><li>Cluster IP：Service的IP地址，虚拟的ip，无法ping，由Kubernetes管理分配。</li></ul><p>外部系统访问Service的方式，通过NodePort暴露出来</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>​    以<em>Pod</em>为最小单位来调度并管理<em>Docker</em>容器<em>（Container）</em>，其中1个<em>Pod</em>可含多个容器，且相同<em>Pod</em>里的容器共享本地网络，容器间可通过<em>localhost</em>地址互访，即容器如同部署在相同的主机上，而以<em>Pod</em>为最小单元来调度则表明：<em>Pod</em>内的容器被调度到相同的<em>Docker</em>节点上。</p><p>Service于Pod的关系，即可理解为Pod是Service一类服务定义的运行实例</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>​    将应用直接以<em>Pod</em>形式部署很少见，主因是：<em>Pod</em>无法提供弹性伸缩，且节点故障时<em>K8S</em>无法将其调度到幸存节点上，缺少自愈能力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy -o wide</span><br></pre></td></tr></table></figure><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><p>​    Pod是服务实例运行的最小单元（pause容器+业务容器），Service用来暴露服务，通过label来负载均衡到pod集群上，RC保证service的服务能力，根据情况进行调度与监控。每个Service分配一个ClusterIP，属于Kubernetes集群内的虚拟ip，pod的地址会随着伸缩而变化注册到service，但service是不变的，类似注册中心的作用。Deployment用来定义服务的，定义副本数量</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"># 创建pod</span><br><span class="line">kubectl create -f /tmp/myhttpd.pod </span><br><span class="line"></span><br><span class="line"># 查看pod</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"># 查看pod的ip</span><br><span class="line">kubectl describe pod myhttp|grep IP</span><br><span class="line"></span><br><span class="line"># 集群所有node</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"># 节点详情</span><br><span class="line">kubectl describe node 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 获取所有部署</span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"># 查看所有 pod 列表,  -n 后跟 namespace, 查看指定的命名空间</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get pod -n kube  </span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 RC 和 service 列表， -o wide 查看详细信息</span><br><span class="line">kubectl get rc,svc</span><br><span class="line">kubectl get pod,svc -o wide  </span><br><span class="line">kubectl get pod &lt;pod-name&gt; -o yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示 Node 的详细信息</span><br><span class="line">kubectl describe node 192.168.0.212</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示 Pod 的详细信息, 特别是查看 pod 无法创建的时候的日志</span><br><span class="line">kubectl describe pod &lt;pod-name&gt;</span><br><span class="line">eg:</span><br><span class="line">kubectl describe pod redis-master-tqds9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 根据 yaml 创建资源, apply 可以重复执行，create 不行</span><br><span class="line">kubectl create -f pod.yaml</span><br><span class="line">kubectl apply -f pod.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 基于 pod.yaml 定义的名称删除 pod </span><br><span class="line">kubectl delete -f pod.yaml </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除所有包含某个 label 的pod 和 service</span><br><span class="line">kubectl delete pod,svc -l name=&lt;label-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除所有 Pod</span><br><span class="line">kubectl delete pod --all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 endpoint 列表</span><br><span class="line">kubectl get endpoints</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 执行 pod 的 date 命令</span><br><span class="line">kubectl exec &lt;pod-name&gt; -- date</span><br><span class="line">kubectl exec &lt;pod-name&gt; -- bash</span><br><span class="line">kubectl exec &lt;pod-name&gt; -- ping 10.24.51.9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过bash获得 pod 中某个容器的TTY，相当于登录容器</span><br><span class="line">kubectl exec -it &lt;pod-name&gt; -c &lt;container-name&gt; -- bash</span><br><span class="line">eg:</span><br><span class="line">kubectl exec -it redis-master-cln81 -- bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看容器的日志</span><br><span class="line">kubectl logs &lt;pod-name&gt;</span><br><span class="line">kubectl logs -f &lt;pod-name&gt; # 实时查看日志</span><br><span class="line">kubectl log  &lt;pod-name&gt;  -c &lt;container_name&gt; # 若 pod 只有一个容器，可以不加 -c </span><br><span class="line"></span><br><span class="line">kubectl logs -l app=frontend # 返回所有标记为 app=frontend 的 pod 的合并日志。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看注释</span><br><span class="line">kubectl explain pod</span><br><span class="line">kubectl explain pod.apiVersion</span><br><span class="line"></span><br><span class="line"># 查看节点 labels</span><br><span class="line">kubectl get node --show-labels</span><br><span class="line"></span><br><span class="line"># 重启 pod</span><br><span class="line">kubectl get pod &lt;POD名称&gt; -n &lt;NAMESPACE名称&gt; -o yaml | kubectl replace --force -f -</span><br><span class="line"></span><br><span class="line"># 修改网络类型</span><br><span class="line">kubectl patch service istio-ingressgateway -n istio-system -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;type&quot;:&quot;NodePort&quot;&#125;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"># 伸缩 pod 副本</span><br><span class="line"># 可用于将Deployment及其Pod缩小为零个副本，实际上杀死了所有副本。当您将其缩放回1/1时，将创建一个新的Pod，重新启动您的应用程序。</span><br><span class="line">kubectl scale deploy/nginx-1 --replicas=0</span><br><span class="line">kubectl scale deploy/nginx-1 --replicas=1</span><br><span class="line"></span><br><span class="line"># 查看前一个 pod 的日志，logs -p 选项 </span><br><span class="line">kubectl logs --tail 100 -p user-klvchen-v1.0-6f67dcc46b-5b4qb &gt; pre.log</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img.orchome.com/group1/M00/00/03/dr5oXFv0K4eAMuaUAAC</summary>
      
    
    
    
    <category term="middleware" scheme="https://dogfun.top/categories/middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>随想2-20</title>
    <link href="https://dogfun.top/2022/02/20/thinking/%E9%9A%8F%E6%83%B32-20/"/>
    <id>https://dogfun.top/2022/02/20/thinking/%E9%9A%8F%E6%83%B32-20/</id>
    <published>2022-02-20T09:58:09.000Z</published>
    <updated>2022-03-28T08:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>渴望倾诉，也渴望独处，人就是矛盾二元对立的结合体。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;渴望倾诉，也渴望独处，人就是矛盾二元对立的结合体。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="thinking" scheme="https://dogfun.top/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>HELM</title>
    <link href="https://dogfun.top/2022/02/20/middleware/helm/"/>
    <id>https://dogfun.top/2022/02/20/middleware/helm/</id>
    <published>2022-02-20T02:14:13.000Z</published>
    <updated>2022-03-29T02:41:36.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Helm是k8s的包管理工具，使用helm可以简化k8s应用部署</p><ul><li><strong>Chart</strong>：一个 Helm 包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含 Kubernetes 集群中的服务定义。</li><li><strong>Release</strong>：在 Kubernetes 集群上运行的 Chart 的一个实例。在同一个集群上，一个 Chart 可以安装很多次。每次安装都会创建一个新的 release。例如一个 MySQL Chart，如果想在服务器上运行两个数据库，就可以把这个 Chart 安装两次。每次安装都会生成自己的 Release，会有自己的 Release 名称。</li><li><strong>Repository</strong>：用于发布和存储 Chart 的存储库。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://img2018.cnblogs.com/i-beta/1356274/202001/1356274-20200104133425850-1349135834.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myapp                                   - chart 包目录名</span><br><span class="line">├── charts                              - 依赖的子包目录，里面可以包含多个依赖的chart包</span><br><span class="line">├── Chart.yaml                          - chart定义，可以定义chart的名字，版本号信息。</span><br><span class="line">├── templates                           - k8s配置模版目录， 我们编写的k8s配置都在这个目录， 除了NOTES.txt和下划线开头命名的文件，其他文件可以随意命名。</span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl                    - 下划线开头的文件，helm视为公共库定义文件，主要用于定义通用的子模版、函数等，helm不会将这些公共库文件的渲染结果提交给k8s处理。</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt                       - chart包的帮助信息文件，执行helm install命令安装成功后会输出这个文件的内容。</span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml                         - chart包的参数配置文件，模版可以引用这里参数。</span><br></pre></td></tr></table></figure><h2 id="添加本地仓库"><a href="#添加本地仓库" class="headerlink" title="添加本地仓库"></a>添加本地仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -e DEBUG=1 \</span><br><span class="line">  -e STORAGE=local \</span><br><span class="line">  -e STORAGE_LOCAL_ROOTDIR=/charts \</span><br><span class="line">  -v /opt/charts:/charts \</span><br><span class="line">  chartmuseum/chartmuseum:latest</span><br><span class="line">  </span><br><span class="line">helm repo add localrepo http://192.168.2.19:8080</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 创建chart包</span><br><span class="line">helm create mychart</span><br><span class="line"></span><br><span class="line"># 验证文件合法性</span><br><span class="line">helm lint</span><br><span class="line"></span><br><span class="line"># 测试生成</span><br><span class="line">helm install web --dry-run demo/</span><br><span class="line"></span><br><span class="line"># 正式生成: helm install  --set key=value   chart包目录</span><br><span class="line">helm install local/web </span><br><span class="line"></span><br><span class="line"># 打包</span><br><span class="line">helm package mychart [--debug]</span><br><span class="line"></span><br><span class="line"># 本地仓库查找</span><br><span class="line">helm search repo mychart</span><br><span class="line">helm search</span><br><span class="line"></span><br><span class="line">从远程仓库查找:helm search hub [chart]</span><br><span class="line"></span><br><span class="line">helm repo list </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#命令格式: helm upgrade release名字  chart包目录</span><br><span class="line">helm upgrade myapp ./myapp</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;Helm是k8s的包管理工具，使用helm可以简化k8s应用部署&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chart&lt;/strong&gt;：一</summary>
      
    
    
    
    <category term="middleware" scheme="https://dogfun.top/categories/middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>javacv抓取rtsp视频流</title>
    <link href="https://dogfun.top/2022/02/20/record/javacv%E6%8A%93%E5%8F%96rtsp%E8%A7%86%E9%A2%91%E6%B5%81/"/>
    <id>https://dogfun.top/2022/02/20/record/javacv%E6%8A%93%E5%8F%96rtsp%E8%A7%86%E9%A2%91%E6%B5%81/</id>
    <published>2022-02-20T01:19:22.000Z</published>
    <updated>2022-03-28T08:42:38.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javacv"><a href="#javacv" class="headerlink" title="javacv"></a>javacv</h3><blockquote><p>java平台的流媒体开发包，对opencv、ffmpeg等库做了二次封装</p></blockquote><h3 id="流媒体协议"><a href="#流媒体协议" class="headerlink" title="流媒体协议"></a>流媒体协议</h3><blockquote><p>rtmp、rtsp、hls</p></blockquote><h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><blockquote><p>flv、jpeg、png</p></blockquote><h3 id="图像像素格式"><a href="#图像像素格式" class="headerlink" title="图像像素格式"></a>图像像素格式</h3><blockquote><p>没有经过编码的原始像素排列的数据</p></blockquote><h3 id="图片封装格式"><a href="#图片封装格式" class="headerlink" title="图片封装格式"></a>图片封装格式</h3><blockquote><p>png（无损）、bmp（无损不压缩）、gif/jpg（有损压缩）</p></blockquote><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><blockquote><p>对图像像素格式进行编码才是视频帧，即压缩</p></blockquote><h1 id="FrameGrabber-帧抓取器-采集器-介绍"><a href="#FrameGrabber-帧抓取器-采集器-介绍" class="headerlink" title="FrameGrabber(帧抓取器/采集器)介绍"></a>FrameGrabber(帧抓取器/采集器)介绍</h1><p>用于采集/抓取视频图像和音频采样。封装了检索流信息，自动猜测视频解码格式，音视频解码等具体API，并把解码完的像素数据（可配置像素格式）或音频数据保存到Frame中返回等功</p><p><strong>FrameGrabber</strong>的子类/实现类包含以下几个：</p><p><strong>FFmpegFrameGrabber、OpenCVFrameGrabber、IPCameraFrameGrabber、VideoInputFrameGrabber、FlyCapture2FrameGrabber、DC1394FrameGrabber</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;javacv&quot;&gt;&lt;a href=&quot;#javacv&quot; class=&quot;headerlink&quot; title=&quot;javacv&quot;&gt;&lt;/a&gt;javacv&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;java平台的流媒体开发包，对opencv、ffmpeg等库做了二次封装&lt;/p&gt;
</summary>
      
    
    
    
    <category term="record" scheme="https://dogfun.top/categories/record/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>跨域CORS后端处理</title>
    <link href="https://dogfun.top/2021/11/29/record/CORS/"/>
    <id>https://dogfun.top/2021/11/29/record/CORS/</id>
    <published>2021-11-29T07:15:50.000Z</published>
    <updated>2022-03-28T08:42:38.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><pre><code>    浏览器自身存在保护机制，当从一个域名访问另一个域名的资源时，域名、端口、协议任一不同，都会产生跨域问题</code></pre><h2 id="跨域限制"><a href="#跨域限制" class="headerlink" title="跨域限制"></a>跨域限制</h2><ol><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 AJAX 请求（可以发送，但浏览器会拒绝接受响应）</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>跨域资源分享CORS<br>后端添加Access-Control-Allow-Origin返回头，允许通过的域</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;    浏览器自身存在保护机制，当从一个域名访问另一个域名的资源时，域名、端口、协议任一不同，都会产生跨域问题
&lt;/code</summary>
      
    
    
    
    <category term="record" scheme="https://dogfun.top/categories/record/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim</title>
    <link href="https://dogfun.top/2021/11/28/flow/vim/"/>
    <id>https://dogfun.top/2021/11/28/flow/vim/</id>
    <published>2021-11-28T03:15:15.000Z</published>
    <updated>2022-03-28T08:42:38.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>h</td><td>左移动</td></tr><tr><td>j</td><td>下移动</td></tr><tr><td>k</td><td>上移动</td></tr><tr><td>l</td><td>右移动</td></tr><tr><td>ctrl+d</td><td>下移动半页</td></tr><tr><td>ctrl+u</td><td>上移动半页</td></tr><tr><td>gg</td><td>移动到第一行</td></tr><tr><td>G</td><td>移动到最后一行</td></tr><tr><td>nG</td><td>移动到第n行</td></tr><tr><td>n+<space></td><td>右移n个字符</td></tr><tr><td>n+<enter></td><td>下移动n行</td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>/word</td><td>向光标下搜索,n搜索下一个,shirt+n搜索上一个</td></tr><tr><td>?word</td><td>向光标上搜索</td></tr></tbody></table><h3 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>x</td><td>向后删除一个字符</td></tr><tr><td>nx</td><td>向后删除n个字符</td></tr><tr><td>dd</td><td>删除游标那正行</td></tr><tr><td>ndd</td><td>删除光标下n行</td></tr><tr><td>dG</td><td>全部删除</td></tr><tr><td>shift+6</td><td>到行尾</td></tr><tr><td>shift+4</td><td>到行头</td></tr><tr><td>ggdG</td><td>从首行开始删除所有</td></tr></tbody></table><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>yy</td><td>复制那一行</td></tr><tr><td>nyy</td><td>复制光标下n行</td></tr></tbody></table><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>p</td><td>将已复制的数据贴到光标下一行</td></tr><tr><td>P</td><td>将已复制的数据贴到光标上一行</td></tr></tbody></table><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>u</td><td>复原前一个动作（撤回）</td></tr><tr><td>ctrl+r</td><td>重做上一个动作</td></tr></tbody></table><h2 id="切换到输入模式"><a href="#切换到输入模式" class="headerlink" title="切换到输入模式"></a>切换到输入模式</h2><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>i</td><td>目前光标所在处输入</td></tr><tr><td>I</td><td>从光标所在行的非空格字符输入</td></tr><tr><td>a</td><td>从目前光标所在的下一个字符开始输入</td></tr><tr><td>A</td><td>从目前光标所在的最后一个字符开始输入</td></tr><tr><td>o</td><td>从目前光标所在的行的下一行开始输入</td></tr><tr><td>O</td><td>从目前光标所在的行的上一行开始输入</td></tr></tbody></table><h2 id="命令模式切换到底线命令模式"><a href="#命令模式切换到底线命令模式" class="headerlink" title="命令模式切换到底线命令模式"></a>命令模式切换到底线命令模式</h2><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>:w</td><td>编辑的数据写入硬盘</td></tr><tr><td>:w!</td><td>强制写入硬盘，无权限还是写不进</td></tr><tr><td>:q</td><td>离开vi</td></tr><tr><td>:q!</td><td>修改过不想保存，强制离开vi</td></tr><tr><td>:wq</td><td>保存后离开</td></tr><tr><td>:w [filename]</td><td>另存为</td></tr></tbody></table><h2 id="vim环境的变更"><a href="#vim环境的变更" class="headerlink" title="vim环境的变更"></a>vim环境的变更</h2><table><thead><tr><th>按键</th><th>操作</th></tr></thead><tbody><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>取消显示行号</td></tr></tbody></table><h1 id="组合实用"><a href="#组合实用" class="headerlink" title="组合实用"></a>组合实用</h1><p>yy:复制当前行<br>p: 复制的内容粘贴<br>f+[?]:偏移到某个字符<br>ciw:删除当前所处的词，并进入插入模式</p><p>块删除<br>vjd</p><p>删除某个块里的内容并进入插入模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ci&#123;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  example</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;example&quot;;</span><br><span class="line"></span><br><span class="line">(example);</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>多行注释：</p><p>进入命令行模式–&gt;</p><p>将光标移动到要注释的第一行位置–&gt;</p><p>按ctrl + v进入 visual block模式–&gt;</p><p>按字母j,或k（或者上下移动键）纵向选中需要注释的行–&gt;</p><p>按大写字母I，进入插入模式–&gt;</p><p>输入注释符号，例如##（需要添加几列就输入几个）–&gt;</p><p>按esc键就注释多行了。</p><p>取消多行注释（删除注释）：</p><p>进入命令行模式–&gt;</p><p>将光标移动到要取消注释的第一行第一列位置–&gt;</p><p>按ctrl + v进入 visual block模式–&gt;</p><p>按小写字母h或l横向选中列的个数，按小写字母j或k纵向选中行的个数（同样可以使用上下左右移动键）–&gt;</p><h2 id="按d键或者delete键就可多行取消注释。"><a href="#按d键或者delete键就可多行取消注释。" class="headerlink" title="按d键或者delete键就可多行取消注释。"></a>按d键或者delete键就可多行取消注释。</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础命令&quot;&gt;&lt;a href=&quot;#基础命令&quot; class=&quot;headerlink&quot; title=&quot;基础命令&quot;&gt;&lt;/a&gt;基础命令&lt;/h1&gt;&lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="flow" scheme="https://dogfun.top/categories/flow/"/>
    
    
  </entry>
  
  <entry>
    <title>Minio</title>
    <link href="https://dogfun.top/2021/11/27/middleware/minio/"/>
    <id>https://dogfun.top/2021/11/27/middleware/minio/</id>
    <published>2021-11-27T01:49:06.000Z</published>
    <updated>2022-03-29T02:41:36.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9001:9001 -d --name minio1 \</span><br><span class="line">  -v /Users/carytseng/envir/minio/data:/data \</span><br><span class="line">  -v /Users/carytseng/envir/minio/config:/root/.minio \</span><br><span class="line">  -e &#x27;MINIO_ROOT_USER=admin&#x27; \</span><br><span class="line">  -e &#x27;MINIO_ROOT_PASSWORD=admin123&#x27; \</span><br><span class="line">  minio/minio server /data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#docker安装&quot; class=&quot;headerlink&quot; title=&quot;docker安装&quot;&gt;&lt;/a&gt;docker安装&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="middleware" scheme="https://dogfun.top/categories/middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>随想11-27</title>
    <link href="https://dogfun.top/2021/11/27/thinking/%E9%9A%8F%E6%83%B311-27/"/>
    <id>https://dogfun.top/2021/11/27/thinking/%E9%9A%8F%E6%83%B311-27/</id>
    <published>2021-11-27T01:49:06.000Z</published>
    <updated>2022-03-28T08:42:38.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>   泛娱乐时代倘若不能保持独立思考的能力，建立自己的观念防线，极其容易被喂养垃圾价值观而不自知，在碎片化的无意识信息汲取中得不到任何有养分的熏陶，谈何成长，不变成shit就不错了。走向平庸只需几步，失去专注力、固步自封害怕触及新领域、沉浸在自我建立的舒适区中。只需要两三年，基本的格局即会定调，再想改变是难上加难，毕竟人的天性对于大多数人来讲是不可抗力因素。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;   泛娱乐时代倘若不能保持独立思考的能力，建立自己的观念防线，极其容易被喂养垃圾价值观而不自知，在碎片化的无意识信息汲取中得不到任何有养分的熏陶，谈何成长，不变成shit就不错了。走向平庸只需几步，失去专注力、固步自封害怕触及新领域、沉浸在自我建</summary>
      
    
    
    
    <category term="thinking" scheme="https://dogfun.top/categories/thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>NVM</title>
    <link href="https://dogfun.top/2021/10/25/record/NVM/"/>
    <id>https://dogfun.top/2021/10/25/record/NVM/</id>
    <published>2021-10-25T01:49:06.000Z</published>
    <updated>2022-03-28T08:42:38.043Z</updated>
    
    <content type="html"><![CDATA[<p>1、nvm安装。nvm是node版本管理工具，为解决node各版本不兼容问题，nvm是让你在同一台机器上安装和切换不同版本的node</p><ol><li><p>brew install nvm</p></li><li><p>编辑配置文件，vim ~/.bash_profile，文件中写入如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=~/.nvm</span><br><span class="line">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure></li><li><p>保存，source ~/.bash_profile</p></li></ol><p>2、nvm切换镜像源，解决node下载卡/失败的问题</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">// 加入以下两条配置文件</span><br><span class="line">export NVM_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br><span class="line">export NVM_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span><br><span class="line">// 重启配置文件</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、安装node指定版本</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote  // 查看所有的node可用版本</span><br><span class="line">nvm list  // 查看已安装node版本</span><br><span class="line">nvm install 版本号  // 下载指定node版本，如nvm install v11.14.0</span><br><span class="line">nvm use 版本号  // 使用指定版本</span><br><span class="line">nvm alias default  // 设置默认版本，每次启动终端都使用该版本</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、nvm安装。nvm是node版本管理工具，为解决node各版本不兼容问题，nvm是让你在同一台机器上安装和切换不同版本的node&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;brew install nvm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑配置文件，vim ~/.bash_p</summary>
      
    
    
    
    <category term="record" scheme="https://dogfun.top/categories/record/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac平台下工具总结</title>
    <link href="https://dogfun.top/2021/09/25/host/mac/"/>
    <id>https://dogfun.top/2021/09/25/host/mac/</id>
    <published>2021-09-25T01:49:06.000Z</published>
    <updated>2022-03-28T08:42:38.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收藏软件网站"><a href="#收藏软件网站" class="headerlink" title="收藏软件网站"></a>收藏软件网站</h2><p><a href="https://www.macwk.com/" title="macwk">macwk</a></p><h2 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h2><ul><li>解压：Bandizip</li><li>影音：IINA</li><li>终端替代：iTerm2</li><li>文档阅览：PDF Expert</li><li>浏览器下载：NeatDownloadManager</li><li>磁力链接必备：迅雷</li><li>系统清理：Disk diet</li><li>本地索引搜索：HapiGo</li><li>外网工具：Clash</li><li>文档编辑：wps</li><li>邮件收发（主要可设代理，方便gmail）：Formail</li><li>文件管理器替代：TotalFinder</li></ul><h2 id="工作必备"><a href="#工作必备" class="headerlink" title="工作必备"></a>工作必备</h2><ul><li>MarkDown编辑：Typora</li><li>文本编辑：Sublime Text</li><li>Java开发：IDEA</li><li>数据库图形化：Navicat</li><li>git图形化工具：SourceTree</li><li>svn工具：Cornerstone</li><li>接口调试：PostMan</li><li>UML工具：draw.io</li><li>容器：docker</li><li>性能监控：JProfiler</li><li>文本对比：Beyond Compare</li><li>redis图形化工具：RDM</li><li>前端编辑：Visual Studio Code</li><li>ssh工具：Royal Tsx</li></ul><h3 id="文本编辑统一"><a href="#文本编辑统一" class="headerlink" title="文本编辑统一"></a>文本编辑统一</h3><p>将所有文本编辑类统一用visual studio code解决</p><ul><li>添加pretty json插件</li><li>markdown all in one插件</li></ul><h2 id="系统性能设置提升"><a href="#系统性能设置提升" class="headerlink" title="系统性能设置提升"></a>系统性能设置提升</h2><h3 id="设置性能模式"><a href="#设置性能模式" class="headerlink" title="设置性能模式"></a>设置性能模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启性能模式</span><br><span class="line">sudo nvram boot-args=&quot;serverperfmode=1 $(nvram boot-args 2&gt;/dev/null | cut -f 2-)&quot;</span><br><span class="line"></span><br><span class="line">关闭性能模式</span><br><span class="line">sudo nvram boot-args=&quot;$(nvram boot-args 2&gt;/dev/null | sed -e $&#x27;s/boot-args\t//;s/serverperfmode=1//&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">查看当前模式</span><br><span class="line">nvram boot-args</span><br></pre></td></tr></table></figure><h3 id="设置显卡模式"><a href="#设置显卡模式" class="headerlink" title="设置显卡模式"></a>设置显卡模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pmset -a GPUSwitch 0 // 强制使用集显</span><br><span class="line"></span><br><span class="line">sudo pmset -a GPUSwitch 1 // 强制使用独显</span><br><span class="line"></span><br><span class="line">sudo pmset -a GPUSwitch 2 // 自动切换模式</span><br></pre></td></tr></table></figure><h3 id="mac-上的-spotlight开关"><a href="#mac-上的-spotlight开关" class="headerlink" title="mac 上的 spotlight开关"></a>mac 上的 spotlight开关</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关闭：</span><br><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><br><span class="line">打开（注意要使用HapiGo必须要打开，依赖此引擎）：</span><br><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">常年使用mac平台总结出的优良体验，日常的效率工具，有助提升个人工作效率</summary>
    
    
    
    <category term="host" scheme="https://dogfun.top/categories/host/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础补全</title>
    <link href="https://dogfun.top/2021/08/05/record/java/"/>
    <id>https://dogfun.top/2021/08/05/record/java/</id>
    <published>2021-08-05T11:59:19.000Z</published>
    <updated>2022-03-28T08:42:38.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li><p>boolean (8bit),byte(8bit),char(16bit),short(16bit),int(32bit),long(64bit),float(32bit),double(64bit),void</p></li><li><p>Boolean,Byte,Character,Integer,Long,Float,Double,Void</p></li></ul><h2 id="Java源文件名与类public修饰符"><a href="#Java源文件名与类public修饰符" class="headerlink" title="Java源文件名与类public修饰符"></a>Java源文件名与类public修饰符</h2><blockquote><p> 一个java源文件作为编译器的一个编译单元，可以有多个类，若有public类，则该类名与源文件名必须相同且只有一个，但源文件中不是必须含有public类，public类知识用来表示编译单元中存在公开接口。编译的时候java编译器判断如果存在public类，就将该类当做编译单元的对外接口，类加载器需要把该类加载。对于一个public类可以被项目中任何一个类引用。若源文件中含有public类，且含有main方法，则main方法必须在public类中定义。因为public类是对外的公开接口。</p></blockquote><h2 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h2><p>&amp;&amp;是短路操作符:若操作符左边的布尔表达式能推算出整个表达式的布尔值，则不计算右边的表达式。</p><p>&amp;是非短路操作符:始终会计算两边的布尔表达式。</p><h2 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a>==与equals</h2><p>==比较两个变量的值是否相等，也就是变量所存储的数值是否相等</p><p>若是基本类型，比较数值大小</p><p>若是对象类型，比较引用变量所指向的对象是否是同一个。</p><p>equals用于比较两个独立的对象是否相同，equals方法可覆盖，定义相同的条件</p><h2 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h2><ol><li><p>用new语句创建对象，这是最常用的创建对象的方式。</p></li><li><p>运用反射手段，调用<a href="http://lib.csdn.net/base/javase">Java</a>.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。</p></li><li><p>调用对象的clone()方法。</p></li><li><p>运用反序列化手段，调用java.io.ObjectInputStream对象的readObject()方法.</p></li></ol><h2 id="equal和hashcode"><a href="#equal和hashcode" class="headerlink" title="equal和hashcode"></a>equal和hashcode</h2><p>​        哈希码位于对象头中，每个对象都有。主要用于查找，如HashSet在存放对象时会使用对象的哈希码来计算存储位置，HashSet是不能存放相同的两个对象的，这个相同由我们自己定义，也即是equals方法。</p><p>为什么要保证equals方法相同的两个对象 hashcode相同？</p><ol><li><p>假设equals定义了两个相同的对象，而未覆写hashcode，则hashset容器根据不同的hashcode将两个对象都放进去。重写了，就会判断同一位置上已有相同的对象。</p></li><li><p>假设有相同hashcode，则会算出相同的存储位置，若不覆写equals方法，默认调用object的equals方法，比较两个引用地址，不同就都放进去，在同一位置上使用链表存储。所以必须覆写equals方法保证对象的合法性。</p></li></ol><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><blockquote><p>java基本数据类型是值传递，修改值不会对原来的值造成影响，对象类型都是引用传递，将对象引用的地址传递给方法参数，方法中修改对象属性即修改指向的内存空间上的对象的属性，java的方法只支持值传递。</p></blockquote><h2 id="方法重载与方法覆写"><a href="#方法重载与方法覆写" class="headerlink" title="方法重载与方法覆写"></a>方法重载与方法覆写</h2><p>方法重载发生在一个类中，多个同名函数同时存在，具有不同的参数个数、类型,调用方法时通过传递给它们的不同参数个数和参数类型决定具体使用哪个方法，这就是多态（编译时绑定），无法以返回类型作为重载标准。</p><p>方法覆写主要是子类对父类方法的重写，相同的名称和参数。子类函数的访问权限不能少于父类的。</p><p>动态绑定：</p><ol><li><p>编译器检查对象声明的类型和方法名，从而获取所有候选方法。</p></li><li><p>当程序运行并且使用动态绑定来调用一个方法时，那么虚拟机必须调用对象的实际类型相匹配的方法版本。</p></li></ol><ul><li><p>一个是编译时绑定，根据代码传入的参数类型或者个数来确定调用的方法</p></li><li><p>一个是运行时绑定，根据传入的对象类型，确定调用子类抑或父类的方法</p></li></ul><h2 id="静态变量与实例变量"><a href="#静态变量与实例变量" class="headerlink" title="静态变量与实例变量"></a>静态变量与实例变量</h2><p>语法定义：静态变量加static关键字，实例变量不需要</p><p>程序运行区别：</p><p>   实例变量与实例对象关联，必须创建实例对象，才能使用对象的实例变量。</p><p>   而静态变量与类关联，随着类的加载而被分配空间，无须创建对象，并且静态变量只分配了一次。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote><p>被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p></blockquote><ol><li><p>static变量</p><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： </p><p>   　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 </p><p>   　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p></li><li><p>静态方法</p><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ </p><p>   　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。 </p></li><li><p>static代码块</p><p>　static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如：</p></li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final用于声明类，方法和变量，表示属性不可变，类不可继承，方法不可覆写。</p><ul><li><p>final 数据：编译期常量，这类常量必须是基本数据类型，使用static、final修饰。 对于对象引用使用final时，使引用恒定不变，但对于对象本身是可以被改变的，即指向恒定不变。定义时需要赋值</p></li><li><p>final方法：继承类不能覆盖基类的方法</p></li><li><p>final类：不能被继承</p></li></ul><h2 id="String-、StringBuilder、StringBuffer"><a href="#String-、StringBuilder、StringBuffer" class="headerlink" title="String 、StringBuilder、StringBuffer"></a>String 、StringBuilder、StringBuffer</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>执行速度方面：StringBuilder&gt;StringBuffer&gt;String </p></li><li><p>String创建的是字符串常量，是不可变的，操作时会不断创建新的对象，原来的对象会被GC回收掉。而StringBuilder和StringBuffer是字符串变量，操作时是对同一个对象进行。</p></li><li><p>StringBuilder：线程非安全</p></li><li><p>StringBuffer：线程安全</p></li><li><p>String若用==比较，则比较的是对象的地址。String方法重写了equals方法，所以比较时，比较的是字符串的内容是否相同。</p></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>创建字符串的方式: </p><ol><li><p>使用new关键字创建字符串,比如String s1 = new String(“abc”); </p></li><li><p>直接指定.比如String s2 = “abc”; </p></li><li><p>使用串联生成新的字符串.比如String s3 = “ab” + “c”; </p></li></ol><blockquote><p>Java运行时会维护一个String Pool(String池),JavaDoc翻译很模糊”字符串缓冲区”.String池用来存放运行时中产生的各种字符串,并且池中的字符串的内容不重复.而一般对象不存在这个缓冲池,并且创建的对象仅仅存在于方法的堆栈区。</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>原理1:当使用任何方式来创建一个字符串对象s时,Java运行时(运行中JVM)会拿着这个X在String池中找是否存在内容相同的字符串对象,如果不存在,则在池中创建一个字符串s,否则,不在池中添加. </p></li><li><p>原理2:Java中,只要使用new关键字来创建对象,则一定会(在堆区或栈区)创建一个新的对象. </p></li><li><p>原理3:使用直接指定或者使用纯字符串串联来创建String对象,则仅仅会检查维护String池中的字符串,池中没有就在池中创建一个,有则罢了!但绝不会在堆栈区再去创建该String对象. </p></li><li><p>原理4:使用包含变量的表达式来创建String对象,则不仅会检查维护String池,而且还会在堆栈区创建一个String对象. </p></li><li><p>javac编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉取中的加号</p></li></ul><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line">String s2 = s1 + <span class="string">&quot;b&quot;</span>;<span class="comment">//含有变量，因此会先检查维护String池，并在堆中创建一个新对象</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s2 == <span class="string">&quot;ab&quot;</span>);<span class="comment">//false,&quot;ab&quot;的地址在常量池中，而s2指向的是堆中所copy的对象</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == <span class="string">&quot;ab&quot;</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line">String s2 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;<span class="comment">//直接在常量池中创建一个新的</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;<span class="comment">//使用常量池中存在的</span></span><br><span class="line"></span><br><span class="line">System.out.println(s2 == <span class="string">&quot;ab&quot;</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>线程本地变量，对于一个变量，ThreadLocal为该变量在每个线程中创建一个副本，线程间的变量互不影响。适用场景，多个线程不依赖于共享变量的状态来进行逻辑驱动，适用于在每个线程中，保存一份变量副本，对于该副本的任何修改也仅限于该线程的操作，其他线程无法影响。</p></blockquote><p><strong>设计理念</strong></p><blockquote><p>概括起来说，对于多线程资源共享的问题，同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，做到多线程的数据隔离。</p></blockquote><p><strong>设计原理</strong></p><p>​        每个线程Thread类会维护一个变量ThreadLocalMap，该map是以ThreadLocal作为key，保存的变量值作为value保存在当前线程的ThreadLocalMap中，所以每个线程可以存储多个ThreadLocal的变量值。set的时候，拿到当前线程的ThreadLocalMap，若map为空则初始化，否则set进变量值。get的时候，是获取当前线程的ThreadLocalMap，以该ThreadLocal作为key来获取变量值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) </span><br><span class="line">      <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">      T result = (T)e.value;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> setInitialValue();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类加载及双亲委派模型"><a href="#类加载及双亲委派模型" class="headerlink" title="类加载及双亲委派模型"></a>类加载及双亲委派模型</h2><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><h4 id="加载："><a href="#加载：" class="headerlink" title="加载："></a>加载：</h4><p>​        查找并加载二进制数据。把类的.class文件中的二进制数据读入内存，把它存放到方法区，然后在堆创建一个Class对象，用来封装类在方法区内的数据结构，提供了访问类在方法区内的数据结构的接口。</p><h4 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h4><ol><li><p>验证：确保被加载类的正确性。</p></li><li><p>准备：为类的静态变量分配内存，并将其初始化为默认值。</p></li><li><p>解析：把类中的符号引用转换为直接引用。</p></li><li><p>初始化：给类的静态变量赋予正确的初始值。</p><ol><li>假如这个类还没有被加载和连接，就先进行加载和连接。</li><li>假如这个类存在父类，并且这个父类还没有初始化，就先初始化。</li><li>假如这个类存在初始化语句，就依次执行。</li></ol></li></ol><h4 id="初始化的时机："><a href="#初始化的时机：" class="headerlink" title="初始化的时机："></a>初始化的时机：</h4><ul><li><p>创建类的实例：new、反射、克隆及序列化。</p></li><li><p>调用类的静态方法。</p></li><li><p>访问某个类或接口的静态变量。</p></li><li><p>调用java api的某些反射方法。</p></li><li><p>初始一个类的子类</p></li></ul><p>类及对象创建的初始化顺序</p><ol><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ol><p>双亲委派模型：Bootstrap ClassLoader、Extension ClassLoader、ApplicationClassLoader。</p><blockquote><p>如果一个类加载器收到类加载的请求，首先不会自己尝试加载，先委派给父类加载器去完成，只有当父加载器无法加载时，子加载器才会尝试加载。这种机制下用户自定义的类加载器不可能加载由父加载器加载的可靠类，从而防止不可靠的恶意代码。</p></blockquote><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><h3 id="Error与Exception"><a href="#Error与Exception" class="headerlink" title="Error与Exception"></a>Error与Exception</h3><ul><li><p>Error是程序无法处理的错误，比如OutOfMemoryError、ThreadDeath等。这些异常发生时， Java虚拟机（JVM）一般会选择线程终止。</p></li><li><p>Exception是程序本身可以处理的异常，这种异常分两大类运行时异常和非运行时异常。  程序中应当尽可能去处理这些异常。</p><ul><li><p>运行时异常：</p><blockquote><p>运行时异常都是RuntimeException类及其子类异常，如NullPointerException、IndexOutOfBoundsException、ArithmeticException、 IllegalArgumentException 等， 这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p></blockquote></li><li><p>非运行时异常    </p><blockquote><p>非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p></blockquote></li></ul></li></ul><h3 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h3><blockquote><p>表示要尝试运行代码，try语句块中代码受异常监控，其中代码发生异常时，会抛出异常对象。</p></blockquote><h3 id="catch语句块"><a href="#catch语句块" class="headerlink" title="catch语句块"></a>catch语句块</h3><blockquote><p>捕获try代码块中发生的异常并在其代码块中做异常处理，catch语句带一个Throwable类型的参数，表示可捕获异常类型。当try中出现异常时，catch会捕获到发生的异常，并和自己的异常类型匹配，  若匹配，则执行catch块中代码，并将catch块参数指向所抛的异常对象。catch语句可以有多个，用来匹配多个中的一个异常，一旦匹配上后，就不再尝试匹配别的catch块了。通过异常对象可以获取异常发生时完整的JVM堆栈信息，以及异常信息和异常发生的原因等。</p></blockquote><h3 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h3><blockquote><p>是紧跟catch语句后的语句块，这个语句块总是会在方法返回前执行，而不管是否try语句块是否发生异常。并且这个语句块总是在方法返回前执行。目的是给程序一个补救的机会。这样做也体现了Java语言的健壮性。</p></blockquote><h3 id="try、catch、finally三个语句块应注意的问题"><a href="#try、catch、finally三个语句块应注意的问题" class="headerlink" title="try、catch、finally三个语句块应注意的问题"></a>try、catch、finally三个语句块应注意的问题</h3><ol><li>try、catch、finally三个语句块均不能单独使用，三者可以组成 try…catch…finally、try…catch、</li></ol><p>  try…finally三种结构，catch语句可以有一个或多个，finally语句最多一个。</p><ol start="2"><li>try、catch、finally三个代码块中变量的作用域为代码块内部，分别独立而不能相互访问。</li></ol><p>  如果要在三个块中都可以访问，则需要将变量定义到这些块的外面。</p><ol start="3"><li>多个catch块时候，只会匹配其中一个异常类并执行catch块代码，而不会再执行别的catch块，</li></ol><p>  并且匹配catch语句的顺序是由上到下。</p><h3 id="throw、throws关键字"><a href="#throw、throws关键字" class="headerlink" title="throw、throws关键字"></a>throw、throws关键字</h3><blockquote><p>throw关键字是用于方法体内部，用来抛出一个Throwable类型的异常。如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。如果抛出的是Error或RuntimeException，则该方法的调用者可选择处理该异常。有关异常的转译会在下面说明。</p><p>throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣一般在catch块中打印一下堆栈信息做个勉强处理。</p></blockquote><h3 id="try中return，则finally语句是否执行，什么时候执行？"><a href="#try中return，则finally语句是否执行，什么时候执行？" class="headerlink" title="try中return，则finally语句是否执行，什么时候执行？"></a>try中return，则finally语句是否执行，什么时候执行？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class smallT &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        smallT t = new smallT();</span><br><span class="line">        int b = t.get();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            return 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先返回1，最终返回的是2。</p><p>try中的return 语句调用的函数先于 finally中调用的函数执行，也就是说 return语句先执行，finally语句后执行，所以，返回的结果是 2。Return 并不是让函数马上返回，而是 return语句执行后，将把返回结果放置进函数栈中，此时函数并不是马上返回，它要执行 finally语句后才真正开始返回。</p><h1 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h1><h2 id="流式处理"><a href="#流式处理" class="headerlink" title="流式处理"></a>流式处理</h2><blockquote><p>将待处理的集合当成流经过管道的处理，比如筛选、排序、聚合等，得到最终想要的结果。</p></blockquote><p>forEach</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Random random = new Random(); </span><br><span class="line"></span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">//打印对象</span><br><span class="line"></span><br><span class="line">students.stream().forEach(s-&gt;&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println(s.getName())</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line"></span><br><span class="line"> // 获取对应的平方数 </span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>filter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings = Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;); </span><br><span class="line"></span><br><span class="line">// 获取空字符串的数量 </span><br><span class="line"></span><br><span class="line">long count = strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure><p>limit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Random random = new Random(); </span><br><span class="line"></span><br><span class="line">random.ints().limit(10).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>order</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//按照对象的某个属性排序</span><br><span class="line"></span><br><span class="line">students.stream().sorted(Comparator.comparing(Student::getBirthday)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">//倒序</span><br><span class="line"></span><br><span class="line">students.stream().sorted(Comparator.comparing(Student::getBirthday).reversed()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>match</p><ul><li>allMatch：Stream 中全部元素符合则返回 true ;</li><li>anyMatch：Stream 中只要有一个元素符合则返回 true;</li><li>noneMatch：Stream 中没有一个元素符合则返回 true。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">boolean all = lists.stream().allMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否都大于3:&quot; + all);</span><br><span class="line"></span><br><span class="line">boolean any = lists.stream().anyMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否有一个大于3:&quot; + any);</span><br><span class="line"></span><br><span class="line">boolean none = lists.stream().noneMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否没有一个大于3的:&quot; + none);    </span><br><span class="line"></span><br><span class="line">// 是否都大于3:false</span><br><span class="line"></span><br><span class="line">// 是否有一个大于3:true</span><br><span class="line"></span><br><span class="line">// 是否没有一个大于3的:false</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;boolean (8bit),byte(8bit),char(16bit),short(1</summary>
      
    
    
    
    <category term="record" scheme="https://dogfun.top/categories/record/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://dogfun.top/2021/03/31/middleware/mysql/"/>
    <id>https://dogfun.top/2021/03/31/middleware/mysql/</id>
    <published>2021-03-31T01:46:08.000Z</published>
    <updated>2022-03-31T09:55:45.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h1><ul><li>第一范式：列属性不可再分</li><li>第二范式：行有唯一主键，其他非主键列依赖于主键</li><li>第三范式：不能有传递依赖，消除冗余</li></ul><h1 id="事务的定义"><a href="#事务的定义" class="headerlink" title="事务的定义"></a>事务的定义</h1><blockquote><p>事务是数据库管理系统执行过程的一个逻辑单位，通俗地讲，一件事要么一次做完，要么不做。</p></blockquote><h2 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h2><ul><li><strong>原子性（Atomicity）</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li><strong>一致性（Consistency）</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。<em>一致状态</em>的含义是数据库中的数据应满足完整性约束。</li><li><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li><strong>持久性（Durability）</strong>：已被提交的事务对数据库的修改应该永久保存在数据库中。</li></ul><p><strong>例子</strong></p><p>　　比如去银行存款这个事务，分为几个操作，首先查询账户余额，修改余额，然后提交，这就是一个事务。</p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><blockquote><p>事务与事务会共同影响同一条数据，比如两个人同时操作一个账户就会引发各种问题，隔离级别决定了两个事务同时操作的作用范围。</p></blockquote><ul><li><p>读未提交</p><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">Begin</td><td align="center">Begin</td></tr><tr><td align="center"></td><td align="center">更新id=3的数据status=true</td></tr><tr><td align="center">查询id=3的数据，读到数据status=true</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">Commit</td></tr><tr><td align="center">Commit</td><td align="center"></td></tr></tbody></table></li><li><p>读已提交</p><table><thead><tr><th align="center">事务A</th><th align="center">事务B</th></tr></thead><tbody><tr><td align="center">Begin</td><td align="center">Begin</td></tr><tr><td align="center"></td><td align="center">更新id=3的数据status=true</td></tr><tr><td align="center">查询id=3的数据，读到数据status=false</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">Commit</td></tr><tr><td align="center">查询id=3的数据，读到数据status=true</td><td align="center"></td></tr><tr><td align="center">Commit</td><td align="center"></td></tr></tbody></table></li><li><p>可重复读</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>Begin</td><td>Begin</td></tr><tr><td></td><td>更新id=3的数据status=true</td></tr><tr><td>查询id=3的数据，读到数据status=false</td><td></td></tr><tr><td></td><td>Commit</td></tr><tr><td>查询id=3的数据，读到数据status=false</td><td></td></tr><tr><td>Commit</td><td></td></tr></tbody></table></li><li><p>串行</p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>Begin</td><td>Begin</td></tr><tr><td></td><td>更新id=3的数据status=true</td></tr><tr><td>查询id=3的数据，阻塞</td><td></td></tr><tr><td></td><td>Commit</td></tr><tr><td>查询id=3的数据，读到数据status=true</td><td></td></tr><tr><td>Commit</td><td></td></tr></tbody></table></li></ul><h2 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h2><blockquote><p>从代码的层面上讲，就是方法的嵌套调用过程中，方法A对其子方法B的调用过程中，对其事务的影响范围。</p></blockquote><ul><li><p>PROPAGATION_REQUIRED：支持当前事务，假设当前没有事务。就新建一个事务</p><p>方法A调用子方法B，A自动起一个事务，如果B没有起事务，自动加入到A事务中。</p></li><li><p>PROPAGATION_SUPPORTS：支持当前事务，假设当前没有事务，就以非事务方式运行</p><p>方法A调用子方法B，B会看当前有没有事务，有则加入，无则以非事务运行</p></li><li><p>PROPAGATION_MANDATORY：支持当前事务，假设当前没有事务，就抛出异常</p><p>方法A调用子方法B，B会看当前有没有事务，有则加入，无则抛异常</p></li><li><p>PROPAGATION_REQUIRES_NEW：新建事务，假设当前存在事务。把当前事务挂起</p><p>方法A调用子方法B，B会起一个新事务，B的事务提交后，A的事务才会继续运行，B的事务失败回滚，A事务还是有可能提交</p></li><li><p>PROPAGATION_NOT_SUPPORTED：以非事务方式运行操作。假设当前存在事务，就把当前事务挂起</p><p>方法A调用子方法B，A事务挂起，B以非事务运行</p></li><li><p>PROPAGATION_NEVER：以非事务方式运行，假设当前存在事务，则抛出异常</p><p>方法A调用子方法B，B发现在A的事务中，就抛出异常</p></li><li><p>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。</p></li></ul><hr><h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><ul><li><p>共享锁</p><p>也叫读锁，读锁是共享的，相互不阻塞，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。</p></li><li><p>排他锁</p><p>写锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。</p></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote><p>索引是数据库中为了提高数据查询速度而使用的一种数据结构，以一种结构化的存储方式来索引相关数据，达到快速查询的目的。通俗的讲类似书的目录，通过目录来查询数据效率会有极大提升。</p></blockquote><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p> 索引常用的数据结构：</p><ul><li>哈希表</li><li>有序数组</li><li>搜索树</li></ul><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>　　适用于等值查询的场景，key通过哈希函数得到一个确定的位置，上面放对应的value。使用链表解决哈希冲突。不适合范围查询，因为需要全表扫描，无法利用索引完成排序，不支持多列联合索引的最左匹配规则，如果有大量重复键值的情况会产生哈希碰撞问题。</p><h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><p>　　只适用于静态搜索引擎，索引列的数据按照规则排序，查找数据可以直接二分查找，时间复杂度是O(log(N))支持范围查询。缺点是更新数据比较麻烦，需要移动记录。</p><h3 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a>搜索树</h3><p>　　大部分数据库引擎采用这种数据结构，读写的性能优点适配磁盘的访问模式。搜索树的特点是左儿子节点的数据小于父节点，父节点小于右儿子节点，每个节点的多个儿子从左到右递增，查询的时间复杂度是O(log(N))。</p><h2 id="InnoDB的索引模型"><a href="#InnoDB的索引模型" class="headerlink" title="InnoDB的索引模型"></a>InnoDB的索引模型</h2><p>采用B+树，是一种多路平衡查询树</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>主键索引，也叫聚簇索引，叶子节点存整行数据。</p></li><li><p>非主键索引，叶子节点存放的是主键的值。</p></li><li><p>覆盖索引，索引上已经覆盖了查询的需求，无需回表。</p></li></ul><blockquote><p>区别：通过非主键索引查找非主键列的话，需要再用主键去主键索引查找相应的数据，这个过程叫回表，也就是多扫描一次索引树。</p></blockquote><h3 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h3><p>　　B+树需要维护索引的有序，因此插入新值时需要维护，如果所在的数据页满了，则要申请一个新的数据页，然后将部分数据迁移过去，这个过程称为页分裂，反过来则称为页合并。</p><p>　　采用自增主键插入数据时，由于主键是递增的，因此索引新增都是以追加的方式，不会引起页分裂，如果采用业务逻辑字段做主键，不容易保证有序插入，写数据成本会很高。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>　　索引的搜索匹配按最左前缀匹配，不管是联合索引还是字符串索引的最左M个字符，在构造索引树时，已经按照索引的定义去进行了排序，比如联合索引(a,b)，在存储上也当成一个字节数组，排序也是按字节去比较排序。这也就是为什么会是最左前缀原则生效的原因。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">联合索引（a,b）</span><br><span class="line"></span><br><span class="line">#可以覆盖到a</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> a<span class="operator">=</span><span class="string">&#x27;cc&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#覆盖到a，覆盖不到b，因为中间用了<span class="operator">%</span>通配符</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> a<span class="operator">=</span><span class="string">&#x27;cc%&#x27;</span> <span class="keyword">and</span> b<span class="operator">=</span><span class="string">&#x27;dd&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#覆盖到a和b</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> a<span class="operator">=</span><span class="string">&#x27;cc&#x27;</span>  <span class="keyword">and</span> b<span class="operator">=</span><span class="string">&#x27;dd&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><blockquote><p>Mysql5.6之后在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。比如联合索引(a,b)，根据a,b条件先筛选出符合条件的数据再进行回表。</p></blockquote><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>模糊匹配、类型隐转、最左匹配</p><ul><li>%导致没有命中</li><li>参数类型跟sql查询的类型不一致，使用了函数</li><li>比如说组合索引，由a、b、c组成，查询c没法命中</li></ul><h3 id="如何排查慢查询"><a href="#如何排查慢查询" class="headerlink" title="如何排查慢查询"></a>如何排查慢查询</h3><p>根据explain执行计划，主要关注两个指标，一个是type，是全表还是范围查询，看key是否有命中索引，看rows，返回的行数</p><p>工作例子：一个报表查询，数据量100w左右，sql用到了聚合函数，临时表，查询速度到了几秒，通过explain分析，统计部分临时表的数据量很大，实际最后的结果集数据rows仅少量，索引也没有命中，走的是全表扫描，原表的日期用的是char来存，sql语句采用to_date()函数与传入的日期参数比较，导致索引失效，去除函数，并且对聚合查询做提前的条件过滤</p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>1)、选择唯一性索引</p><p>2)、为经常需要排序、分组和联合操作的字段建立索引</p><p>3)、为常作为查询条件的字段建立索引</p><p>4)、限制索引的数目</p><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><p>5)、尽量使用数据量少的索引</p><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间要多。</p><p>6)、尽量使用前缀来索引</p><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><p>7)、最左前缀匹配原则</p><p>8)、查询时使用计算，会导致索引失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.PRIMARY  KEY（主键索引）</span><br><span class="line">mysql&gt;ALTER  TABLE  `table_name`  ADD  PRIMARY  KEY (  `column`  ) </span><br><span class="line">2.UNIQUE(唯一索引)</span><br><span class="line">mysql&gt;ALTER  TABLE  `table_name`  ADD  UNIQUE (`column` ) </span><br><span class="line">3.INDEX(普通索引)</span><br><span class="line">mysql&gt;ALTER  TABLE  `table_name`  ADD  INDEX index_name (  `column`  )</span><br><span class="line">4.FULLTEXT(全文索引)</span><br><span class="line">mysql&gt;ALTER  TABLE  `table_name`  ADD  FULLTEXT ( `column` )</span><br><span class="line">5.多列索引</span><br><span class="line">mysql&gt;ALTER  TABLE  `table_name`  ADD  INDEX index_name (  `column1`,  `column2`,  `column3`  )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h1><p>​    1)、statement模式下，每一条会修改数据的sql都会记录在binlog中。不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。由于sql的执行是有上下文的，因此在保存的时候需要保存相关的信息，同时还有一些使用了函数之类的语句无法被记录复制。</p><p>​    2)、row级别下，不记录sql语句上下文相关信息，仅保存哪条记录被修改。记录单元为每一行的改动，基本是可以全部记下来但是由于很多操作，会导致大量行的改动(比如alter table)，因此这种模式的文件保存的信息太多，日志量太大。</p><p>​    3)、mixed，一种折中的方案，普通操作使用statement记录，当无法使用statement的时候使用row。</p><p>此外，新版的MySQL中对row级别也做了一些优化，当表结构发生变化的时候，会记录语句而不是逐行记录。</p><h1 id="SQL常用"><a href="#SQL常用" class="headerlink" title="SQL常用"></a>SQL常用</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*sql: 去除数据库表中 tab、空格、回车符等特殊字符的解决方法</span></span><br><span class="line"><span class="comment">去除 tab、空格、回车符等使用 replace 语句</span></span><br><span class="line"><span class="comment">按照 ASCII 码*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">char</span>(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*例如 64 对应 @，则 */</span></span><br><span class="line"><span class="keyword">select</span> REPLACE(‘abc<span class="variable">@qq</span>.com’,<span class="type">char</span>(<span class="number">64</span>),’kk’)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*则结果为 abckkqq.com*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*依此类推，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">去掉其他特殊符号，参考 ASCII 码对照表，去掉 tab 符号为*/</span></span><br><span class="line"> <span class="keyword">select</span> REPLACE(‘要替换的字符或列名’,<span class="type">char</span>(<span class="number">9</span>),’替换的目标字符’)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉空格符号为*/</span> </span><br><span class="line"><span class="keyword">select</span> REPLACE(‘要替换的字符或列名’,<span class="type">char</span>(<span class="number">32</span>),’替换的目标字符’)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉换行符号为*/</span> </span><br><span class="line"><span class="keyword">select</span> REPLACE(‘要替换的字符或列名’,<span class="type">char</span>(<span class="number">10</span>),’替换的目标字符’)<span class="operator">*</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><h2 id="获取近12个月"><a href="#获取近12个月" class="headerlink" title="获取近12个月"></a>获取近12个月</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">3</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">4</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">5</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">6</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">8</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">9</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>` </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">SELECT</span> DATE_FORMAT((CURDATE() <span class="operator">-</span> <span class="type">INTERVAL</span> <span class="number">11</span> <span class="keyword">MONTH</span>), <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> `<span class="keyword">month</span>`</span><br></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><h2 id="length"><a href="#length" class="headerlink" title="length()"></a>length()</h2><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID()"></a>UUID()</h2><p>有时需要对表里的批量数据设置主键uuid，要求每条数据的uuid都不一样。 </p><p>一、方法：</p><p>UPDATE table SET id=UUID();</p><p>UPDATE table SET id=REPLACE(id, ‘-‘, ‘’);</p><h2 id="批量修改表字段排序规则"><a href="#批量修改表字段排序规则" class="headerlink" title="批量修改表字段排序规则"></a>批量修改表字段排序规则</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#改变字段数据</span><br><span class="line">SELECT</span><br><span class="line">TABLE_SCHEMA &#x27;数据库&#x27;,</span><br><span class="line">TABLE_NAME &#x27;表&#x27;,</span><br><span class="line">COLUMN_NAME &#x27;字段&#x27;,</span><br><span class="line">CHARACTER_SET_NAME &#x27;原字符集&#x27;,</span><br><span class="line">COLLATION_NAME &#x27;原排序规则&#x27;,</span><br><span class="line">CONCAT( &#x27;ALTER TABLE &#x27;, TABLE_SCHEMA, &#x27;.&#x27;, TABLE_NAME, &#x27; MODIFY COLUMN &#x27;, COLUMN_NAME, &#x27; &#x27;, COLUMN_TYPE, &#x27; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;&#x27; ) &#x27;修正SQL&#x27; </span><br><span class="line">FROM</span><br><span class="line">information_schema.`COLUMNS` </span><br><span class="line">WHERE</span><br><span class="line">COLLATION_NAME RLIKE &#x27;utf8mb4_0900_ai_ci&#x27; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h2><p>字符串转日期-STR_TO_DATE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> install_time <span class="keyword">from</span> rs_device <span class="keyword">where</span> install_time <span class="operator">&gt;=</span> STR_TO_DATE(<span class="string">&#x27;2021-06-25 03:15:00&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>)</span><br></pre></td></tr></table></figure><p>日期转字符串-DATE_FORMAT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> rs_device <span class="keyword">where</span> DATE_FORMAT(install_time,<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="operator">&gt;=</span> DATE_FORMAT(<span class="built_in">CURRENT_DATE</span>,<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="count的用法"><a href="#count的用法" class="headerlink" title="count的用法"></a>count的用法</h2><p><strong>count(*)、count(id)、count(1)、count(字段)的区别，针对MySQL</strong></p><p>count(id)，InnoDB会遍历整张表，把每行的id取出来，返回给server层，判断不为空，按行累计。</p><p>count(1)，InnoDB会遍历整张表，每行放数字1进去，返回给server层，判断不为空，按行累计。</p><p>count(字段)</p><ul><li>如果字段定义为not null，一行行取出这个字段，判断不能为null，按行累加。</li><li>如果字段定位为null，那么取的时候需要判断一下，不为null才累加。</li></ul><p>count(*)，不会取全部字段，因为肯定不是null，直接按行累加。</p><blockquote><p>效率：count(字段)&lt;count(主键id)&lt;count(1)≈count(*)。尽量使用count(*)</p></blockquote><h2 id="Navicat更新数据"><a href="#Navicat更新数据" class="headerlink" title="Navicat更新数据"></a>Navicat更新数据</h2><p>MySQL是默认提交事务的，所以写query时，如果写了条update是直接提交的，如果想回滚怎么办？只能找binlog非常麻烦。正确的姿势应该是在query页中，提前set autocommit=0，也就是关闭自动提交，但这仅在当前query页中生效，重启或者打开新标签页会失效，然后你的update语句需要显式commit才能提交，这样你能在commit前select一下查看当前执行结果，Innodb的隔离级别默认是可重复读的，所以能读到当前事务下的数据结果，如果不对就执行rollback。</p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><ul><li>查看分区详情</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> PARTITION_NAME,PARTITION_METHOD,PARTITION_EXPRESSION,PARTITION_DESCRIPTION,TABLE_ROWS,SUBPARTITION_NAME,SUBPARTITION_METHOD,SUBPARTITION_EXPRESSION</span><br><span class="line"><span class="keyword">FROM</span> information_schema.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA<span class="operator">=</span>SCHEMA() <span class="keyword">AND</span> TABLE_NAME<span class="operator">=</span><span class="string">&#x27;base_resident_vmcard&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="优化原则"><a href="#优化原则" class="headerlink" title="优化原则"></a>优化原则</h2><ul><li>不要超过5个表以上的表连接</li><li>使用临时表存放中间结果</li><li>减少使用子查询</li><li>表连接前提前过滤数据，避免使用select*</li></ul><h2 id="IN与NOT-IN操作符"><a href="#IN与NOT-IN操作符" class="headerlink" title="IN与NOT IN操作符"></a>IN与NOT IN操作符</h2><p>改操作符oracle会将其转换为多表连接，改为exists</p><p>SELECT *</p><p>FROM TBL_REBATE_DAY_COUNT</p><p>WHERE ID IN (1, 2, 3, 4, 5);</p><p>SELECT *</p><p>FROM TBL_REBATE_DAY_COUNT a</p><p>WHERE exists(SELECT *</p><p>​       FROM TBL_ALGO_RECORD b WHERE a.ID = b.ID);</p><h2 id="IS-NULL或IS-NOT-NULL"><a href="#IS-NULL或IS-NOT-NULL" class="headerlink" title="IS NULL或IS NOT NULL"></a>IS NULL或IS NOT NULL</h2><p>任何包含NULL值的列都不会包含在索引中。可以使用其他操作运算符替代，改为a&gt;0或a&gt;’’</p><h2 id="gt-及-lt-操作符（大于或小于操作符）"><a href="#gt-及-lt-操作符（大于或小于操作符）" class="headerlink" title="&gt; 及 &lt; 操作符（大于或小于操作符）"></a>&gt; 及 &lt; 操作符（大于或小于操作符）</h2><p>大于或小于操作符一般情况下是不用调整的，因为它有索引就会采用索引查找，但有的情况下可以对它进行优化，如一个表有100万记录，一个数值型字段A，30万记录的A=0，30万记录的A=1，39万记录的A=2，1万记录的A=3。那么执行A&gt;2与A&gt;=3的效果就有很大的区别了，因为A&gt;2时ORACLE会先找出为2的记录索引再进行比较，而A&gt;=3时ORACLE则直接找到=3的记录索引。</p><h2 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h2><p>前置匹配忽略</p><p>select * from dual where name like ‘c%’;</p><h2 id="UNION操作符"><a href="#UNION操作符" class="headerlink" title="UNION操作符"></a>UNION操作符</h2><p>UNION在进行表链接后会筛选掉重复的记录，所以在表链接后会对所产生的结果集进行排序运算，删除重复的记录再返回结果。</p><p>采用UNION ALL操作符替代UNION，因为UNION ALL操作只是简单的将两个结果合并后就返回。</p><h2 id="联接列"><a href="#联接列" class="headerlink" title="联接列"></a>联接列</h2><p>select * from employss where first_name||’’||last_name =’Beill Cliton’;</p><p>where first_name =’Beill’ and last_name =’Cliton’;</p><h2 id="Order-by语句"><a href="#Order-by语句" class="headerlink" title="Order by语句"></a>Order by语句</h2><p>ORDER BY语句决定了Oracle如何将返回的查询结果排序。Order by语句对要排序的列没有什么特别的限制，也可以将函数加入列中(象联接或者附加等)。任何在Order by语句的非索引项或者有计算表达式都将降低查询速度。</p><p>仔细检查order by语句以找出非索引项或者表达式，它们会降低性能。解决这个问题的办法就是重写order by语句以使用索引，也可以为所使用的列建立另外一个索引，同时应绝对避免在order by子句中使用表达式。</p><h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><h2 id="时间范围查询"><a href="#时间范围查询" class="headerlink" title="时间范围查询"></a>时间范围查询</h2><h3 id="1-传入时间范围参数类型是字符串"><a href="#1-传入时间范围参数类型是字符串" class="headerlink" title="1.传入时间范围参数类型是字符串"></a>1.传入时间范围参数类型是字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test=&quot;startTime!=null and startTime.trim() neq &#x27;&#x27;&quot;&gt;</span><br><span class="line">    and date_format(create_time,&#x27;%Y-%m-%d %H:%i:%s&#x27;) &amp;gt;= str_to_date(#&#123;startTime&#125;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;endTime!=null and endTime.trim() neq &#x27;&#x27;&quot;&gt;</span><br><span class="line">    and date_format(create_time,&#x27;%Y-%m-%d %H:%i:%s&#x27;) &amp;lt;= str_to_date(#&#123;endTime&#125;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)</span><br><span class="line">  &lt;/if&gt;</span><br></pre></td></tr></table></figure><h3 id="2-传入时间范围参数类型是Date"><a href="#2-传入时间范围参数类型是Date" class="headerlink" title="2.传入时间范围参数类型是Date"></a>2.传入时间范围参数类型是Date</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test=&quot;startTime!=null and startTime.trim() neq &#x27;&#x27;&quot;&gt;</span><br><span class="line">   and date_format(create_time,&#x27;%Y-%m-%d %H:%i:%s&#x27;) &amp;gt;= date_format(#&#123;startTime&#125;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)</span><br><span class="line"> &lt;/if&gt;</span><br><span class="line"> &lt;if test=&quot;endTime!=null and endTime.trim() neq &#x27;&#x27;&quot;&gt;</span><br><span class="line">   and date_format(create_time,&#x27;%Y-%m-%d %H:%i:%s&#x27;) &amp;lt;= date_format(#&#123;endTime&#125;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)</span><br><span class="line"> &lt;/if&gt;</span><br></pre></td></tr></table></figure><h3 id="3-Mybatis-Plus时间范围查询"><a href="#3-Mybatis-Plus时间范围查询" class="headerlink" title="3.Mybatis-Plus时间范围查询"></a>3.Mybatis-Plus时间范围查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;Record&gt; page = new Page&lt;&gt;(page, limit);</span><br><span class="line">IPage&lt;Record&gt; result = iRecordService.page(page,</span><br><span class="line">       new LambdaQueryWrapper&lt;Record&gt;()</span><br><span class="line">           .apply(StrUtil.isNotBlank(start_date),</span><br><span class="line">                   &quot;date_format (optime,&#x27;%Y-%m-%d&#x27;) &gt;= date_format(&#x27;&quot; + start_date + &quot;&#x27;,&#x27;%Y-%m-%d&#x27;)&quot;)</span><br><span class="line">           .apply(StrUtil.isNotBlank(end_date),</span><br><span class="line">                   &quot;date_format (optime,&#x27;%Y-%m-%d&#x27;) &lt;= date_format(&#x27;&quot; + end_date + &quot;&#x27;,&#x27;%Y-%m-%d&#x27;)&quot;)</span><br><span class="line">           .orderByDesc(HmsFaceDetectLog::getOptime));</span><br></pre></td></tr></table></figure><h1 id="缓存与数据"><a href="#缓存与数据" class="headerlink" title="缓存与数据"></a>缓存与数据</h1><h2 id="先删除缓存再更新DB"><a href="#先删除缓存再更新DB" class="headerlink" title="先删除缓存再更新DB"></a>先删除缓存再更新DB</h2><p>　　出现脏数据的概率较大，假设系统存在两条线程，一条是查询，一条是更新，当更新时，先删除缓存，此时查询线程不能命中缓存，去查库，此时load的是旧数据，然后将旧数据缓存，更新线程此时才更新数据库。这样很大的概率缓存是脏数据。</p><h2 id="先更新DB再删除缓存"><a href="#先更新DB再删除缓存" class="headerlink" title="先更新DB再删除缓存"></a>先更新DB再删除缓存</h2><p>　　产生脏数据的概率低，同样是上个例子两条线程，当更新DB时，查询线程查的是旧数据，此时删除缓存，下次查询则会去查库，保证新数据，不会影响后面的数据。这种情况产生脏数据的情形：查询线程命中不了缓存，去查库，此时更新操作删除缓存，尔后查询线程load旧数据进缓存，这才造成脏数据。出现的条件在于查库线程在更新操作之前，且在更新线程删除缓存之后load数据进缓存。条件比较苛刻，可以忽略。</p><hr><h1 id="Mysql主从复制搭建"><a href="#Mysql主从复制搭建" class="headerlink" title="Mysql主从复制搭建"></a>Mysql主从复制搭建</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>读写分离</p><ul><li>主服务器执行写、更新操作，从服务器对外提供读功能，根据需要调整从服务器数量提高数据库性能</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Mysql服务器之间的主从同步是基于二进制日志机制，主服务器使用二进制日志来记录数据库的变动情况，从服务器通过读取和执行该日志文件来保持和主服务器的数据一致。</p><p>在使用二进制日志时，主服务器的所有操作都会被记录下来，然后从服务器会接收到该日志的一个副本。从服务器可以指定执行该日志中的哪一类事件（譬如只插入数据或者只更新数据），默认会执行日志中的所有语句。</p><p>每一个从服务器会记录关于二进制日志的信息：文件名和已经处理过的语句，这样意味着不同的从服务器可以分别执行同一个二进制日志的不同部分，并且从服务器可以随时连接或者中断和服务器的连接。</p><p>主服务器和每一个从服务器都必须配置一个唯一的ID号（在my.cnf文件的[mysqld]模块下有一个server-id配置项），另外，每一个从服务器还需要通过CHANGE MASTER TO语句来配置它要连接的主服务器的ip地址，日志文件名称和该日志里面的位置（这些信息存储在主服务器的数据库里）</p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><ul><li>docker-compose.yml<ul><li>master<ul><li>conf<ul><li>my.cnf</li></ul></li><li>db</li><li>init<ul><li>init.sql</li></ul></li></ul></li><li>slave<ul><li>conf<ul><li>my.cnf</li></ul></li><li>db</li><li>init<ul><li>init.sql</li></ul></li></ul></li></ul></li></ul><h2 id="dock-compose-yml"><a href="#dock-compose-yml" class="headerlink" title="dock-compose.yml"></a>dock-compose.yml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  db-master:</span><br><span class="line">    container_name: mysql-master</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">        MYSQL_ROOT_PASSWORD: &quot;12345678&quot;</span><br><span class="line">        MYSQL_USER: &#x27;test&#x27;</span><br><span class="line">        MYSQL_PASS: &#x27;12345678&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      # &lt;Port exposed&gt; : &lt; MySQL Port running inside container&gt;</span><br><span class="line">      - &#x27;3306:3306&#x27;</span><br><span class="line">    # Where our data will be persisted</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./master/db/:/var/lib/mysql&quot;</span><br><span class="line">      - &quot;./master/conf/my.cnf:/etc/my.cnf&quot;</span><br><span class="line">      - &quot;./master/init/:/docker-entrypoint-initdb.d/&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - net-mysql</span><br><span class="line">  </span><br><span class="line">  db-slave:</span><br><span class="line">    container_name: mysql-slave</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">        MYSQL_ROOT_PASSWORD: &quot;12345678&quot;</span><br><span class="line">        MYSQL_USER: &#x27;test&#x27;</span><br><span class="line">        MYSQL_PASS: &#x27;12345678&#x27;</span><br><span class="line">    ports:</span><br><span class="line">      # &lt;Port exposed&gt; : &lt; MySQL Port running inside container&gt;</span><br><span class="line">      - &#x27;3307:3306&#x27;</span><br><span class="line">    # Where our data will be persisted</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./slave/db/:/var/lib/mysql&quot;</span><br><span class="line">      - &quot;./slave/conf/my.cnf:/etc/my.cnf&quot;</span><br><span class="line">      - &quot;./slave/init/:/docker-entrypoint-initdb.d/&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - net-mysql</span><br><span class="line">  </span><br><span class="line"># Names our volume</span><br><span class="line">volumes:</span><br><span class="line">  my-db-master:</span><br><span class="line">  my-db-slave: </span><br><span class="line"></span><br><span class="line">networks: </span><br><span class="line">  net-mysql:</span><br><span class="line">    driver: bridge</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="master节点"><a href="#master节点" class="headerlink" title="master节点"></a>master节点</h2><h3 id="my-conf"><a href="#my-conf" class="headerlink" title="my.conf"></a>my.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">server_id = 10</span><br><span class="line">user=mysql</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="slave节点"><a href="#slave节点" class="headerlink" title="slave节点"></a>slave节点</h2><h3 id="my-conf-1"><a href="#my-conf-1" class="headerlink" title="my.conf"></a>my.conf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">server_id = 11</span><br><span class="line">relay_log = /var/lib/mysql/mysql-relay-bin</span><br><span class="line">log_slave_updates = 1</span><br><span class="line">read_only = 1</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进入从节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec db-slave bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># 创建用户授权</span><br><span class="line">GRANT SELECT,INSERT ON *.*</span><br><span class="line">     TO &#x27;testUser&#x27;@&#x27;localhost&#x27;</span><br><span class="line">     IDENTIFIED BY &#x27;testPwd&#x27;</span><br><span class="line">     WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line"># 配置从节点</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;172.21.0.2&#x27;, MASTER_USER=&#x27;root&#x27;, MASTER_PASSWORD=&#x27;12345678&#x27;, MASTER_LOG_FILE=&#x27;mysql-bin.000001&#x27;, MASTER_LOG_POS=0;</span><br><span class="line"></span><br><span class="line">查看状态</span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><img src="/assets/blog_img/%E6%88%AA%E5%B1%8F2021-11-28.png" alt="效果图"></p></blockquote>]]></content>
    
    
    <summary type="html">mysql笔记</summary>
    
    
    
    <category term="middleware" scheme="https://dogfun.top/categories/middleware/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 03. 数组中重复的数字</title>
    <link href="https://dogfun.top/2021/03/31/algorithm/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://dogfun.top/2021/03/31/algorithm/%E5%89%91%E6%8C%87%20Offer%2003.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2021-03-31T01:19:22.000Z</published>
    <updated>2022-04-07T02:18:02.629Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; s = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              s.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="algorithm" scheme="https://dogfun.top/categories/algorithm/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>704.二分查找</title>
    <link href="https://dogfun.top/2021/03/29/algorithm/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>https://dogfun.top/2021/03/29/algorithm/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2021-03-29T13:19:22.000Z</published>
    <updated>2022-04-07T02:17:46.510Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low=<span class="number">0</span>,high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high = mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low = mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="algorithm" scheme="https://dogfun.top/categories/algorithm/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="https://dogfun.top/2021/03/27/algorithm/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://dogfun.top/2021/03/27/algorithm/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2021-03-27T13:19:22.000Z</published>
    <updated>2022-04-07T02:17:54.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">  ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">  ListNode cur = head;</span><br><span class="line">  <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    ListNode tmp = cur.next;</span><br><span class="line">    cur.next = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">  ListNode last = reverse(head.next);</span><br><span class="line">  head.next.next = head;</span><br><span class="line">  head.next = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;迭代法&quot;&gt;&lt;a href=&quot;#迭代法&quot; class=&quot;headerlink&quot; title=&quot;迭代法&quot;&gt;&lt;/a&gt;迭代法&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    <category term="algorithm" scheme="https://dogfun.top/categories/algorithm/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 09. 用两个栈实现队列</title>
    <link href="https://dogfun.top/2021/02/20/algorithm/%E5%89%91%E6%8C%87%20Offer%2009.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://dogfun.top/2021/02/20/algorithm/%E5%89%91%E6%8C%87%20Offer%2009.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2021-02-20T01:19:22.000Z</published>
    <updated>2022-04-07T02:18:07.625Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class CQueue &#123;</span><br><span class="line"></span><br><span class="line">  Stack&lt;Integer&gt; s1;</span><br><span class="line">  Stack&lt;Integer&gt; s2;</span><br><span class="line"></span><br><span class="line">  public CQueue() &#123;</span><br><span class="line">    s1 = new Stack();</span><br><span class="line">    s2 = new Stack();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void appendTail(int value) &#123;</span><br><span class="line">    while (s2.size() &gt; 0) &#123;</span><br><span class="line">      s1.push(s2.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    s1.push(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public int deleteHead() &#123;</span><br><span class="line">    while (s1.size() &gt; 0) &#123;</span><br><span class="line">      s2.push(s1.pop());</span><br><span class="line">    &#125;</span><br><span class="line">    return s2.size() == 0 ? -1 : s2.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"> * Your CQueue object will be instantiated and called as such:</span><br><span class="line"> * CQueue obj = new CQueue();</span><br><span class="line"> * obj.appendTail(value);</span><br><span class="line"> * int param_2 = obj.deleteHead();</span><br><span class="line">   */</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="algorithm" scheme="https://dogfun.top/categories/algorithm/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 10- I. 斐波那契数列</title>
    <link href="https://dogfun.top/2021/02/20/algorithm/%E5%89%91%E6%8C%87%20Offer%2010-%20I.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://dogfun.top/2021/02/20/algorithm/%E5%89%91%E6%8C%87%20Offer%2010-%20I.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2021-02-20T01:19:22.000Z</published>
    <updated>2022-04-07T02:18:13.337Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"></span><br><span class="line">  public int fib(int n) &#123;</span><br><span class="line">    if (n == 0 || n == 1) &#123;</span><br><span class="line">      return n;</span><br><span class="line">    &#125;</span><br><span class="line">    int a = 1, b = 0;</span><br><span class="line">    for (i = 1; i &lt; n; i++) &#123;</span><br><span class="line">      a = a + b;</span><br><span class="line">      b = a - b;</span><br><span class="line">      a %= 1000000007;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="algorithm" scheme="https://dogfun.top/categories/algorithm/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
