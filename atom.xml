<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CaryTseng</title>
  <icon>https://www.gravatar.com/avatar/bac9080800c06a1b685d5f013601b128</icon>
  <subtitle>philosopher on coding</subtitle>
  <link href="https://dogfun.top/atom.xml" rel="self"/>
  
  <link href="https://dogfun.top/"/>
  <updated>2021-11-27T14:24:36.003Z</updated>
  <id>https://dogfun.top/</id>
  
  <author>
    <name>CaryTseng</name>
    <email>carytseng.kira@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Minio</title>
    <link href="https://dogfun.top/2021/11/27/Minio/"/>
    <id>https://dogfun.top/2021/11/27/Minio/</id>
    <published>2021-11-27T01:49:06.000Z</published>
    <updated>2021-11-27T14:24:36.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9001:9001 -d --name minio1 \</span><br><span class="line">  -v &#x2F;Users&#x2F;carytseng&#x2F;envir&#x2F;minio&#x2F;data:&#x2F;data \</span><br><span class="line">  -v &#x2F;Users&#x2F;carytseng&#x2F;envir&#x2F;minio&#x2F;config:&#x2F;root&#x2F;.minio \</span><br><span class="line">  -e &#39;MINIO_ROOT_USER&#x3D;admin&#39; \</span><br><span class="line">  -e &#39;MINIO_ROOT_PASSWORD&#x3D;admin123&#39; \</span><br><span class="line">  minio&#x2F;minio server &#x2F;data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Minio&quot;&gt;&lt;a href=&quot;#Minio&quot; class=&quot;headerlink&quot; title=&quot;Minio&quot;&gt;&lt;/a&gt;Minio&lt;/h1&gt;&lt;h2 id=&quot;docker安装&quot;&gt;&lt;a href=&quot;#docker安装&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="中间件" scheme="https://dogfun.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>NVM安装</title>
    <link href="https://dogfun.top/2021/10/25/NVM/"/>
    <id>https://dogfun.top/2021/10/25/NVM/</id>
    <published>2021-10-25T01:49:06.000Z</published>
    <updated>2021-11-27T14:23:41.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h1><p>1、nvm安装。nvm是node版本管理工具，为解决node各版本不兼容问题，nvm是让你在同一台机器上安装和切换不同版本的node</p><ol><li><p>brew install nvm</p></li><li><p>编辑配置文件，vim ~/.bash_profile，文件中写入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR&#x3D;~&#x2F;.nvm</span><br><span class="line">source $(brew --prefix nvm)&#x2F;nvm.sh</span><br></pre></td></tr></table></figure></li><li><p>保存，source ~/.bash_profile</p></li></ol><p>2、nvm切换镜像源，解决node下载卡/失败的问题</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  vim ~&#x2F;.bash_profile</span><br><span class="line">  &#x2F;&#x2F; 加入以下两条配置文件</span><br><span class="line">  export NVM_NODEJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node</span><br><span class="line">  export NVM_IOJS_ORG_MIRROR&#x3D;http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;iojs</span><br><span class="line">  &#x2F;&#x2F; 重启配置文件</span><br><span class="line">  source ~&#x2F;.bashrc</span><br><span class="line">  &#96;&#96;&#96;   </span><br><span class="line"></span><br><span class="line">3、安装node指定版本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  nvm ls-remote  // 查看所有的node可用版本<br>  nvm list  // 查看已安装node版本<br>  nvm install 版本号  // 下载指定node版本，如nvm install v11.14.0<br>  nvm use 版本号  // 使用指定版本<br>  nvm alias default  // 设置默认版本，每次启动终端都使用该版本<br>  ```</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;1、nvm安装。nvm是node版本管理工具，为解决node各版本不兼容问题，nvm是让你在同一台机器上安装和切换不同版本的node&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;brew install nvm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑配置文件，vim ~/.bash_profile，文件中写入如下内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export NVM_DIR&amp;#x3D;~&amp;#x2F;.nvm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source $(brew --prefix nvm)&amp;#x2F;nvm.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存，source ~/.bash_profile&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2、nvm切换镜像源，解决node下载卡/失败的问题&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  vim ~&amp;#x2F;.bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#x2F;&amp;#x2F; 加入以下两条配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  export NVM_NODEJS_ORG_MIRROR&amp;#x3D;http:&amp;#x2F;&amp;#x2F;npm.taobao.org&amp;#x2F;mirrors&amp;#x2F;node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  export NVM_IOJS_ORG_MIRROR&amp;#x3D;http:&amp;#x2F;&amp;#x2F;npm.taobao.org&amp;#x2F;mirrors&amp;#x2F;iojs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#x2F;&amp;#x2F; 重启配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  source ~&amp;#x2F;.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#96;&amp;#96;&amp;#96;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、安装node指定版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Node" scheme="https://dogfun.top/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>MyBatisPlus常用记录</title>
    <link href="https://dogfun.top/2021/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93/MyBatisPlus/"/>
    <id>https://dogfun.top/2021/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93/MyBatisPlus/</id>
    <published>2021-10-21T01:49:06.000Z</published>
    <updated>2021-10-21T12:42:43.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h2><h2 id="时间范围查询"><a href="#时间范围查询" class="headerlink" title="时间范围查询"></a>时间范围查询</h2><h3 id="1-传入时间范围参数类型是字符串"><a href="#1-传入时间范围参数类型是字符串" class="headerlink" title="1.传入时间范围参数类型是字符串"></a>1.传入时间范围参数类型是字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test&#x3D;&quot;startTime!&#x3D;null and startTime.trim() neq &#39;&#39;&quot;&gt;</span><br><span class="line">    and date_format(create_time,&#39;%Y-%m-%d %H:%i:%s&#39;) &gt;&#x3D; str_to_date(#&#123;startTime&#125;,&#39;%Y-%m-%d %H:%i:%s&#39;)</span><br><span class="line">  &lt;&#x2F;if&gt;</span><br><span class="line">  &lt;if test&#x3D;&quot;endTime!&#x3D;null and endTime.trim() neq &#39;&#39;&quot;&gt;</span><br><span class="line">    and date_format(create_time,&#39;%Y-%m-%d %H:%i:%s&#39;) &lt;&#x3D; str_to_date(#&#123;endTime&#125;,&#39;%Y-%m-%d %H:%i:%s&#39;)</span><br><span class="line">  &lt;&#x2F;if&gt;</span><br></pre></td></tr></table></figure><h3 id="2-传入时间范围参数类型是Date"><a href="#2-传入时间范围参数类型是Date" class="headerlink" title="2.传入时间范围参数类型是Date"></a>2.传入时间范围参数类型是Date</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test&#x3D;&quot;startTime!&#x3D;null and startTime.trim() neq &#39;&#39;&quot;&gt;</span><br><span class="line">   and date_format(create_time,&#39;%Y-%m-%d %H:%i:%s&#39;) &gt;&#x3D; date_format(#&#123;startTime&#125;,&#39;%Y-%m-%d %H:%i:%s&#39;)</span><br><span class="line"> &lt;&#x2F;if&gt;</span><br><span class="line"> &lt;if test&#x3D;&quot;endTime!&#x3D;null and endTime.trim() neq &#39;&#39;&quot;&gt;</span><br><span class="line">   and date_format(create_time,&#39;%Y-%m-%d %H:%i:%s&#39;) &lt;&#x3D; date_format(#&#123;endTime&#125;,&#39;%Y-%m-%d %H:%i:%s&#39;)</span><br><span class="line"> &lt;&#x2F;if&gt;</span><br></pre></td></tr></table></figure><h3 id="3-Mybatis-Plus时间范围查询"><a href="#3-Mybatis-Plus时间范围查询" class="headerlink" title="3.Mybatis-Plus时间范围查询"></a>3.Mybatis-Plus时间范围查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;Record&gt; page &#x3D; new Page&lt;&gt;(page, limit);</span><br><span class="line">IPage&lt;Record&gt; result &#x3D; iRecordService.page(page,</span><br><span class="line">       new LambdaQueryWrapper&lt;Record&gt;()</span><br><span class="line">           .apply(StrUtil.isNotBlank(start_date),</span><br><span class="line">                   &quot;date_format (optime,&#39;%Y-%m-%d&#39;) &gt;&#x3D; date_format(&#39;&quot; + start_date + &quot;&#39;,&#39;%Y-%m-%d&#39;)&quot;)</span><br><span class="line">           .apply(StrUtil.isNotBlank(end_date),</span><br><span class="line">                   &quot;date_format (optime,&#39;%Y-%m-%d&#39;) &lt;&#x3D; date_format(&#39;&quot; + end_date + &quot;&#39;,&#39;%Y-%m-%d&#39;)&quot;)</span><br><span class="line">           .orderByDesc(HmsFaceDetectLog::getOptime));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MyBatisPlus常用记录</summary>
    
    
    
    <category term="数据库" scheme="https://dogfun.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac平台下工具总结</title>
    <link href="https://dogfun.top/2021/09/25/mac/"/>
    <id>https://dogfun.top/2021/09/25/mac/</id>
    <published>2021-09-25T01:49:06.000Z</published>
    <updated>2021-11-27T14:12:06.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收藏软件网站"><a href="#收藏软件网站" class="headerlink" title="收藏软件网站"></a>收藏软件网站</h2><p><a href="https://www.macwk.com/" title="macwk">macwk</a></p><h2 id="必备工具"><a href="#必备工具" class="headerlink" title="必备工具"></a>必备工具</h2><ul><li>解压：Bandizip</li><li>影音：IINA</li><li>终端替代：iTerm2</li><li>文档阅览：PDF Expert</li><li>浏览器下载：NeatDownloadManager</li><li>磁力链接必备：迅雷</li><li>系统清理：Disk diet</li><li>本地索引搜索：HapiGo</li><li>外网工具：Clash</li><li>文档编辑：wps</li><li>邮件收发（主要可设代理，方便gmail）：Formail</li><li>文件管理器替代：TotalFinder</li></ul><h2 id="工作必备"><a href="#工作必备" class="headerlink" title="工作必备"></a>工作必备</h2><ul><li>MarkDown编辑：Typora</li><li>文本编辑：Sublime Text</li><li>Java开发：IDEA</li><li>数据库图形化：Navicat</li><li>git图形化工具：SourceTree</li><li>svn工具：Cornerstone</li><li>接口调试：PostMan</li><li>UML工具：draw.io</li><li>容器：docker</li><li>性能监控：JProfiler</li><li>文本对比：Beyond Compare</li><li>redis图形化工具：RDM</li><li>前端编辑：Visual Studio Code</li><li>ssh工具：Royal Tsx</li></ul><h3 id="文本编辑统一"><a href="#文本编辑统一" class="headerlink" title="文本编辑统一"></a>文本编辑统一</h3><p>将所有文本编辑类统一用visual studio code解决</p><ul><li>添加pretty json插件</li><li>markdown all in one插件</li></ul><h2 id="系统性能设置提升"><a href="#系统性能设置提升" class="headerlink" title="系统性能设置提升"></a>系统性能设置提升</h2><h3 id="设置性能模式"><a href="#设置性能模式" class="headerlink" title="设置性能模式"></a>设置性能模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">开启性能模式</span><br><span class="line">sudo nvram boot-args&#x3D;&quot;serverperfmode&#x3D;1 $(nvram boot-args 2&gt;&#x2F;dev&#x2F;null | cut -f 2-)&quot;</span><br><span class="line"></span><br><span class="line">关闭性能模式</span><br><span class="line">sudo nvram boot-args&#x3D;&quot;$(nvram boot-args 2&gt;&#x2F;dev&#x2F;null | sed -e $&#39;s&#x2F;boot-args\t&#x2F;&#x2F;;s&#x2F;serverperfmode&#x3D;1&#x2F;&#x2F;&#39;)&quot;</span><br><span class="line"></span><br><span class="line">查看当前模式</span><br><span class="line">nvram boot-args</span><br></pre></td></tr></table></figure><h3 id="设置显卡模式"><a href="#设置显卡模式" class="headerlink" title="设置显卡模式"></a>设置显卡模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pmset -a GPUSwitch 0 &#x2F;&#x2F; 强制使用集显</span><br><span class="line"></span><br><span class="line">sudo pmset -a GPUSwitch 1 &#x2F;&#x2F; 强制使用独显</span><br><span class="line"></span><br><span class="line">sudo pmset -a GPUSwitch 2 &#x2F;&#x2F; 自动切换模式</span><br></pre></td></tr></table></figure><h3 id="mac-上的-spotlight开关"><a href="#mac-上的-spotlight开关" class="headerlink" title="mac 上的 spotlight开关"></a>mac 上的 spotlight开关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关闭：</span><br><span class="line">sudo launchctl unload -w &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;com.apple.metadata.mds.plist</span><br><span class="line">打开（注意要使用HapiGo必须要打开，依赖此引擎）：</span><br><span class="line">sudo launchctl load -w &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;com.apple.metadata.mds.plist</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">常年使用mac平台总结出的优良体验，日常的效率工具，有助提升个人工作效率</summary>
    
    
    
    <category term="效率" scheme="https://dogfun.top/categories/%E6%95%88%E7%8E%87/"/>
    
    <category term="Mac OS" scheme="https://dogfun.top/categories/%E6%95%88%E7%8E%87/Mac-OS/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础补全</title>
    <link href="https://dogfun.top/2021/08/05/java/java/"/>
    <id>https://dogfun.top/2021/08/05/java/java/</id>
    <published>2021-08-05T11:59:19.000Z</published>
    <updated>2021-09-21T04:19:47.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li><p>boolean,byte,char,short,int,long,float,double,void</p></li><li><p>Boolean,Byte,Character,Integer,Long,Float,Double,Void</p></li></ul><h2 id="Java源文件名与类public修饰符"><a href="#Java源文件名与类public修饰符" class="headerlink" title="Java源文件名与类public修饰符"></a>Java源文件名与类public修饰符</h2><blockquote><p> 一个java源文件作为编译器的一个编译单元，可以有多个类，若有public类，则该类名与源文件名必须相同且只有一个，但源文件中不是必须含有public类，public类知识用来表示编译单元中存在公开接口。编译的时候java编译器判断如果存在public类，就将该类当做编译单元的对外接口，类加载器需要把该类加载。对于一个public类可以被项目中任何一个类引用。若源文件中含有public类，且含有main方法，则main方法必须在public类中定义。因为public类是对外的公开接口。</p></blockquote><h2 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h2><p>&amp;&amp;是短路操作符:若操作符左边的布尔表达式能推算出整个表达式的布尔值，则不计算右边的表达式。</p><p>&amp;是非短路操作符:始终会计算两边的布尔表达式。</p><h2 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a>==与equals</h2><p>==比较两个变量的值是否相等，也就是变量所存储的数值是否相等</p><p>若是基本类型，比较数值大小</p><p>若是对象类型，比较引用变量所指向的对象是否是同一个。</p><p>equals用于比较两个独立的对象是否相同，equals方法可覆盖，定义相同的条件</p><h2 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h2><ol><li><p>用new语句创建对象，这是最常用的创建对象的方式。</p></li><li><p>运用反射手段，调用<a href="http://lib.csdn.net/base/javase">Java</a>.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。</p></li><li><p>调用对象的clone()方法。</p></li><li><p>运用反序列化手段，调用java.io.ObjectInputStream对象的readObject()方法.</p></li></ol><h2 id="equal和hashcode"><a href="#equal和hashcode" class="headerlink" title="equal和hashcode"></a>equal和hashcode</h2><p>​        哈希码位于对象头中，每个对象都有。主要用于查找，如HashSet在存放对象时会使用对象的哈希码来计算存储位置，HashSet是不能存放相同的两个对象的，这个相同由我们自己定义，也即是equals方法。</p><p>为什么要保证equals方法相同的两个对象 hashcode相同？</p><ol><li><p>假设equals定义了两个相同的对象，而未覆写hashcode，则hashset容器根据不同的hashcode将两个对象都放进去。重写了，就会判断同一位置上已有相同的对象。</p></li><li><p>假设有相同hashcode，则会算出相同的存储位置，若不覆写equals方法，默认调用object的equals方法，比较两个引用地址，不同就都放进去，在同一位置上使用链表存储。所以必须覆写equals方法保证对象的合法性。</p></li></ol><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><blockquote><p>java基本数据类型是值传递，修改值不会对原来的值造成影响，对象类型都是引用传递，将对象引用的地址传递给方法参数，方法中修改对象属性即修改指向的内存空间上的对象的属性，java的方法只支持值传递。</p></blockquote><h2 id="方法重载与方法覆写"><a href="#方法重载与方法覆写" class="headerlink" title="方法重载与方法覆写"></a>方法重载与方法覆写</h2><p>方法重载发生在一个类中，多个同名函数同时存在，具有不同的参数个数、类型,调用方法时通过传递给它们的不同参数个数和参数类型决定具体使用哪个方法，这就是多态（编译时绑定），无法以返回类型作为重载标准。</p><p>方法覆写主要是子类对父类方法的重写，相同的名称和参数。子类函数的访问权限不能少于父类的。</p><p>动态绑定：</p><ol><li><p>编译器检查对象声明的类型和方法名，从而获取所有候选方法。</p></li><li><p>当程序运行并且使用动态绑定来调用一个方法时，那么虚拟机必须调用对象的实际类型相匹配的方法版本。</p></li></ol><ul><li><p>一个是编译时绑定，根据代码传入的参数类型或者个数来确定调用的方法</p></li><li><p>一个是运行时绑定，根据传入的对象类型，确定调用子类抑或父类的方法</p></li></ul><h2 id="静态变量与实例变量"><a href="#静态变量与实例变量" class="headerlink" title="静态变量与实例变量"></a>静态变量与实例变量</h2><p>语法定义：静态变量加static关键字，实例变量不需要</p><p>程序运行区别：</p><p>   实例变量与实例对象关联，必须创建实例对象，才能使用对象的实例变量。</p><p>   而静态变量与类关联，随着类的加载而被分配空间，无须创建对象，并且静态变量只分配了一次。</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><blockquote><p>被static修饰的成员变量和成员方法独立于该类的任何对象。也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。 </p></blockquote><ol><li><p>static变量</p><p>　按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是： </p><p>   　对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。 </p><p>   　对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。 </p></li><li><p>静态方法</p><p>　静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！ </p><p>   　因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。 </p></li><li><p>static代码块</p><p>　static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如：</p></li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>final用于声明类，方法和变量，表示属性不可变，类不可继承，方法不可覆写。</p><ul><li><p>final 数据：编译期常量，这类常量必须是基本数据类型，使用static、final修饰。 对于对象引用使用final时，使引用恒定不变，但对于对象本身是可以被改变的，即指向恒定不变。定义时需要赋值</p></li><li><p>final方法：继承类不能覆盖基类的方法</p></li><li><p>final类：不能被继承</p></li></ul><h2 id="String-、StringBuilder、StringBuffer"><a href="#String-、StringBuilder、StringBuffer" class="headerlink" title="String 、StringBuilder、StringBuffer"></a>String 、StringBuilder、StringBuffer</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>执行速度方面：StringBuilder&gt;StringBuffer&gt;String </p></li><li><p>String创建的是字符串常量，是不可变的，操作时会不断创建新的对象，原来的对象会被GC回收掉。而StringBuilder和StringBuffer是字符串变量，操作时是对同一个对象进行。</p></li><li><p>StringBuilder：线程非安全</p></li><li><p>StringBuffer：线程安全</p></li><li><p>String若用==比较，则比较的是对象的地址。String方法重写了equals方法，所以比较时，比较的是字符串的内容是否相同。</p></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>创建字符串的方式: </p><ol><li><p>使用new关键字创建字符串,比如String s1 = new String(“abc”); </p></li><li><p>直接指定.比如String s2 = “abc”; </p></li><li><p>使用串联生成新的字符串.比如String s3 = “ab” + “c”; </p></li></ol><blockquote><p>Java运行时会维护一个String Pool(String池),JavaDoc翻译很模糊”字符串缓冲区”.String池用来存放运行时中产生的各种字符串,并且池中的字符串的内容不重复.而一般对象不存在这个缓冲池,并且创建的对象仅仅存在于方法的堆栈区。</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>原理1:当使用任何方式来创建一个字符串对象s时,Java运行时(运行中JVM)会拿着这个X在String池中找是否存在内容相同的字符串对象,如果不存在,则在池中创建一个字符串s,否则,不在池中添加. </p></li><li><p>原理2:Java中,只要使用new关键字来创建对象,则一定会(在堆区或栈区)创建一个新的对象. </p></li><li><p>原理3:使用直接指定或者使用纯字符串串联来创建String对象,则仅仅会检查维护String池中的字符串,池中没有就在池中创建一个,有则罢了!但绝不会在堆栈区再去创建该String对象. </p></li><li><p>原理4:使用包含变量的表达式来创建String对象,则不仅会检查维护String池,而且还会在堆栈区创建一个String对象. </p></li><li><p>javac编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉取中的加号</p></li></ul><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String s1 &#x3D; &quot;a&quot;;</span><br><span class="line"></span><br><span class="line">String s2 &#x3D; s1 + &quot;b&quot;;&#x2F;&#x2F;含有变量，因此会先检查维护String池，并在堆中创建一个新对象</span><br><span class="line"></span><br><span class="line">String s3 &#x3D; &quot;a&quot; + &quot;b&quot;;</span><br><span class="line"></span><br><span class="line">System.out.println(s2 &#x3D;&#x3D; &quot;ab&quot;);&#x2F;&#x2F;false,&quot;ab&quot;的地址在常量池中，而s2指向的是堆中所copy的对象</span><br><span class="line"></span><br><span class="line">System.out.println(s3 &#x3D;&#x3D; &quot;ab&quot;);&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">System.out.println(s3 &#x3D;&#x3D; s2);&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">String s1 &#x3D; &quot;a&quot;;</span><br><span class="line"></span><br><span class="line">String s2 &#x3D; &quot;a&quot; + &quot;b&quot;;&#x2F;&#x2F;直接在常量池中创建一个新的</span><br><span class="line"></span><br><span class="line">String s3 &#x3D; &quot;a&quot; + &quot;b&quot;;&#x2F;&#x2F;使用常量池中存在的</span><br><span class="line"></span><br><span class="line">System.out.println(s2 &#x3D;&#x3D; &quot;ab&quot;);&#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">System.out.println(s3 &#x3D;&#x3D; s2);&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>线程本地变量，对于一个变量，ThreadLocal为该变量在每个线程中创建一个副本，线程间的变量互不影响。适用场景，多个线程不依赖于共享变量的状态来进行逻辑驱动，适用于在每个线程中，保存一份变量副本，对于该副本的任何修改也仅限于该线程的操作，其他线程无法影响。</p></blockquote><p><strong>设计理念</strong></p><blockquote><p>概括起来说，对于多线程资源共享的问题，同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，做到多线程的数据隔离。</p></blockquote><p><strong>设计原理</strong></p><p>​        每个线程Thread类会维护一个变量ThreadLocalMap，该map是以ThreadLocal作为key，保存的变量值作为value保存在当前线程的ThreadLocalMap中，所以每个线程可以存储多个ThreadLocal的变量值。set的时候，拿到当前线程的ThreadLocalMap，若map为空则初始化，否则set进变量值。get的时候，是获取当前线程的ThreadLocalMap，以该ThreadLocal作为key来获取变量值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void set(T value) &#123;</span><br><span class="line">  Thread t &#x3D; Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map &#x3D; getMap(t);</span><br><span class="line">  if (map !&#x3D; null)</span><br><span class="line">    map.set(this, value);</span><br><span class="line">  else</span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public T get() &#123;</span><br><span class="line">  Thread t &#x3D; Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map &#x3D; getMap(t);</span><br><span class="line">  if (map !&#x3D; null) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e &#x3D; map.getEntry(this);</span><br><span class="line">    if (e !&#x3D; null) </span><br><span class="line">      @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">      T result &#x3D; (T)e.value;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return setInitialValue();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类加载及双亲委派模型"><a href="#类加载及双亲委派模型" class="headerlink" title="类加载及双亲委派模型"></a>类加载及双亲委派模型</h2><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><h4 id="加载："><a href="#加载：" class="headerlink" title="加载："></a>加载：</h4><p>​        查找并加载二进制数据。把类的.class文件中的二进制数据读入内存，把它存放到方法区，然后在堆创建一个Class对象，用来封装类在方法区内的数据结构，提供了访问类在方法区内的数据结构的接口。</p><h4 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h4><ol><li><p>验证：确保被加载类的正确性。</p></li><li><p>准备：为类的静态变量分配内存，并将其初始化为默认值。</p></li><li><p>解析：把类中的符号引用转换为直接引用。</p></li><li><p>初始化：给类的静态变量赋予正确的初始值。</p><ol><li>假如这个类还没有被加载和连接，就先进行加载和连接。</li><li>假如这个类存在父类，并且这个父类还没有初始化，就先初始化。</li><li>假如这个类存在初始化语句，就依次执行。</li></ol></li></ol><h4 id="初始化的时机："><a href="#初始化的时机：" class="headerlink" title="初始化的时机："></a>初始化的时机：</h4><ul><li><p>创建类的实例：new、反射、克隆及序列化。</p></li><li><p>调用类的静态方法。</p></li><li><p>访问某个类或接口的静态变量。</p></li><li><p>调用java api的某些反射方法。</p></li><li><p>初始一个类的子类</p></li></ul><p>类及对象创建的初始化顺序</p><ol><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ol><p>双亲委派模型：Bootstrap ClassLoader、Extension ClassLoader、ApplicationClassLoader。</p><blockquote><p>如果一个类加载器收到类加载的请求，首先不会自己尝试加载，先委派给父类加载器去完成，只有当父加载器无法加载时，子加载器才会尝试加载。这种机制下用户自定义的类加载器不可能加载由父加载器加载的可靠类，从而防止不可靠的恶意代码。</p></blockquote><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><h3 id="Error与Exception"><a href="#Error与Exception" class="headerlink" title="Error与Exception"></a>Error与Exception</h3><ul><li><p>Error是程序无法处理的错误，比如OutOfMemoryError、ThreadDeath等。这些异常发生时， Java虚拟机（JVM）一般会选择线程终止。</p></li><li><p>Exception是程序本身可以处理的异常，这种异常分两大类运行时异常和非运行时异常。  程序中应当尽可能去处理这些异常。</p><ul><li><p>运行时异常：</p><blockquote><p>运行时异常都是RuntimeException类及其子类异常，如NullPointerException、IndexOutOfBoundsException、ArithmeticException、 IllegalArgumentException 等， 这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p></blockquote></li><li><p>非运行时异常    </p><blockquote><p>非运行时异常是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p></blockquote></li></ul></li></ul><h3 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h3><blockquote><p>表示要尝试运行代码，try语句块中代码受异常监控，其中代码发生异常时，会抛出异常对象。</p></blockquote><h3 id="catch语句块"><a href="#catch语句块" class="headerlink" title="catch语句块"></a>catch语句块</h3><blockquote><p>捕获try代码块中发生的异常并在其代码块中做异常处理，catch语句带一个Throwable类型的参数，表示可捕获异常类型。当try中出现异常时，catch会捕获到发生的异常，并和自己的异常类型匹配，  若匹配，则执行catch块中代码，并将catch块参数指向所抛的异常对象。catch语句可以有多个，用来匹配多个中的一个异常，一旦匹配上后，就不再尝试匹配别的catch块了。通过异常对象可以获取异常发生时完整的JVM堆栈信息，以及异常信息和异常发生的原因等。</p></blockquote><h3 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h3><blockquote><p>是紧跟catch语句后的语句块，这个语句块总是会在方法返回前执行，而不管是否try语句块是否发生异常。并且这个语句块总是在方法返回前执行。目的是给程序一个补救的机会。这样做也体现了Java语言的健壮性。</p></blockquote><h3 id="try、catch、finally三个语句块应注意的问题"><a href="#try、catch、finally三个语句块应注意的问题" class="headerlink" title="try、catch、finally三个语句块应注意的问题"></a>try、catch、finally三个语句块应注意的问题</h3><ol><li><p>try、catch、finally三个语句块均不能单独使用，三者可以组成 try…catch…finally、try…catch、</p><p>try…finally三种结构，catch语句可以有一个或多个，finally语句最多一个。</p></li><li><p>try、catch、finally三个代码块中变量的作用域为代码块内部，分别独立而不能相互访问。</p><p>如果要在三个块中都可以访问，则需要将变量定义到这些块的外面。</p></li><li><p>多个catch块时候，只会匹配其中一个异常类并执行catch块代码，而不会再执行别的catch块，</p><p>并且匹配catch语句的顺序是由上到下。</p></li></ol><h3 id="throw、throws关键字"><a href="#throw、throws关键字" class="headerlink" title="throw、throws关键字"></a>throw、throws关键字</h3><blockquote><p>throw关键字是用于方法体内部，用来抛出一个Throwable类型的异常。如果抛出了检查异常，则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。如果抛出的是Error或RuntimeException，则该方法的调用者可选择处理该异常。有关异常的转译会在下面说明。</p><p>throws关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣一般在catch块中打印一下堆栈信息做个勉强处理。</p></blockquote><h3 id="try中return，则finally语句是否执行，什么时候执行？"><a href="#try中return，则finally语句是否执行，什么时候执行？" class="headerlink" title="try中return，则finally语句是否执行，什么时候执行？"></a>try中return，则finally语句是否执行，什么时候执行？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class smallT &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        smallT t &#x3D; new smallT();</span><br><span class="line">        int b &#x3D; t.get();</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int get() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            return 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先返回1，最终返回的是2。</p><p>try中的return 语句调用的函数先于 finally中调用的函数执行，也就是说 return语句先执行，finally语句后执行，所以，返回的结果是 2。Return 并不是让函数马上返回，而是 return语句执行后，将把返回结果放置进函数栈中，此时函数并不是马上返回，它要执行 finally语句后才真正开始返回。</p><h1 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h1><h2 id="流式处理"><a href="#流式处理" class="headerlink" title="流式处理"></a>流式处理</h2><blockquote><p>将待处理的集合当成流经过管道的处理，比如筛选、排序、聚合等，得到最终想要的结果。</p></blockquote><p>forEach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random(); </span><br><span class="line"></span><br><span class="line">random.ints().limit(10).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打印对象</span><br><span class="line"></span><br><span class="line">students.stream().forEach(s-&gt;&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println(s.getName())</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers &#x3D; Arrays.asList(3, 2, 2, 3, 7, 3, 5);</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 获取对应的平方数 </span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; squaresList &#x3D; numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>filter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;strings &#x3D; Arrays.asList(&quot;abc&quot;, &quot;&quot;, &quot;bc&quot;, &quot;efg&quot;, &quot;abcd&quot;,&quot;&quot;, &quot;jkl&quot;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取空字符串的数量 </span><br><span class="line"></span><br><span class="line">long count &#x3D; strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure><p>limit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Random random &#x3D; new Random(); </span><br><span class="line"></span><br><span class="line">random.ints().limit(10).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>order</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按照对象的某个属性排序</span><br><span class="line"></span><br><span class="line">students.stream().sorted(Comparator.comparing(Student::getBirthday)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;倒序</span><br><span class="line"></span><br><span class="line">students.stream().sorted(Comparator.comparing(Student::getBirthday).reversed()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>match</p><ul><li>allMatch：Stream 中全部元素符合则返回 true ;</li><li>anyMatch：Stream 中只要有一个元素符合则返回 true;</li><li>noneMatch：Stream 中没有一个元素符合则返回 true。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">boolean all &#x3D; lists.stream().allMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否都大于3:&quot; + all);</span><br><span class="line"></span><br><span class="line">boolean any &#x3D; lists.stream().anyMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否有一个大于3:&quot; + any);</span><br><span class="line"></span><br><span class="line">boolean none &#x3D; lists.stream().noneMatch(u -&gt; u.getId() &gt; 3);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;是否没有一个大于3的:&quot; + none);    </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否都大于3:false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否有一个大于3:true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否没有一个大于3的:false</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;boolean,byte,char,short,int,long,float,double,void&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Boolean,Byte,Character,Integer,Long,Float,Double,Void&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;amp;&amp;amp;是短路操作符:若操作符左边的布尔表达式能推算出整个表达式的布尔值，则不计算右边的表达式。&lt;/p&gt;
&lt;p&gt;&amp;amp;是非短路操作符:始终会计算两边的布尔表达式。&lt;/p&gt;
&lt;p&gt;==比较两个变量的值是否相等，也就是变量所存储的数值是否相等&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://dogfun.top/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis模糊删除key</title>
    <link href="https://dogfun.top/2020/12/25/Redis/Redis%E6%A8%A1%E7%B3%8A%E5%88%A0%E9%99%A4key/"/>
    <id>https://dogfun.top/2020/12/25/Redis/Redis%E6%A8%A1%E7%B3%8A%E5%88%A0%E9%99%A4key/</id>
    <published>2020-12-25T02:14:06.000Z</published>
    <updated>2021-01-09T05:49:54.588Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis没有提供针对key的模糊删除支持，提供的keys命令会一次性扫描库中符合条件的记录，没有分页设置，可能由于数据量过大造成redis卡顿，影响正常业务进行，在生产中应该摒弃用keys命令来扫描。</p></blockquote><h3 id="Scan命令"><a href="#Scan命令" class="headerlink" title="Scan命令"></a>Scan命令</h3><p>该命令是redis2.8提供的，相比keys命令，它是通过游标分步进行，不会对线程造成阻塞，提供匹配功能。游标的意思，redis的数据结构是基于hash的，类似java的hashmap，底层也是数组+链表，这里通过游标遍历。</p><p>SCAN CURSOR [MATCH pattern] [COUNT count]</p><p>CURSOR代表游标，每次扫描都会返回上次的游标以此来开始增量的扫描，count指扫描槽位的数量，可以理解为扫描hashmap中一维数组中多少个元素并返回这些槽组的数据，判断是否有符合的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanAndDel</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           redisTemplate.execute((RedisCallback&lt;Boolean&gt;) redisConnection -&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               Object nativeConnection = redisConnection.getNativeConnection();</span><br><span class="line"></span><br><span class="line">               <span class="comment">// lettuce 单机</span></span><br><span class="line">               <span class="keyword">if</span> (nativeConnection <span class="keyword">instanceof</span> RedisAsyncCommands) &#123;</span><br><span class="line">                   RedisAsyncCommands connection = (RedisAsyncCommands) nativeConnection;</span><br><span class="line"></span><br><span class="line">                   RedisCommands&lt;<span class="keyword">byte</span>[], String&gt; commands = connection.getStatefulConnection().sync();</span><br><span class="line"></span><br><span class="line">                   KeyScanCursor&lt;<span class="keyword">byte</span>[]&gt; scanCursor = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (scanCursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           scanCursor = commands.scan(ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           scanCursor = commands.scan(scanCursor, ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       List&lt;<span class="keyword">byte</span>[]&gt; byteKeys = scanCursor.getKeys();</span><br><span class="line">                       <span class="keyword">if</span> (byteKeys.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">byte</span>[][] keys = <span class="keyword">new</span> <span class="keyword">byte</span>[byteKeys.size()][];</span><br><span class="line">                           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteKeys.size(); i++) &#123;</span><br><span class="line">                               keys[i] = byteKeys.get(i);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           commands.del(keys);</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (!scanCursor.isFinished());</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// lettuce 集群</span></span><br><span class="line">               <span class="keyword">if</span> (nativeConnection <span class="keyword">instanceof</span> RedisAdvancedClusterAsyncCommands) &#123;</span><br><span class="line">                   RedisAdvancedClusterAsyncCommands connection = (RedisAdvancedClusterAsyncCommands) nativeConnection;</span><br><span class="line"></span><br><span class="line">                   RedisAdvancedClusterCommands&lt;<span class="keyword">byte</span>[], String&gt; commands = connection.getStatefulConnection().sync();</span><br><span class="line"></span><br><span class="line">                   KeyScanCursor&lt;<span class="keyword">byte</span>[]&gt; scanCursor = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (scanCursor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           scanCursor = commands.scan(ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           scanCursor = commands.scan(scanCursor, ScanArgs.Builder.matches(key));</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       List&lt;<span class="keyword">byte</span>[]&gt; byteKeys = scanCursor.getKeys();</span><br><span class="line">                       <span class="keyword">if</span> (byteKeys.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                           <span class="keyword">byte</span>[][] keys = <span class="keyword">new</span> <span class="keyword">byte</span>[byteKeys.size()][];</span><br><span class="line">                           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteKeys.size(); i++) &#123;</span><br><span class="line">                               keys[i] = byteKeys.get(i);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           commands.del(keys);</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (!scanCursor.isFinished());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">
&lt;p&gt;该命令是redis2.8提供的，相比keys命令，它是通过游标分步进行，不会对线程造成阻塞，提供匹配功能。游标的意思，redis的数据结构是基于hash的，类似java的hashmap，底层也是数组+链表，这里通过游标遍历。&lt;/p&gt;
&lt;p&gt;SCAN CURSOR [MATCH pattern] [COUNT count]&lt;/p&gt;
&lt;p&gt;CURSOR代表游标，每次扫描都会返回上次的游标以此来开始增量的扫描，count指扫描槽位的数量，可以理解为扫描hashmap中一维数组中多少个元素并返回这些槽组的数据，判断是否有符合的元素。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scanAndDel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           redisTemplate.execute((RedisCallback&amp;lt;Boolean&amp;gt;) redisConnection -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               Object nativeConnection = redisConnection.getNativeConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;// lettuce 单机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nativeConnection &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; RedisAsyncCommands) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   RedisAsyncCommands connection = (RedisAsyncCommands) nativeConnection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   RedisCommands&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[], String&amp;gt; commands = connection.getStatefulConnection().sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   KeyScanCursor&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; scanCursor = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scanCursor == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           scanCursor = commands.scan(ScanArgs.Builder.matches(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           scanCursor = commands.scan(scanCursor, ScanArgs.Builder.matches(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; byteKeys = scanCursor.getKeys();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (byteKeys.size() &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[][] keys = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[byteKeys.size()][];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; byteKeys.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               keys[i] = byteKeys.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           commands.del(keys);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               Thread.sleep(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!scanCursor.isFinished());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;// lettuce 集群&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nativeConnection &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; RedisAdvancedClusterAsyncCommands) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   RedisAdvancedClusterAsyncCommands connection = (RedisAdvancedClusterAsyncCommands) nativeConnection;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   RedisAdvancedClusterCommands&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[], String&amp;gt; commands = connection.getStatefulConnection().sync();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   KeyScanCursor&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; scanCursor = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scanCursor == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           scanCursor = commands.scan(ScanArgs.Builder.matches(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           scanCursor = commands.scan(scanCursor, ScanArgs.Builder.matches(key));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       List&amp;lt;&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[]&amp;gt; byteKeys = scanCursor.getKeys();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (byteKeys.size() &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[][] keys = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[byteKeys.size()][];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; byteKeys.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               keys[i] = byteKeys.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           commands.del(keys);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               Thread.sleep(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!scanCursor.isFinished());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Redis" scheme="https://dogfun.top/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>ignite迁移</title>
    <link href="https://dogfun.top/2020/11/28/vps/ignite%E8%BF%81%E7%A7%BB/"/>
    <id>https://dogfun.top/2020/11/28/vps/ignite%E8%BF%81%E7%A7%BB/</id>
    <published>2020-11-28T11:59:19.000Z</published>
    <updated>2021-01-09T05:49:54.718Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新主机docker脚本安装</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><ul><li><p>docker-compose.yml&amp;ignite.db文件cp</p></li><li><p>容器服务导出导入</p><ul><li>生成容器快照，打出镜像<ul><li>docker commit -p [containerId] [alias]</li></ul></li><li>生成tar文件<ul><li>docker save -o ~/[filename].tar [imageName]</li></ul></li><li>导入tar文件<ul><li>cat [tarfile] |docker import - [name]</li></ul></li></ul></li><li><p>原主机获取容器启动命令相关参数</p><ul><li><p>安装runlike</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y python-pip</span><br><span class="line">pip install runlike</span><br><span class="line"><span class="meta">#</span><span class="bash">查看启动参数</span></span><br><span class="line">runlike -p [containerid]</span><br><span class="line">cp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动ssr子容器所有服务，获得所有containerid，修改ignite.db中表user的service_id</p></li><li><p>docker-compose run –rm ignite-admin /bin/sh -c ‘./ignite-admin recover’</p></li><li><p>docker-compose up -d</p></li></ul>]]></content>
    
    
    <summary type="html">ignite服务主机迁移，主要是docker容器的备份迁移</summary>
    
    
    
    <category term="vps" scheme="https://dogfun.top/categories/vps/"/>
    
    
  </entry>
  
  <entry>
    <title>Navicat更新删除数据的正确姿势</title>
    <link href="https://dogfun.top/2020/11/20/Navicat%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>https://dogfun.top/2020/11/20/Navicat%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</id>
    <published>2020-11-20T15:07:44.000Z</published>
    <updated>2021-01-09T05:49:54.235Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 非常久没有使用Navicat这个工具了，基本从开发的项目转入oracle之后都是使用PL/SQL这个工具了，oracle是提供执行语句回滚的显式操作的。最近发现Navicat操作MySQL居然没有，查阅了一下Navicat执行sql特别是update/delete时怎么防止误操作，回滚数据。</p></blockquote><p>MySQL是默认提交事务的，所以写query时，如果写了条update是直接提交的，如果想回滚怎么办？只能找binlog非常麻烦。正确的姿势应该是在query页中，提前set autocommit=0，也就是关闭自动提交，但这仅在当前query页中生效，重启或者打开新标签页会失效，然后你的update语句需要显式commit才能提交，这样你能在commit前select一下查看当前执行结果，Innodb的隔离级别默认是可重复读的，所以能读到当前事务下的数据结果，如果不对就执行rollback。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 非常久没有使用Navicat这个工具了，基本从开发的项目转入oracle之后都是使用PL/SQL这个工具了，oracle是提供执行语句回滚的显式操作的。最近发现Navicat操作MySQL居然没有，查阅了一下Navicat执行sql特别是upda</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CAP定理</title>
    <link href="https://dogfun.top/2020/11/04/web/CAP%E5%AE%9A%E7%90%86/"/>
    <id>https://dogfun.top/2020/11/04/web/CAP%E5%AE%9A%E7%90%86/</id>
    <published>2020-11-04T13:41:57.000Z</published>
    <updated>2021-01-09T05:49:54.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>面试被问到CAP定理，之前看过，真正问起来讲得不清楚，估计没有真正的理解这个定理，故作此文进行记录</p></blockquote><p>分布式系统有三个指标，也即一致性、可用性、分区容错</p><p>（C）一致性：多个节点的数据保持一致，当某个节点的数据修改后，需要同步修改所有节点的数据，保持一致</p><p>（A）可用性：即当某个节点宕机后，整个集群还能正常对外服务，保证服务健康</p><p>（P）分区容错：两个节点间可能会无法通信，P定理总是成立的。</p><p>一致性和可用性不可能同时成立，因为P即分区容错总是可能出现，如果要保证一致性，则必须保证所有节点都收到该数据的同步，才能对外服务，这就不满足可用性。如果满足可用性，即某个节点崩坏了也要提供服务，那么就不能保证一致性。</p><p>所以一般需要根据业务需要，保证C或A其中一个特性，例如网页更新可以采取可用性，因为最终用户都会看到最新的版本；如果是银行等金融数据，需要保证强一致性，则需要抛弃可用性。</p>]]></content>
    
    
    <summary type="html">
&lt;p&gt;分布式系统有三个指标，也即一致性、可用性、分区容错&lt;/p&gt;
&lt;p&gt;（C）一致性：多个节点的数据保持一致，当某个节点的数据修改后，需要同步修改所有节点的数据，保持一致&lt;/p&gt;
&lt;p&gt;（A）可用性：即当某个节点宕机后，整个集群还能正常对外服务，保证服务健康&lt;/p&gt;
&lt;p&gt;（P）分区容错：两个节点间可能会无法通信，P定理总是成立的。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://dogfun.top/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>栈实现队列</title>
    <link href="https://dogfun.top/2020/10/28/%E7%AE%97%E6%B3%95/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://dogfun.top/2020/10/28/%E7%AE%97%E6%B3%95/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</id>
    <published>2020-10-28T10:31:27.000Z</published>
    <updated>2021-01-09T05:49:54.084Z</updated>
    
    <content type="html"><![CDATA[<p>相对好理解的一条题目，栈的特点是后进先出，队列的特点是先进先出，那么用两个栈怎么实现队列呢？设S1和S2两个栈，要实现先进先出，如果都放到一个栈中，栈底元素是最先入的，那么要先出，得把栈底元素变成栈顶元素，这时候就利用到第二个栈了，把S1的元素都倒到S2，那么S2的栈顶元素就是最先入栈的，也就符合队列的特性。</p><p>入队列思路</p><ul><li>直接放入S1</li></ul><p>出队列思路</p><ul><li>判断S2是否为空，空则将S1的数据倒到S2，不为空不处理，S2弹出栈顶元素。这里直接保证了当出栈时，S2只要有元素，则一直弹，否则再从S1中取数据，减少了倒来倒去的过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueSample</span></span>&#123;</span><br><span class="line">  Stack&lt;Integer&gt; s1=<span class="keyword">new</span> Stack();</span><br><span class="line">  Stack&lt;Integer&gt; s2=<span class="keyword">new</span> Stack();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    s1.push(x);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s2.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">while</span>(!s1.isEmpty())&#123;</span><br><span class="line">        s2.push(s1.pop());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s2.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.isEmpty()&amp;&amp;s2.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;相对好理解的一条题目，栈的特点是后进先出，队列的特点是先进先出，那么用两个栈怎么实现队列呢？设S1和S2两个栈，要实现先进先出，如果都放到一个栈中，栈底元素是最先入的，那么要先出，得把栈底元素变成栈顶元素，这时候就利用到第二个栈了，把S1的元素都倒到S2，那么S2的栈顶元素就是最先入栈的，也就符合队列的特性。&lt;/p&gt;
&lt;p&gt;入队列思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接放入S1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出队列思路&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://dogfun.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis探究</title>
    <link href="https://dogfun.top/2020/10/28/Redis/redis/"/>
    <id>https://dogfun.top/2020/10/28/Redis/redis/</id>
    <published>2020-10-28T07:13:07.000Z</published>
    <updated>2021-01-09T05:49:54.408Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作中接触Redis大多仅用来作为缓存，也用过来做分布式锁，对于内部的实现机制及高级用法几乎是走马观花，故作此文用来记录相关的知识点，从原理出发慢慢拓展此文，全部用自己的理解话术来进行记录，个人理解，有误请指出。</p></blockquote><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis诞生之初是为了解决关系型数据库的性能问题，由于IO需要对磁盘的读写速度满足不了实际场景，因此创造者利用内存造了一个内存数据库，没有关系型数据库的约束，Redis提供的数据结构简单且能满足高性能的读写场景，其基于对内存的读写，能够在短时间内处理数据，由于读写速度快，免去IO的局限，IO涉及操作系统用户空间与内核空间的数据复制及事件等待，所以redis采用单线程的处理模型，免去线程切换的开销，因为也没必要进行多线程处理</p><h3 id="对比memcached"><a href="#对比memcached" class="headerlink" title="对比memcached"></a>对比memcached</h3><p>支持多种数据结构，memcached仅支持字符串且不支持持久化</p><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><p>Redis采用基于Reactor模式开发网络事件处理器，采用IO多路复用技术，简单来说就是一条线程监听多个客户端socket，当有事件到时，将事件作为一个task放到队列中，接下来文件处理器会对队列中的task进行处理，文件处理器是单线程的，没有线程的切换问题，文件处理器包含连接应答器、命令请求处理器、命令回复处理器，执行相应的命令后，返回相应。这也是Redis速度快的原因：IO多路复用、单线程处理task、基于内存的数据操作</p><p><img src="/assets/blog_img/timg.jpeg" alt="timg"></p><h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>基于键值的存储，值支持以下几种类型</p><ul><li>string：字符串<ul><li>字节串：非字符自增会报错</li><li>整数：可自增减</li><li>浮点数</li></ul></li><li>list：有序队列<ul><li>可用作队列</li></ul></li><li>set：集合</li><li>hash：散列</li><li>zset：有序集合<ul><li>相比散列，提供基于分值的相关功能，每个key有对应的score，应对一些场景应用</li></ul></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>Redis提供持久化的功能，能够将内存的数据定时写入硬盘，保证数据在系统重启后能够恢复，继续进行服务</p><p>两种持久化的方式：</p><ul><li>快照</li><li>AOF</li></ul><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>　　快照：会开启一个子进程定时对内存的数据进行打快照，使用BGSAVE命令，缺点是快照是按周期打，性能有限，一旦系统崩溃，会丢失从上次快照之后的数据，也有可能在刚打完快照就崩溃。而且打快照可能会造成Redis停顿</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>　　AOF：将Redis的执行命令记录下来，记录到AOF文件中，可根据需要设置频率，恢复时只需要执行相应的写命令即可。缺点是AOF的文件会随着内存数据的增大而增大，造成磁盘爆满，可以使用命令对AOF文件重写，压缩冗余的部分</p><p>同步频率</p><ul><li><p>always：每个命令都写入磁盘</p></li><li><p>everysec：每秒同步一次，多个命令到磁盘</p></li><li><p>no：由系统决定写入时间</p></li></ul><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>水平添加多个Redis实例，通过主从服务器来满足高性能的读写请求。主服务器将快照文件发送到从服务器，从服务器获得快照并初始化数据</p><h3 id="过期时间设置"><a href="#过期时间设置" class="headerlink" title="过期时间设置"></a>过期时间设置</h3><p>Redis提供过期时间设置保证内存空间，也能保证热数据</p><p>Redis后台有两种方式对过期数据进行删除</p><ul><li>定期删除：每隔一段时间抽取过期的key然后删除</li><li>惰性删除：当系统查询到这个过期key时会删除</li></ul><h3 id="热key问题"><a href="#热key问题" class="headerlink" title="热key问题"></a>热key问题</h3><p>针对某个key的大流量请求，造成物理机的网卡超载，导致Redis宕机引发雪崩</p><p>解决思路：</p><ul><li>提前把key打到不同的服务器</li><li>加入二级缓存，提前加载热key到内存</li></ul><h3 id="缓存击穿-缓存穿透-缓存雪崩"><a href="#缓存击穿-缓存穿透-缓存雪崩" class="headerlink" title="缓存击穿|缓存穿透|缓存雪崩"></a>缓存击穿|缓存穿透|缓存雪崩</h3><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>类似热key问题，区别点在于key的过期导致请求打在DB上</p><p>解决思路：</p><ul><li>加锁更新，对key进行加锁，在数据库查询前就进行了拦截</li><li>过期时间写在value中，用异步方式刷新过期时间</li></ul><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>查询缓存中不存在的key，恶意请求大量制造不存在的key直接请求DB</p><p>解决思路：</p><ul><li>加一层布隆过滤器</li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>某一时刻可能发生大规模的缓存失效，例如缓存服务宕机，大量的key同时失效，请求打到DB，导致整个系统雪崩</p><ul><li>不同的key设置不同的过期时间，避免同时过期</li><li>限流，降低db压力</li><li>二级缓存</li></ul>]]></content>
    
    
    <summary type="html">
&lt;p&gt;Redis诞生之初是为了解决关系型数据库的性能问题，由于IO需要对磁盘的读写速度满足不了实际场景，因此创造者利用内存造了一个内存数据库，没有关系型数据库的约束，Redis提供的数据结构简单且能满足高性能的读写场景，其基于对内存的读写，能够在短时间内处理数据，由于读写速度快，免去IO的局限，IO涉及操作系统用户空间与内核空间的数据复制及事件等待，所以redis采用单线程的处理模型，免去线程切换的开销，因为也没必要进行多线程处理&lt;/p&gt;
&lt;p&gt;支持多种数据结构，memcached仅支持字符串且不支持持久化&lt;/p&gt;
&lt;p&gt;Redis采用基于Reactor模式开发网络事件处理器，采用IO多路复用技术，简单来说就是一条线程监听多个客户端socket，当有事件到时，将事件作为一个task放到队列中，接下来文件处理器会对队列中的task进行处理，文件处理器是单线程的，没有线程的切换问题，文件处理器包含连接应答器、命令请求处理器、命令回复处理器，执行相应的命令后，返回相应。这也是Redis速度快的原因：IO多路复用、单线程处理task、基于内存的数据操作&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Redis" scheme="https://dogfun.top/categories/Redis/"/>
    
    
    <category term="Nosql" scheme="https://dogfun.top/tags/Nosql/"/>
    
  </entry>
  
  <entry>
    <title>Spring多数据源加载</title>
    <link href="https://dogfun.top/2020/10/07/web/Spring%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A0%E8%BD%BD/"/>
    <id>https://dogfun.top/2020/10/07/web/Spring%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%8A%A0%E8%BD%BD/</id>
    <published>2020-10-07T02:21:14.000Z</published>
    <updated>2021-01-09T05:49:54.771Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Spring引入多数据源的方式，系统扩展的过程中可能会引入多个数据源，查阅了一些博客，发现引入方式或多或少都需要引入新的配置类，这里记录下在不需要修改任何代码的情况下，扩展数据源的方式，以后只需要在配置文件添加配置就能直接引入。</p></blockquote><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li>分包方式</li><li>参数化方式</li><li>注解+AOP</li></ul><h4 id="分包方式"><a href="#分包方式" class="headerlink" title="分包方式"></a>分包方式</h4><p>比较简单，哪个数据源的操作就走哪个mapper目录下的文件，一般就是两个库无任何关联的场景。</p><h4 id="参数化方式"><a href="#参数化方式" class="headerlink" title="参数化方式"></a>参数化方式</h4><p>根据传入的参数选择数据源，进行数据查询，个人比较推崇这一种方式。</p><h4 id="注解-AOP"><a href="#注解-AOP" class="headerlink" title="注解+AOP"></a>注解+AOP</h4><p>在特定的方式上添加自定义的注解，配置上需要选择的数据源值，AOP执行的时候通过获取注解上的值来切换，这种方式需要在方法上写死需要的数据源，不太灵活。</p><h3 id="引入数据源的思路"><a href="#引入数据源的思路" class="headerlink" title="引入数据源的思路"></a>引入数据源的思路</h3><ul><li>配置文件添加多个数据源</li><li>自定义数据源配置</li><li>注入Spring容器</li><li>利用ThreadLocal的上下文，实现线程与数据源的绑定关系</li><li>使用上用参数化还是AOP等都可以</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/master?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">slave1:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/slave1?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">slave2:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">      <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/slave2?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>建立一个property类来映射配置，这样我们就能拿到多个数据源的配置了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceProperty</span> </span>&#123;</span><br><span class="line">  <span class="comment">//只映射datasource</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; datasource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就是将所有的配置转换成bean并且注入到Spring中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.demo.sv.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicDataSourceProperty dynamicDataSourceProperty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能描述: &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 〈动态数据源bean 自动配置注册所有数据源〉</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dynamicDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//拿到Spring容器</span></span><br><span class="line">        DefaultListableBeanFactory listableBeanFactory = (DefaultListableBeanFactory) beanFactory;        </span><br><span class="line">        <span class="comment">/*获取yml所有数据源配置*/</span></span><br><span class="line">        Map&lt;String, Object&gt; datasource = dynamicDataSourceProperty.getDatasource();</span><br><span class="line">        Map&lt;Object, Object&gt; dataSourceMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">        Optional.ofNullable(datasource).ifPresent(map -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">                <span class="comment">//创建数据源对象</span></span><br><span class="line">                HikariDataSource dataSource = (HikariDataSource) DataSourceBuilder.create().build();</span><br><span class="line">                String dataSourceId = entry.getKey();</span><br><span class="line">                configeDataSource(entry, dataSource);</span><br><span class="line">                <span class="comment">/*bean工厂注册每个数据源bean*/</span></span><br><span class="line">                listableBeanFactory.registerSingleton(dataSourceId, dataSource);</span><br><span class="line">                dataSourceMap.put(dataSourceId, dataSource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//AbstractRoutingDataSource设置主从数据源</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DynamicDataSource(beanFactory.getBean(<span class="string">&quot;master&quot;</span>, DataSource.class), dataSourceMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从配置转换成bean</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configeDataSource</span><span class="params">(Map.Entry&lt;String, Object&gt; entry, HikariDataSource dataSource)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; dataSourceConfig = (Map&lt;String, Object&gt;) entry.getValue();</span><br><span class="line">        dataSource.setJdbcUrl(MapUtils.getString(dataSourceConfig, <span class="string">&quot;jdbcUrl&quot;</span>));</span><br><span class="line">        dataSource.setDriverClassName(MapUtils.getString(dataSourceConfig, <span class="string">&quot;driverClassName&quot;</span>));</span><br><span class="line">        dataSource.setUsername(MapUtils.getString(dataSourceConfig, <span class="string">&quot;username&quot;</span>));</span><br><span class="line">        dataSource.setPassword(MapUtils.getString(dataSourceConfig, <span class="string">&quot;password&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换数据源我们需要用到Spring提供的一个抽象类AbstractRoutingDataSource，这个类有个抽象方法determineTargetDataSource，我们通过继承这个类，并且实现determineTargetDataSource方法，这个determineTargetDataSource就是决定调用数据源的逻辑，简单来说这个方法算出key值，然后去数据源池取出我们需要的数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicDataSource</span><span class="params">(DataSource defaultDataSource, Map&lt;Object, Object&gt; targetDataSource)</span> </span>&#123;</span><br><span class="line">        backupTargetDataSources = targetDataSource;</span><br><span class="line">        <span class="keyword">super</span>.setDefaultTargetDataSource(defaultDataSource);</span><br><span class="line">        <span class="keyword">super</span>.setTargetDataSources(backupTargetDataSources);</span><br><span class="line">        <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前的数据源：&#123;&#125;&quot;</span>,DynamicDataSourceContextHolder.getContextKey());</span><br><span class="line">      <span class="comment">//我们自己定义了一个DynamicDataSourceContextHolder来维护key，只要我们在方法调用前设置key，Spring会根据这个方法来决定数据源</span></span><br><span class="line">        <span class="keyword">return</span> DynamicDataSourceContextHolder.getContextKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类，Springboot项目要加入排除自动配置数据源注解@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SvApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">      <span class="comment">//根据需要切换我们需要的数据源</span></span><br><span class="line">        DynamicDataSourceContextHolder.setContextKey(<span class="string">&quot;slave2&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users= userMapper.query();</span><br><span class="line">        DynamicDataSourceContextHolder.remove();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于多数据源的事务处理"><a href="#关于多数据源的事务处理" class="headerlink" title="关于多数据源的事务处理"></a>关于多数据源的事务处理</h3><p>当引入多数据源后，如果要加入事务处理，同一个事务中处理处理两个数据源的数据会失败，主要是因为第一个数据源打开数据库连接后，会加入ThreadLocal中与线程进行绑定，而此时第二个数据源再获取sqlSession，发现不为空，取的是第一个数据源的连接，所以会有问题。如果要支持，思路就是保证sqlSession的独立，但不能保证分布式事务的正确处理。查阅相关资料，可以使用XA协议，具体此文没有详细探讨。</p>]]></content>
    
    
    <summary type="html">
&lt;ul&gt;
&lt;li&gt;分包方式&lt;/li&gt;
&lt;li&gt;参数化方式&lt;/li&gt;
&lt;li&gt;注解+AOP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比较简单，哪个数据源的操作就走哪个mapper目录下的文件，一般就是两个库无任何关联的场景。&lt;/p&gt;
&lt;p&gt;根据传入的参数选择数据源，进行数据查询，个人比较推崇这一种方式。&lt;/p&gt;
&lt;p&gt;在特定的方式上添加自定义的注解，配置上需要选择的数据源值，AOP执行的时候通过获取注解上的值来切换，这种方式需要在方法上写死需要的数据源，不太灵活。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://dogfun.top/categories/web/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="数据源" scheme="https://dogfun.top/tags/%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>从零开始写框架-SpringMVC</title>
    <link href="https://dogfun.top/2020/09/30/web/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E6%A1%86%E6%9E%B6-SpringMVC/"/>
    <id>https://dogfun.top/2020/09/30/web/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E6%A1%86%E6%9E%B6-SpringMVC/</id>
    <published>2020-09-30T11:24:06.000Z</published>
    <updated>2021-01-09T05:49:54.664Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>　　最近打算提升下源码能力，跟着相关教程实现Spring框架，巩固下前面的学习知识，像反射、设计模式等，顺带熟悉一些API。像设计模式这类知识，只能通过代码实践来提升对其核心思想的理解，毕竟设计模式不是凭空产生的，而是在代码实践的过程中，通过不断地重构提炼，发现其奥妙之处，才产生相关的程序思想。</p></blockquote><h3 id="1-0-MVC"><a href="#1-0-MVC" class="headerlink" title="1.0 MVC"></a>1.0 MVC</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h4 id="配置文件application-properties"><a href="#配置文件application-properties" class="headerlink" title="配置文件application.properties"></a>配置文件application.properties</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanPackage=com.gupaoedu.demo</span><br></pre></td></tr></table></figure><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>这部分主要模拟Spring中我们常用的Autowired，Controller，RequestMapping，RequestParam，Service等。</p><p>注解文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPAutowired &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPRequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPRequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GPService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gpmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.gupaoedu.mvcframework.v1.servlet.GPDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gpmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GPController</span></span><br><span class="line"><span class="meta">@GPRequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPAutowired</span></span><br><span class="line">    <span class="keyword">private</span> IDemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPRequestMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, <span class="meta">@GPRequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        String result = demoService.get(name);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            resp.getWriter().write(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPRequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,<span class="meta">@GPRequestParam(&quot;a&quot;)</span>Integer a,<span class="meta">@GPRequestParam(&quot;b&quot;)</span> Integer b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            resp.getWriter().write(a+<span class="string">&quot;+&quot;</span>+b+<span class="string">&quot;=&quot;</span>+(a+b));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GPRequestMapping(&quot;/remove&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(HttpServletRequest req,HttpServletResponse resp,<span class="meta">@GPRequestParam(&quot;a&quot;)</span>Integer a,<span class="meta">@GPRequestParam(&quot;b&quot;)</span> Integer b)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDemoService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GPService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoService</span> <span class="keyword">implements</span> <span class="title">IDemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;my name is &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h4><p>思路：首先我们要实现SpringMVC，思考下需要什么组件，第一肯定是IOC容器，暂时可以使用Map来代替。还有就是能通过url来找controller的这么一个路由器，我们也可以用一个Map来存。上面的注解是标记文件的，我们需要扫描这部分标记有注解的文件，我们需要利用反射初始化相关类的实例，放到Map中，并且我们还要实现属性注入功能。</p><p>初始化中我们需要做以下工作：</p><ul><li>扫描配置文件</li><li>通过项目路径将注解相关的类，通过反射实例化</li><li>实现类中的属性注入功能</li><li>实现url与handler的映射，也即路由。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; mapping = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doDispatch(req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;500 error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求url</span></span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line">        String contextPath = req.getContextPath();</span><br><span class="line">        url = url.replace(contextPath, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;/+&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.mapping.containsKey(url)) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;404....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Method method = (Method) <span class="keyword">this</span>.mapping.get(url);</span><br><span class="line">        Map&lt;String, String[]&gt; params = req.getParameterMap();</span><br><span class="line">        method.invoke(<span class="keyword">this</span>.mapping.get(method.getDeclaringClass().getName()), <span class="keyword">new</span> Object[]&#123;req, resp, params.get(<span class="string">&quot;name&quot;</span>)[<span class="number">0</span>]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//简易版本实现全部在一个方法中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties configContext = <span class="keyword">new</span> Properties();</span><br><span class="line">            is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(config.getInitParameter(<span class="string">&quot;contextConfigLocation&quot;</span>)); </span><br><span class="line">          <span class="comment">//读取配置文件</span></span><br><span class="line">            configContext.load(is);</span><br><span class="line">            String scanPackage = configContext.getProperty(<span class="string">&quot;scanPackage&quot;</span>);</span><br><span class="line">            <span class="comment">//扫描配置路径下的类</span></span><br><span class="line">            doScanner(scanPackage);</span><br><span class="line">          <span class="comment">//实例化标有注解的类</span></span><br><span class="line">            <span class="keyword">for</span> (String className : mapping.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!className.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">                    mapping.put(className, clazz.newInstance());</span><br><span class="line">                    String baseUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (clazz.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">                        GPRequestMapping requestMapping = clazz.getAnnotation(GPRequestMapping.class);</span><br><span class="line">                        baseUrl = requestMapping.value();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Method[] methods = clazz.getMethods();</span><br><span class="line">                    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!method.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        GPRequestMapping requestMapping = method.getAnnotation(GPRequestMapping.class);</span><br><span class="line">                        String url = (baseUrl + <span class="string">&quot;/&quot;</span> + requestMapping.value()).replaceAll(<span class="string">&quot;/+&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                        mapping.put(url, method);</span><br><span class="line">                        System.out.println(<span class="string">&quot;Mapped &quot;</span> + url + <span class="string">&quot;,&quot;</span> + method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isAnnotationPresent(GPService.class)) &#123;</span><br><span class="line">                    GPService service = clazz.getAnnotation(GPService.class);</span><br><span class="line">                    String beanName = service.value();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                        beanName = clazz.getName();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Object instance = clazz.newInstance();</span><br><span class="line">                    mapping.put(beanName, instance);</span><br><span class="line">                    <span class="keyword">for</span> (Class&lt;?&gt; i : clazz.getInterfaces()) &#123;</span><br><span class="line">                        mapping.put(i.getName(), instance);</span><br><span class="line">                        System.out.println(i.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行类的属性注入</span></span><br><span class="line">            <span class="keyword">for</span> (Object object : mapping.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Class clazz = object.getClass();</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">                    Field[] fileds = clazz.getDeclaredFields();</span><br><span class="line">                    <span class="keyword">for</span> (Field field : fileds) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!field.isAnnotationPresent(GPAutowired.class)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        GPAutowired autowired = field.getAnnotation(GPAutowired.class);</span><br><span class="line">                        String beanName = autowired.value();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                            beanName = field.getType().getName();</span><br><span class="line">                        &#125;</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">//对象的属性设置为value</span></span><br><span class="line">                        field.set(mapping.get(clazz.getName()), mapping.get(beanName));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;GP mvc init...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//扫描所有的类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doScanner</span><span class="params">(String scanPackage)</span> </span>&#123;</span><br><span class="line">        URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;/&quot;</span> + scanPackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>));</span><br><span class="line">        File classDir = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">        <span class="keyword">for</span> (File file : classDir.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                doScanner(scanPackage + <span class="string">&quot;.&quot;</span> + file.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!file.getName().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String clazzName = (scanPackage + <span class="string">&quot;.&quot;</span> + file.getName().replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                mapping.put(clazzName, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-0-MVC"><a href="#2-0-MVC" class="headerlink" title="2.0 MVC"></a>2.0 MVC</h3><p>1.0版本将所有的代码逻辑都写在init方法内，我们需要将相关的步骤抽取出来，进行优化</p><h4 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">    doLoadConfig(config.getInitParameter(<span class="string">&quot;contextConfigLocation&quot;</span>));</span><br><span class="line"><span class="comment">//扫描类</span></span><br><span class="line">    doScanner(contextConfig.getProperty(<span class="string">&quot;scanPackage&quot;</span>));</span><br><span class="line"><span class="comment">//反射实例化类</span></span><br><span class="line">    doInstance();</span><br><span class="line"><span class="comment">//注入</span></span><br><span class="line">    doAutowired();</span><br><span class="line"><span class="comment">//初始化url与方法映射关系</span></span><br><span class="line">    initHandlerMapping();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;GP mvc init...&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doLoadConfig方法"><a href="#doLoadConfig方法" class="headerlink" title="doLoadConfig方法"></a>doLoadConfig方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoadConfig</span><span class="params">(String contextConfigLocation)</span> </span>&#123;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(contextConfigLocation);</span><br><span class="line">        contextConfig.load(is);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != is) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doScanner方法"><a href="#doScanner方法" class="headerlink" title="doScanner方法"></a>doScanner方法</h4><p>递归扫描所有类，将扫描到的类到放到List中，后面需要进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doScanner</span><span class="params">(String scanPackage)</span> </span>&#123;</span><br><span class="line">    URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;/&quot;</span> + scanPackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>));</span><br><span class="line">    File classDir = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">    <span class="keyword">for</span> (File file : classDir.listFiles()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            doScanner(scanPackage + <span class="string">&quot;.&quot;</span> + file.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.getName().endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String clazzName = (scanPackage + <span class="string">&quot;.&quot;</span> + file.getName().replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            classNames.add(clazzName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doInstance方法"><a href="#doInstance方法" class="headerlink" title="doInstance方法"></a>doInstance方法</h4><p>实例化Bean，模拟将实例化的Bean放进IOC中，我们用一个Map来代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (classNames.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String className : classNames) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">                Object instance = clazz.newInstance();</span><br><span class="line">                String beanName = toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                ioc.put(beanName, instance);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isAnnotationPresent(GPService.class)) &#123;</span><br><span class="line">                GPService service = clazz.getAnnotation(GPService.class);</span><br><span class="line">                String beanName = service.value();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                    beanName = toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Object instance = clazz.newInstance();</span><br><span class="line">                ioc.put(beanName, instance);</span><br><span class="line">                <span class="keyword">for</span> (Class&lt;?&gt; i : clazz.getInterfaces()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ioc.containsKey(i.getName())) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;the &quot;</span> + i.getName() + <span class="string">&quot; is exists&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(i.getName(), instance);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doAutowired方法进行注入"><a href="#doAutowired方法进行注入" class="headerlink" title="doAutowired方法进行注入"></a>doAutowired方法进行注入</h4><p>这一步我们将容器内的类取出来，通过反射将属性给拿到，通过扫描注解，再从容器中拿到相关的Bean然后注入到当前类的属性中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ioc.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet()) &#123;</span><br><span class="line">        <span class="comment">//取出所有的属性</span></span><br><span class="line">        Field[] fields = entry.getValue().getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!field.isAnnotationPresent(GPAutowired.class)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            GPAutowired autowired = field.getAnnotation(GPAutowired.class);</span><br><span class="line">            String beanName = autowired.value().trim();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(beanName)) &#123;</span><br><span class="line">                beanName = field.getType().getName();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field.set(entry.getValue(), ioc.get(beanName));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initHandlerMapping方法"><a href="#initHandlerMapping方法" class="headerlink" title="initHandlerMapping方法"></a>initHandlerMapping方法</h4><p>这一步我们将所有Controller的方法拿到，并且拿到对应的url相对路径，并且将url与处理方法映射给保存起来，在请求路由的时候就根据url来找到相应的方法，通过反射执行对应方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ioc.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet()) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = entry.getValue().getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!clazz.isAnnotationPresent(GPController.class)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String baseUrl = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">            GPRequestMapping gpRequestMapping = clazz.getAnnotation(GPRequestMapping.class);</span><br><span class="line">            baseUrl = gpRequestMapping.value();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : clazz.getMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!method.isAnnotationPresent(GPRequestMapping.class)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GPRequestMapping gpRequestMapping = method.getAnnotation(GPRequestMapping.class);</span><br><span class="line"></span><br><span class="line">            String url = (<span class="string">&quot;/&quot;</span> + baseUrl + <span class="string">&quot;/&quot;</span> + gpRequestMapping.value()).replaceAll(<span class="string">&quot;/+&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">            handlerMapping.put(url, method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="doDispatch路由逻辑"><a href="#doDispatch路由逻辑" class="headerlink" title="doDispatch路由逻辑"></a>doDispatch路由逻辑</h4><p>请求路由逻辑，思路是这样的，拿到请求url，通过url找到初始化的method，这时候就有了目标类的执行方法。接下来就是填充请求参数，填充完后执行method.invoke方法执行目标类的方法，完成请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    String url = req.getRequestURI();</span><br><span class="line">    String contextPath = req.getContextPath();</span><br><span class="line">    url = url.replace(contextPath, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;//+&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.handlerMapping.containsKey(url)) &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;404....!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//拿到url对应的controller请求方法</span></span><br><span class="line">    Method method = (Method) <span class="keyword">this</span>.handlerMapping.get(url);</span><br><span class="line">    <span class="comment">//请求传进来的实参</span></span><br><span class="line">    Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">    <span class="comment">//取到形参类型</span></span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line"><span class="comment">//实参数组初始化</span></span><br><span class="line">    Object[] paramValues = <span class="keyword">new</span> Object[parameterTypes.length];</span><br><span class="line"><span class="comment">//这里只处理String类型</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">        Class paramterType = parameterTypes[i];</span><br><span class="line">        <span class="keyword">if</span> (paramterType == HttpServletRequest.class) &#123;</span><br><span class="line">            paramValues[i] = req;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramterType == HttpServletResponse.class) &#123;</span><br><span class="line">            paramValues[i] = resp;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramterType == String.class) &#123;</span><br><span class="line">            Annotation[][] pa = method.getParameterAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; pa.length; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Annotation a : pa[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a <span class="keyword">instanceof</span> GPRequestParam) &#123;</span><br><span class="line">                        String paramName = ((GPRequestParam) a).value();</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(paramName.trim())) &#123;</span><br><span class="line">                            String value = Arrays.toString(parameterMap.get(paramName)).replaceAll(<span class="string">&quot;\\[|\\]&quot;</span>, <span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;\\s&quot;</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                            paramValues[i] = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String beanName = toLowerFirstCase(method.getDeclaringClass().getSimpleName());</span><br><span class="line">    method.invoke(<span class="keyword">this</span>.ioc.get(beanName), paramValues);</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-0-MVC"><a href="#3-0-MVC" class="headerlink" title="3.0 MVC"></a>3.0 MVC</h3><p>待更</p>]]></content>
    
    
    <summary type="html">
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scanPackage=com.gupaoedu.demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这部分主要模拟Spring中我们常用的Autowired，Controller，RequestMapping，RequestParam，Service等。&lt;/p&gt;
&lt;p&gt;注解文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target(&amp;#123;ElementType.FIELD&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; GPAutowired &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target(&amp;#123;ElementType.TYPE&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; GPController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target(&amp;#123;ElementType.TYPE,ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; GPRequestMapping &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target(&amp;#123;ElementType.PARAMETER&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; GPRequestParam &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target(&amp;#123;ElementType.TYPE&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; GPService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="web" scheme="https://dogfun.top/categories/web/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Spring" scheme="https://dogfun.top/tags/Spring/"/>
    
    <category term="从零开始写框架" scheme="https://dogfun.top/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>ES</title>
    <link href="https://dogfun.top/2020/09/25/ES/"/>
    <id>https://dogfun.top/2020/09/25/ES/</id>
    <published>2020-09-25T01:25:02.000Z</published>
    <updated>2021-09-21T07:27:21.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h1><h3 id="环境搭建-docker"><a href="#环境搭建-docker" class="headerlink" title="环境搭建(docker)"></a>环境搭建(docker)</h3><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 -d  -e &quot;discovery.type&#x3D;single-node&quot; --name elasticsearch \</span><br><span class="line">-v &#x2F;Users&#x2F;carytseng&#x2F;envir&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml \</span><br><span class="line">-v &#x2F;Users&#x2F;carytseng&#x2F;envir&#x2F;elasticsearch&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \</span><br><span class="line">-v &#x2F;Users&#x2F;carytseng&#x2F;envir&#x2F;elasticsearch&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line"> docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.12.0 </span><br></pre></td></tr></table></figure><h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --link elasticsearch:elasticsearch --name kibana -p 5601:5601 -d docker.elastic.co&#x2F;kibana&#x2F;kibana:7.12.0</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看集群状态</span><br><span class="line">GET &#x2F;_cat&#x2F;health?v</span><br><span class="line"></span><br><span class="line">查询所有创建的索引</span><br><span class="line">GET &#x2F;_cat&#x2F;indices?v</span><br><span class="line"></span><br><span class="line">创建索引</span><br><span class="line">PUT [index]</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>text</li><li>keyword</li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>term：查询keyword类型，用于精确匹配。查询text类型若不知道分词器，会无法命中数据<ul><li>比如查text类型，关键词”Quick Foxes!”，该数据被分为[Quick,Foxes]，会出现无法命中</li><li>用关键词”Quick”，则能查出，因此对于模糊查询要用match查text类型的数据</li></ul></li><li>match：查询text类型，用于模糊查询</li></ul><h3 id="Nested"><a href="#Nested" class="headerlink" title="Nested"></a>Nested</h3><blockquote><p>es中object类型的数组会被扁平化，打破数组中对象属性的关联关系，需要定义nested即嵌套对象来处理数组，保证数组中的对象会被独立处理。</p></blockquote><h3 id="多层嵌套对象处理inner-hits"><a href="#多层嵌套对象处理inner-hits" class="headerlink" title="多层嵌套对象处理inner_hits"></a>多层嵌套对象处理inner_hits</h3><p>inner_hits是用于筛选出命中对象的对应属性，当层级过多时，条件中有多个inner_hits，需要使用name来防止覆盖问题</p><h3 id="删除所有文档数据"><a href="#删除所有文档数据" class="headerlink" title="删除所有文档数据"></a>删除所有文档数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chinaunicom_medical_search_dev&#x2F;_delete_by_query</span><br><span class="line">&#123;&quot;query&quot;:&#123;&quot;match_all&quot;:&#123;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># curl -XDELETE &#39;http:&#x2F;&#x2F;127.0.0.1:9200&#x2F;logstash&#39; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -p 9200:9200 -p 9300:9300 -d  -e &amp;quot;discovery.type&amp;#x3D;single-node&amp;quot; --name elasticsearch \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v &amp;#x2F;Users&amp;#x2F;carytseng&amp;#x2F;envir&amp;#x2F;elasticsearch&amp;#x2F;config&amp;#x2F;elasticsearch.yml:&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;elasticsearch&amp;#x2F;config&amp;#x2F;elasticsearch.yml \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v &amp;#x2F;Users&amp;#x2F;carytseng&amp;#x2F;envir&amp;#x2F;elasticsearch&amp;#x2F;data:&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;elasticsearch&amp;#x2F;data \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v &amp;#x2F;Users&amp;#x2F;carytseng&amp;#x2F;envir&amp;#x2F;elasticsearch&amp;#x2F;plugins:&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;elasticsearch&amp;#x2F;plugins \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; docker.elastic.co&amp;#x2F;elasticsearch&amp;#x2F;elasticsearch:7.12.0 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --link elasticsearch:elasticsearch --name kibana -p 5601:5601 -d docker.elastic.co&amp;#x2F;kibana&amp;#x2F;kibana:7.12.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查看集群状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET &amp;#x2F;_cat&amp;#x2F;health?v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;查询所有创建的索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET &amp;#x2F;_cat&amp;#x2F;indices?v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT [index]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;keyword&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Nacos</title>
    <link href="https://dogfun.top/2020/09/25/Nacos/"/>
    <id>https://dogfun.top/2020/09/25/Nacos/</id>
    <published>2020-09-25T01:25:02.000Z</published>
    <updated>2021-09-21T07:27:35.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h2 id="docker启动"><a href="#docker启动" class="headerlink" title="docker启动"></a>docker启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;nacos-group&#x2F;nacos-docker.git</span><br><span class="line">cd nacos-docker</span><br><span class="line">docker-compose -f example&#x2F;standalone-derby.yaml up</span><br></pre></td></tr></table></figure><h2 id="SpringCloud-namespaces"><a href="#SpringCloud-namespaces" class="headerlink" title="SpringCloud+namespaces"></a>SpringCloud+namespaces</h2><ol><li>添加命名空间</li><li>maven中定义多个环境profile</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">runtime.env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">runtime.env</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nacos.server-addr</span>&gt;</span>10.91.22.7:8888<span class="tag">&lt;/<span class="name">nacos.server-addr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nacos.namespace</span>&gt;</span>aa96c495-c8fa-4078-b159-556c08592786<span class="tag">&lt;/<span class="name">nacos.namespace</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">runtime.env</span>&gt;</span>local<span class="tag">&lt;/<span class="name">runtime.env</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nacos.server-addr</span>&gt;</span>10.91.22.7:8888<span class="tag">&lt;/<span class="name">nacos.server-addr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nacos.namespace</span>&gt;</span>aa96c495-c8fa-4078-b159-556c08592786<span class="tag">&lt;/<span class="name">nacos.namespace</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![image-20210512144727556](/Users/carytseng/Library/Application Support/typora-user-images/image-20210512144727556.png)</p><p><strong>maven中指定生效的profile，idea的active-profile指定的是项目下的对应环境的profile，非nacos上的配置</strong></p><ol start="3"><li>spring.cloud.nacos.discovery.namespace指定注册到相应的命名空间的注册列表，默认会在public</li></ol><p>![image-20210512144838409](/Users/carytseng/Library/Application Support/typora-user-images/image-20210512144838409.png)</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;nacos-group&amp;#x2F;nacos-docker.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd nacos-docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-compose -f example&amp;#x2F;standalone-derby.yaml up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;添加命名空间&lt;/li&gt;
&lt;li&gt;maven中定义多个环境profile&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activeByDefault&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activeByDefault&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activation&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;runtime.env&lt;/span&gt;&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;runtime.env&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nacos.server-addr&lt;/span&gt;&amp;gt;&lt;/span&gt;10.91.22.7:8888&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nacos.server-addr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nacos.namespace&lt;/span&gt;&amp;gt;&lt;/span&gt;aa96c495-c8fa-4078-b159-556c08592786&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nacos.namespace&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;local&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;runtime.env&lt;/span&gt;&amp;gt;&lt;/span&gt;local&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;runtime.env&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nacos.server-addr&lt;/span&gt;&amp;gt;&lt;/span&gt;10.91.22.7:8888&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nacos.server-addr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nacos.namespace&lt;/span&gt;&amp;gt;&lt;/span&gt;aa96c495-c8fa-4078-b159-556c08592786&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nacos.namespace&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;profile&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;![image-20210512144727556](/Users/carytseng/Library/Application Support/typora-user-images/image-20210512144727556.png)&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Presto</title>
    <link href="https://dogfun.top/2020/09/25/presto/"/>
    <id>https://dogfun.top/2020/09/25/presto/</id>
    <published>2020-09-25T01:25:02.000Z</published>
    <updated>2021-09-21T07:27:49.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Presto"><a href="#Presto" class="headerlink" title="Presto"></a>Presto</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​        Facebook开发的分布式查询引擎，采用master-slave架构，由一个Coordinator节点，一个Discovery节点，多个Worker节点组成，Coordinator负责解析SQL，生成执行计划，分发执行任务给多个Worker节点，Worker节点负责实际执行查询任务。Worker节点启动后向Discovery Server服务注册，Coordinator从Discovery Server获得可以正常工作的Worker节点。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>完全基于内存的并行计算</li><li>流水线</li><li>本地化计算</li><li>动态编译执行计划</li><li>小心使用内存和数据结构</li><li>类BlinkDB的近似查询</li><li>GC控制</li></ol><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>手工处理：try_cast([] as [])</p><p>美团修改版：<a href="https://github.com/MTDATA/presto/commits/mt-0.60">https://github.com/MTDATA/presto/commits/mt-0.60</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        Facebook开发的分布式查询引擎，采用master-slave架构，由一个Coordinator节点，一个Discovery节点，多个Worker节点组成，Coordinator负责解析SQL，生成执行计划，分发执行任务给多个Worker节点，Worker节点负责实际执行查询任务。Worker节点启动后向Discovery Server服务注册，Coordinator从Discovery Server获得可以正常工作的Worker节点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;完全基于内存的并行计算&lt;/li&gt;
&lt;li&gt;流水线&lt;/li&gt;
&lt;li&gt;本地化计算&lt;/li&gt;
&lt;li&gt;动态编译执行计划&lt;/li&gt;
&lt;li&gt;小心使用内存和数据结构&lt;/li&gt;
&lt;li&gt;类BlinkDB的近似查询&lt;/li&gt;
&lt;li&gt;GC控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;手工处理：try_cast([] as [])&lt;/p&gt;
&lt;p&gt;美团修改版：&lt;a href=&quot;https://github.com/MTDATA/presto/commits/mt-0.60&quot;&gt;https://github.com/MTDATA/presto/commits/mt-0.60&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>新入书单</title>
    <link href="https://dogfun.top/2020/09/25/%E6%96%B0%E5%85%A5%E4%B9%A6%E5%8D%95/"/>
    <id>https://dogfun.top/2020/09/25/%E6%96%B0%E5%85%A5%E4%B9%A6%E5%8D%95/</id>
    <published>2020-09-25T01:25:02.000Z</published>
    <updated>2021-01-09T05:49:54.541Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Google工作法</li><li>图解黄帝内经</li><li>我们内心的冲突</li><li>我们时代的神经症人格</li><li>Spring5核心原理与30个类手写实战</li><li>零基础学炒股从入门到精通</li></ul><hr><p><strong>待购入</strong></p><ul><li>价值：我对投资的思考</li><li>墨菲定律</li><li>李大霄投资战略</li><li>聪明的投资者</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Google工作法&lt;/li&gt;
&lt;li&gt;图解黄帝内经&lt;/li&gt;
&lt;li&gt;我们内心的冲突&lt;/li&gt;
&lt;li&gt;我们时代的神经症人格&lt;/li&gt;
&lt;li&gt;Spring5核心原理与30个类手写实战&lt;/li&gt;
&lt;li&gt;零基础学炒股从入门到精通&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GC垃圾收集器</title>
    <link href="https://dogfun.top/2020/09/15/jvm/GC%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
    <id>https://dogfun.top/2020/09/15/jvm/GC%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</id>
    <published>2020-09-15T13:02:05.000Z</published>
    <updated>2021-01-09T05:49:54.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GC垃圾收集"><a href="#GC垃圾收集" class="headerlink" title="GC垃圾收集"></a>GC垃圾收集</h1><p>JVM针对堆中的对象，启用守护线程进行无用对象的回收，防止JVM的内存溢出造成程序不可用。</p><h2 id="判断可否回收"><a href="#判断可否回收" class="headerlink" title="判断可否回收"></a>判断可否回收</h2><ul><li><p>引用计数法</p><p>简单来讲就是判断对象是否存在引用，没有则认为可回收，但若存在循环引用的情况，就无法判断导致内存泄漏</p></li><li><p>可达性分析</p><p>通过GC Roots对象作为起点进行搜索，如果一个对象与GC Roots之前没有可达路径，则认为该对象不可达，但还需要经过两次标记才能进行回收</p></li></ul><h2 id="强、软、弱、虚引用"><a href="#强、软、弱、虚引用" class="headerlink" title="强、软、弱、虚引用"></a>强、软、弱、虚引用</h2><p>强引用：存在引用的对象就是强引用对象，gc即使溢出都不会收集这类对象</p><p>软引用：SoftReference对象，如果gc快溢出了，会收集这类对象</p><p>弱引用：WeakReference对象，不管gc空间是否足够都会回收</p><p>虚引用：主要用来跟踪垃圾回收器的活动</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><ul><li>复制算法<ul><li>对内存分区，创建放一边，回收时存活的复制到另一边，然后对原来的空间直接清除。缺点是空间利用率不高，改进可按一定比例划分空间</li></ul></li><li>标记清除算法<ul><li>垃圾的对象标记起来，然后清除垃圾对象。缺点是容易产生内存碎片，导致大对象创建时，发生多次gc</li></ul></li><li>标记整理算法<ul><li>复制算法与标记清除算法的折中策略，标记垃圾对象，将存活的对象复制到边端，然后清除垃圾对象。</li></ul></li></ul><h2 id="商业化虚拟机的方式"><a href="#商业化虚拟机的方式" class="headerlink" title="商业化虚拟机的方式"></a>商业化虚拟机的方式</h2><p>采用分代收集算法，也即不同的年代采用不同的回收策略</p><p>新生代采用复制算法，按照一定的比例默认是8:1:1，分为Eden、From、To三个区域</p><ul><li>Minor GC的过程：开始Eden和From都是空的，新建对象会创建在Eden，一次minor gc时，会把所有存活的对象放到From，清除Eden，下一次gc，Eden和From的存活对象移动到To，清空Eden和From，重复这个过程，当然在过程中会判断对象的年龄阈值，当达到一定的程度会移动到老年代</li></ul><p>老年代采用标记整理算法</p><ul><li>Full GC的过程：主要针对老年代的对象进行回收    </li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><ul><li>单线程，需暂停其他工作线程，复制算法，Client模式下默认新生代收集器</li></ul><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><ul><li>多线程版本的Serial，同样需要暂停工作线程，Server模式下新生代收集器</li></ul><h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><ul><li>关注吞吐量，即用户代码执行时间/(用户代码+回收时)，多线程。复制算法</li></ul><h3 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h3><ul><li>单线程，采用标记整理算法</li></ul><h3 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h3><ul><li>多线程，标记整理算法，Parallel Scavenge的年老代版本</li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><ul><li>多线程标记清除算法，目标是获取最短垃圾回收停顿时间。优点在于并发收集、低停顿<ul><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ul></li></ul><h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2><p>相比CMS，改进</p><ol><li>基于标记整理算法，不产生内存碎片</li><li>可以精确控制停顿时间</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;JVM针对堆中的对象，启用守护线程进行无用对象的回收，防止JVM的内存溢出造成程序不可用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;引用计数法&lt;/p&gt;
&lt;p&gt;简单来讲就是判断对象是否存在引用，没有则认为可回收，但若存在循环引用的情况，就无法判断导致内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可达性分析&lt;/p&gt;
&lt;p&gt;通过GC Roots对象作为起点进行搜索，如果一个对象与GC Roots之前没有可达路径，则认为该对象不可达，但还需要经过两次标记才能进行回收&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;强引用：存在引用的对象就是强引用对象，gc即使溢出都不会收集这类对象&lt;/p&gt;
&lt;p&gt;软引用：SoftReference对象，如果gc快溢出了，会收集这类对象&lt;/p&gt;</summary>
    
    
    
    <category term="jvm" scheme="https://dogfun.top/categories/jvm/"/>
    
    
    <category term="技术学习" scheme="https://dogfun.top/tags/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="垃圾回收" scheme="https://dogfun.top/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>放量下跌</title>
    <link href="https://dogfun.top/2020/09/10/%E9%87%91%E8%9E%8D/%E6%94%BE%E9%87%8F%E4%B8%8B%E8%B7%8C/"/>
    <id>https://dogfun.top/2020/09/10/%E9%87%91%E8%9E%8D/%E6%94%BE%E9%87%8F%E4%B8%8B%E8%B7%8C/</id>
    <published>2020-09-10T07:14:47.000Z</published>
    <updated>2021-01-09T05:49:54.643Z</updated>
    
    <content type="html"><![CDATA[<p>　　今日的市场放量下跌，现在持有500股21.95的招商证券下跌0.5，500股25.50的三安光电，没有精确拿到当天的低价，行情全日震荡幅度大，拿到这个筹码不算最好，但也算不错，留有30%的仓位等补仓用。前日受美股影响A股也下跌，今天突破了3260点下挫到3234附近，目前持有的基金收益已经亏损了，科技股受影响严重，也是因为之前重仓科技基金，只能说看错了入场点，但问题不大，中长期还是看涨的，毕竟大环境越差，股市肯定要逆行，年初放出的货币怎么也要流向股市的，只是看上层怎么控场了，既不想急速拉升把场子弄臭，也不想资金跑掉砸盘，这时候就看各个大资金大机构怎么做好这个工作了。平稳的一个点位一个点位往上调整，这也是符合大众对股票市场建立信心的。虽然手上拿点小钱在股票市场实践，但对于股票市场的风险，参与之后是深有体会，指数区间对于个股某个区间的价位十分难以把握，所以对于散户来讲，要拿到好的价位入场很难，在这种震荡市中，小资金用来走短线获利是十分有优势的，但同时一不小心就被套在高点了，所以散户只能说跟着趋势走，把握大趋势。从长远来看，手持蓝筹股是最稳的选择，走价值投资的路子。路漫漫其修远兮，学点理财技能，给出自己的判断观点，对于世界，经济趋势的把握十分有益，知行合一。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　今日的市场放量下跌，现在持有500股21.95的招商证券下跌0.5，500股25.50的三安光电，没有精确拿到当天的低价，行情全日震荡幅度大，拿到这个筹码不算最好，但也算不错，留有30%的仓位等补仓用。前日受美股影响A股也下跌，今天突破了3260点下挫到3234附近，目</summary>
      
    
    
    
    <category term="金融" scheme="https://dogfun.top/categories/%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="投资" scheme="https://dogfun.top/tags/%E6%8A%95%E8%B5%84/"/>
    
    <category term="股票" scheme="https://dogfun.top/tags/%E8%82%A1%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>牛市?</title>
    <link href="https://dogfun.top/2020/08/17/%E9%87%91%E8%9E%8D/%E7%89%9B%E5%B8%82/"/>
    <id>https://dogfun.top/2020/08/17/%E9%87%91%E8%9E%8D/%E7%89%9B%E5%B8%82/</id>
    <published>2020-08-17T10:51:34.000Z</published>
    <updated>2021-01-09T05:49:54.351Z</updated>
    
    <content type="html"><![CDATA[<p>　　8.17今天的股市红红火火，浙商证券在上周的震荡盘中，亏了6、7个点，后续也没有补仓，虽然看多，600股成本16.44，上周收盘15.50，一块钱的亏损，受可转债转股的影响，担心股价受影响，因此打算换股，看好招商证券20块的价位，但最终没有买入。今天证券板块拉升，招商当了把领头羊，涨停，虽然上周就看出来机构在打压股价，不断地低吸拉成本，可惜了，一波短线没有买入。今天的大盘站到3400以上，拉升过大，后面的量能支撑表示有所怀疑，k线站到了5日线以上，明天之后也会有所回调，今天将手上的浙商16.60清仓了，防止风险，没什么盈利，三安光电25.78的300股，今天到达29.50，比较满意，手上的持仓也没有满上。今天的行情就是撬动金融板块，拉升指数，个股普遍没有大涨，二八行情。后续应该是大盘的板块轮动，今天加仓了手上的科技基金，科技基金之前高拉减仓了，震荡行情中没有什么亏损，提前埋伏科技板，等大盘资金轮动的时候能吃点肉，顺应国家的慢牛行情，小股民跟着赚点小钱，还是要对股市有所敬畏，看好中国的资本市场。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　8.17今天的股市红红火火，浙商证券在上周的震荡盘中，亏了6、7个点，后续也没有补仓，虽然看多，600股成本16.44，上周收盘15.50，一块钱的亏损，受可转债转股的影响，担心股价受影响，因此打算换股，看好招商证券20块的价位，但最终没有买入。今天证券板块拉升，招商当</summary>
      
    
    
    
    <category term="金融" scheme="https://dogfun.top/categories/%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="投资" scheme="https://dogfun.top/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
</feed>
